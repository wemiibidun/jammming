{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImportSpecifier = ImportSpecifier;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\nvar t = require(\"@babel/types\");\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && t.isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && t.isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!t.isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n\n  if (specifiers != null && specifiers.length) {\n    for (;;) {\n      const first = specifiers[0];\n\n      if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length) {\n      this.token(\"{\");\n      this.space();\n      this.printList(specifiers, node);\n      this.space();\n      this.token(\"}\");\n    }\n\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@babel/generator/lib/generators/modules.js"],"names":["Object","defineProperty","exports","value","ImportSpecifier","ImportDefaultSpecifier","ExportDefaultSpecifier","ExportSpecifier","ExportNamespaceSpecifier","ExportAllDeclaration","ExportNamedDeclaration","ExportDefaultDeclaration","ImportDeclaration","ImportAttribute","ImportNamespaceSpecifier","t","require","node","importKind","word","space","print","imported","local","name","exported","token","exportKind","source","printAssertions","semicolon","format","decoratorsBeforeExport","isClassDeclaration","declaration","printJoin","decorators","ExportDeclaration","apply","arguments","declar","isStatement","specifiers","slice","hasSpecial","first","isExportDefaultSpecifier","isExportNamespaceSpecifier","shift","length","printList","isImportDefaultSpecifier","isImportNamespaceSpecifier","_node$attributes","attributes","key"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImportSpecifier = ImportSpecifier;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\nvar t = require(\"@babel/types\");\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && t.isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && t.isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!t.isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n\n  if (specifiers != null && specifiers.length) {\n    for (;;) {\n      const first = specifiers[0];\n\n      if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length) {\n      this.token(\"{\");\n      this.space();\n      this.printList(specifiers, node);\n      this.space();\n      this.token(\"}\");\n    }\n\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}"]},"metadata":{},"sourceType":"script"}