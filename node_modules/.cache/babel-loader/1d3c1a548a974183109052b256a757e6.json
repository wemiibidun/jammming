{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getMaxWorkers;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction getMaxWorkers(argv, defaultOptions) {\n  if (argv.runInBand) {\n    return 1;\n  } else if (argv.maxWorkers) {\n    return parseWorkers(argv.maxWorkers);\n  } else if (defaultOptions && defaultOptions.maxWorkers) {\n    return parseWorkers(defaultOptions.maxWorkers);\n  } else {\n    // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n    const numCpus = (0, _os().cpus)() ? (0, _os().cpus)().length : 1;\n    const isWatchModeEnabled = argv.watch || argv.watchAll;\n    return Math.max(isWatchModeEnabled ? Math.floor(numCpus / 2) : numCpus - 1, 1);\n  }\n}\n\nconst parseWorkers = maxWorkers => {\n  const parsed = parseInt(maxWorkers.toString(), 10);\n\n  if (typeof maxWorkers === 'string' && maxWorkers.trim().endsWith('%') && parsed > 0 && parsed <= 100) {\n    const numCpus = (0, _os().cpus)().length;\n    const workers = Math.floor(parsed / 100 * numCpus);\n    return workers >= 1 ? workers : 1;\n  }\n\n  return parsed > 0 ? parsed : 1;\n};","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-config/build/getMaxWorkers.js"],"names":["Object","defineProperty","exports","value","default","getMaxWorkers","_os","data","require","argv","defaultOptions","runInBand","maxWorkers","parseWorkers","numCpus","cpus","length","isWatchModeEnabled","watch","watchAll","Math","max","floor","parsed","parseInt","toString","trim","endsWith","workers"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,GAAGC,OAAO,CAAC,IAAD,CAApB;;AAEAF,EAAAA,GAAG,GAAG,YAAY;AAChB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,aAAT,CAAuBI,IAAvB,EAA6BC,cAA7B,EAA6C;AAC3C,MAAID,IAAI,CAACE,SAAT,EAAoB;AAClB,WAAO,CAAP;AACD,GAFD,MAEO,IAAIF,IAAI,CAACG,UAAT,EAAqB;AAC1B,WAAOC,YAAY,CAACJ,IAAI,CAACG,UAAN,CAAnB;AACD,GAFM,MAEA,IAAIF,cAAc,IAAIA,cAAc,CAACE,UAArC,EAAiD;AACtD,WAAOC,YAAY,CAACH,cAAc,CAACE,UAAhB,CAAnB;AACD,GAFM,MAEA;AACL;AACA,UAAME,OAAO,GAAG,CAAC,GAAGR,GAAG,GAAGS,IAAV,MAAoB,CAAC,GAAGT,GAAG,GAAGS,IAAV,IAAkBC,MAAtC,GAA+C,CAA/D;AACA,UAAMC,kBAAkB,GAAGR,IAAI,CAACS,KAAL,IAAcT,IAAI,CAACU,QAA9C;AACA,WAAOC,IAAI,CAACC,GAAL,CACLJ,kBAAkB,GAAGG,IAAI,CAACE,KAAL,CAAWR,OAAO,GAAG,CAArB,CAAH,GAA6BA,OAAO,GAAG,CADpD,EAEL,CAFK,CAAP;AAID;AACF;;AAED,MAAMD,YAAY,GAAGD,UAAU,IAAI;AACjC,QAAMW,MAAM,GAAGC,QAAQ,CAACZ,UAAU,CAACa,QAAX,EAAD,EAAwB,EAAxB,CAAvB;;AAEA,MACE,OAAOb,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAACc,IAAX,GAAkBC,QAAlB,CAA2B,GAA3B,CADA,IAEAJ,MAAM,GAAG,CAFT,IAGAA,MAAM,IAAI,GAJZ,EAKE;AACA,UAAMT,OAAO,GAAG,CAAC,GAAGR,GAAG,GAAGS,IAAV,IAAkBC,MAAlC;AACA,UAAMY,OAAO,GAAGR,IAAI,CAACE,KAAL,CAAYC,MAAM,GAAG,GAAV,GAAiBT,OAA5B,CAAhB;AACA,WAAOc,OAAO,IAAI,CAAX,GAAeA,OAAf,GAAyB,CAAhC;AACD;;AAED,SAAOL,MAAM,GAAG,CAAT,GAAaA,MAAb,GAAsB,CAA7B;AACD,CAfD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getMaxWorkers;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getMaxWorkers(argv, defaultOptions) {\n  if (argv.runInBand) {\n    return 1;\n  } else if (argv.maxWorkers) {\n    return parseWorkers(argv.maxWorkers);\n  } else if (defaultOptions && defaultOptions.maxWorkers) {\n    return parseWorkers(defaultOptions.maxWorkers);\n  } else {\n    // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n    const numCpus = (0, _os().cpus)() ? (0, _os().cpus)().length : 1;\n    const isWatchModeEnabled = argv.watch || argv.watchAll;\n    return Math.max(\n      isWatchModeEnabled ? Math.floor(numCpus / 2) : numCpus - 1,\n      1\n    );\n  }\n}\n\nconst parseWorkers = maxWorkers => {\n  const parsed = parseInt(maxWorkers.toString(), 10);\n\n  if (\n    typeof maxWorkers === 'string' &&\n    maxWorkers.trim().endsWith('%') &&\n    parsed > 0 &&\n    parsed <= 100\n  ) {\n    const numCpus = (0, _os().cpus)().length;\n    const workers = Math.floor((parsed / 100) * numCpus);\n    return workers >= 1 ? workers : 1;\n  }\n\n  return parsed > 0 ? parsed : 1;\n};\n"]},"metadata":{},"sourceType":"script"}