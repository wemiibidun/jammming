{"ast":null,"code":"const clientID = '6d7f450a2d294423a212e3874d46ad4f';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); //let's us capture all the characters assigned to the token\n\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //this clears the parameter, allowing us to grab access token when it expires\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringigy({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userid}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/wemi/jammming/src/util/Spotify.js"],"names":["clientID","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringigy","playlistId","userid","stringify","uris"],"mappings":"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","sourcesContent":["const clientID = '6d7f450a2d294423a212e3874d46ad4f';\nconst redirectUri = 'http://localhost:3000/';\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken (){\n        if (accessToken){\n            return accessToken;\n        }\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); //let's us capture all the characters assigned to the token\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            //this clears the parameter, allowing us to grab access token when it expires\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        }else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track =>({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist (name, trackUris){\n        if (!name || !trackUris.length){\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers }\n        ).then(response => response.json() \n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringigy({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userid}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body : JSON.stringify({uris: trackUris})\n                })\n            })\n\n        })\n        \n      }\n\n    }\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}