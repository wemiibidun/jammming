{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.readConfig = readConfig;\nexports.readConfigs = readConfigs;\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function () {\n    return _normalize.default;\n  }\n});\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function () {\n    return _utils.getTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function () {\n    return _utils.isJSONString;\n  }\n});\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function () {\n    return _utils.replaceRootDirInPath;\n  }\n});\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function () {\n    return _Deprecated.default;\n  }\n});\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function () {\n    return _Defaults.default;\n  }\n});\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function () {\n    return _Descriptions.default;\n  }\n});\nexports.constants = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar constants = _interopRequireWildcard(require('./constants'));\n\nexports.constants = constants;\n\nvar _normalize = _interopRequireDefault(require('./normalize'));\n\nvar _readConfigFileAndSetRootDir = _interopRequireDefault(require('./readConfigFileAndSetRootDir'));\n\nvar _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n\nvar _utils = require('./utils');\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Descriptions = _interopRequireDefault(require('./Descriptions'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nasync function readConfig(argv, packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.\n// It only used to read initial config. If the initial config contains\n// `project` property, we don't want to read `--config` value and rather\n// read individual configs for every project.\nskipArgvConfigOption, parentConfigPath, projectIndex = Infinity) {\n  let rawOptions;\n  let configPath = null;\n\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigPath) {\n      const parentConfigDirname = path().dirname(parentConfigPath);\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir ? (0, _utils.replaceRootDirInPath)(parentConfigDirname, rawOptions.rootDir) : parentConfigDirname;\n    } else {\n      throw new Error('Jest: Cannot use configuration as an object without a file path.');\n    }\n  } else if ((0, _utils.isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    let config;\n\n    try {\n      config = JSON.parse(argv.config);\n    } catch {\n      throw new Error('There was an error while parsing the `--config` argument as a JSON string.');\n    } // NOTE: we might need to resolve this dir to an absolute path in the future\n\n\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, _resolveConfigPath.default)(argv.config, process.cwd());\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, _resolveConfigPath.default)(packageRootOrConfig, process.cwd());\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  }\n\n  if (typeof rawOptions === 'function') {\n    rawOptions = await rawOptions();\n  }\n\n  const {\n    options,\n    hasDeprecationWarnings\n  } = (0, _normalize.default)(rawOptions, argv, configPath, projectIndex);\n  const {\n    globalConfig,\n    projectConfig\n  } = groupOptions(options);\n  return {\n    configPath,\n    globalConfig,\n    hasDeprecationWarnings,\n    projectConfig\n  };\n}\n\nconst groupOptions = options => ({\n  globalConfig: Object.freeze({\n    bail: options.bail,\n    changedFilesWithAncestor: options.changedFilesWithAncestor,\n    changedSince: options.changedSince,\n    collectCoverage: options.collectCoverage,\n    collectCoverageFrom: options.collectCoverageFrom,\n    collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n    coverageDirectory: options.coverageDirectory,\n    coverageProvider: options.coverageProvider,\n    coverageReporters: options.coverageReporters,\n    coverageThreshold: options.coverageThreshold,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    enabledTestsMap: options.enabledTestsMap,\n    errorOnDeprecated: options.errorOnDeprecated,\n    expand: options.expand,\n    filter: options.filter,\n    findRelatedTests: options.findRelatedTests,\n    forceExit: options.forceExit,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    json: options.json,\n    lastCommit: options.lastCommit,\n    listTests: options.listTests,\n    logHeapUsage: options.logHeapUsage,\n    maxConcurrency: options.maxConcurrency,\n    maxWorkers: options.maxWorkers,\n    noSCM: undefined,\n    noStackTrace: options.noStackTrace,\n    nonFlagArgs: options.nonFlagArgs,\n    notify: options.notify,\n    notifyMode: options.notifyMode,\n    onlyChanged: options.onlyChanged,\n    onlyFailures: options.onlyFailures,\n    outputFile: options.outputFile,\n    passWithNoTests: options.passWithNoTests,\n    projects: options.projects,\n    replname: options.replname,\n    reporters: options.reporters,\n    rootDir: options.rootDir,\n    runTestsByPath: options.runTestsByPath,\n    silent: options.silent,\n    skipFilter: options.skipFilter,\n    testFailureExitCode: options.testFailureExitCode,\n    testNamePattern: options.testNamePattern,\n    testPathPattern: options.testPathPattern,\n    testResultsProcessor: options.testResultsProcessor,\n    testSequencer: options.testSequencer,\n    testTimeout: options.testTimeout,\n    updateSnapshot: options.updateSnapshot,\n    useStderr: options.useStderr,\n    verbose: options.verbose,\n    watch: options.watch,\n    watchAll: options.watchAll,\n    watchPlugins: options.watchPlugins,\n    watchman: options.watchman\n  }),\n  projectConfig: Object.freeze({\n    automock: options.automock,\n    cache: options.cache,\n    cacheDirectory: options.cacheDirectory,\n    clearMocks: options.clearMocks,\n    coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n    cwd: options.cwd,\n    dependencyExtractor: options.dependencyExtractor,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    displayName: options.displayName,\n    errorOnDeprecated: options.errorOnDeprecated,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    forceCoverageMatch: options.forceCoverageMatch,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    globals: options.globals,\n    haste: options.haste,\n    injectGlobals: options.injectGlobals,\n    moduleDirectories: options.moduleDirectories,\n    moduleFileExtensions: options.moduleFileExtensions,\n    moduleLoader: options.moduleLoader,\n    moduleNameMapper: options.moduleNameMapper,\n    modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n    modulePaths: options.modulePaths,\n    name: options.name,\n    prettierPath: options.prettierPath,\n    resetMocks: options.resetMocks,\n    resetModules: options.resetModules,\n    resolver: options.resolver,\n    restoreMocks: options.restoreMocks,\n    rootDir: options.rootDir,\n    roots: options.roots,\n    runner: options.runner,\n    setupFiles: options.setupFiles,\n    setupFilesAfterEnv: options.setupFilesAfterEnv,\n    skipFilter: options.skipFilter,\n    skipNodeResolution: options.skipNodeResolution,\n    slowTestThreshold: options.slowTestThreshold,\n    snapshotResolver: options.snapshotResolver,\n    snapshotSerializers: options.snapshotSerializers,\n    testEnvironment: options.testEnvironment,\n    testEnvironmentOptions: options.testEnvironmentOptions,\n    testLocationInResults: options.testLocationInResults,\n    testMatch: options.testMatch,\n    testPathIgnorePatterns: options.testPathIgnorePatterns,\n    testRegex: options.testRegex,\n    testRunner: options.testRunner,\n    testURL: options.testURL,\n    timers: options.timers,\n    transform: options.transform,\n    transformIgnorePatterns: options.transformIgnorePatterns,\n    unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n    watchPathIgnorePatterns: options.watchPathIgnorePatterns\n  })\n});\n\nconst ensureNoDuplicateConfigs = (parsedConfigs, projects) => {\n  if (projects.length <= 1) {\n    return;\n  }\n\n  const configPathMap = new Map();\n\n  for (const config of parsedConfigs) {\n    const {\n      configPath\n    } = config;\n\n    if (configPathMap.has(configPath)) {\n      const message = `Whoops! Two projects resolved to the same config path: ${_chalk().default.bold(String(configPath))}:\n\n  Project 1: ${_chalk().default.bold(projects[parsedConfigs.findIndex(x => x === config)])}\n  Project 2: ${_chalk().default.bold(projects[parsedConfigs.findIndex(x => x === configPathMap.get(configPath))])}\n\nThis usually means that your ${_chalk().default.bold('\"projects\"')} config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n`;\n      throw new Error(message);\n    }\n\n    if (configPath !== null) {\n      configPathMap.set(configPath, config);\n    }\n  }\n}; // Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\n\n\nasync function readConfigs(argv, projectPaths) {\n  let globalConfig;\n  let hasDeprecationWarnings;\n  let configs = [];\n  let projects = projectPaths;\n  let configPath;\n\n  if (projectPaths.length === 1) {\n    const parsedConfig = await readConfig(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      // In other words, if this was a single project,\n      // and its config has `projects` settings, use that value instead.\n      projects = globalConfig.projects;\n    }\n  }\n\n  if (projects.length > 0) {\n    const projectIsCwd = process.platform === 'win32' ? projects[0] === (0, _jestUtil().tryRealpath)(process.cwd()) : projects[0] === process.cwd();\n    const parsedConfigs = await Promise.all(projects.filter(root => {\n      // Ignore globbed files that cannot be `require`d.\n      if (typeof root === 'string' && fs().existsSync(root) && !fs().lstatSync(root).isDirectory() && !constants.JEST_CONFIG_EXT_ORDER.some(ext => root.endsWith(ext))) {\n        return false;\n      }\n\n      return true;\n    }).map((root, projectIndex) => {\n      const projectIsTheOnlyProject = projectIndex === 0 && projects.length === 1;\n      const skipArgvConfigOption = !(projectIsTheOnlyProject && projectIsCwd);\n      return readConfig(argv, root, skipArgvConfigOption, configPath, projectIndex);\n    }));\n    ensureNoDuplicateConfigs(parsedConfigs, projects);\n    configs = parsedConfigs.map(({\n      projectConfig\n    }) => projectConfig);\n\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(({\n        hasDeprecationWarnings\n      }) => !!hasDeprecationWarnings);\n    } // If no config was passed initially, use the one from the first project\n\n\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n\n  return {\n    configs,\n    globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-config/build/index.js"],"names":["Object","defineProperty","exports","value","readConfig","readConfigs","enumerable","get","_normalize","default","_utils","getTestEnvironment","isJSONString","replaceRootDirInPath","_Deprecated","_Defaults","_Descriptions","constants","path","data","_interopRequireWildcard","require","_chalk","_interopRequireDefault","fs","_jestUtil","_readConfigFileAndSetRootDir","_resolveConfigPath","obj","__esModule","_getRequireWildcardCache","WeakMap","cache","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","argv","packageRootOrConfig","skipArgvConfigOption","parentConfigPath","projectIndex","Infinity","rawOptions","configPath","parentConfigDirname","dirname","rootDir","Error","config","JSON","parse","process","cwd","options","hasDeprecationWarnings","globalConfig","projectConfig","groupOptions","freeze","bail","changedFilesWithAncestor","changedSince","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","coverageDirectory","coverageProvider","coverageReporters","coverageThreshold","detectLeaks","detectOpenHandles","enabledTestsMap","errorOnDeprecated","expand","filter","findRelatedTests","forceExit","globalSetup","globalTeardown","json","lastCommit","listTests","logHeapUsage","maxConcurrency","maxWorkers","noSCM","undefined","noStackTrace","nonFlagArgs","notify","notifyMode","onlyChanged","onlyFailures","outputFile","passWithNoTests","projects","replname","reporters","runTestsByPath","silent","skipFilter","testFailureExitCode","testNamePattern","testPathPattern","testResultsProcessor","testSequencer","testTimeout","updateSnapshot","useStderr","verbose","watch","watchAll","watchPlugins","watchman","automock","cacheDirectory","clearMocks","coveragePathIgnorePatterns","dependencyExtractor","displayName","extraGlobals","forceCoverageMatch","globals","haste","injectGlobals","moduleDirectories","moduleFileExtensions","moduleLoader","moduleNameMapper","modulePathIgnorePatterns","modulePaths","name","prettierPath","resetMocks","resetModules","resolver","restoreMocks","roots","runner","setupFiles","setupFilesAfterEnv","skipNodeResolution","slowTestThreshold","snapshotResolver","snapshotSerializers","testEnvironment","testEnvironmentOptions","testLocationInResults","testMatch","testPathIgnorePatterns","testRegex","testRunner","testURL","timers","transform","transformIgnorePatterns","unmockedModulePathPatterns","watchPathIgnorePatterns","ensureNoDuplicateConfigs","parsedConfigs","length","configPathMap","Map","message","bold","String","findIndex","x","projectPaths","configs","parsedConfig","projectIsCwd","platform","tryRealpath","Promise","all","root","existsSync","lstatSync","isDirectory","JEST_CONFIG_EXT_ORDER","some","ext","endsWith","map","projectIsTheOnlyProject"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.readConfig = readConfig;\nexports.readConfigs = readConfigs;\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function () {\n    return _normalize.default;\n  }\n});\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function () {\n    return _utils.getTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function () {\n    return _utils.isJSONString;\n  }\n});\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function () {\n    return _utils.replaceRootDirInPath;\n  }\n});\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function () {\n    return _Deprecated.default;\n  }\n});\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function () {\n    return _Defaults.default;\n  }\n});\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function () {\n    return _Descriptions.default;\n  }\n});\nexports.constants = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar constants = _interopRequireWildcard(require('./constants'));\n\nexports.constants = constants;\n\nvar _normalize = _interopRequireDefault(require('./normalize'));\n\nvar _readConfigFileAndSetRootDir = _interopRequireDefault(\n  require('./readConfigFileAndSetRootDir')\n);\n\nvar _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n\nvar _utils = require('./utils');\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Descriptions = _interopRequireDefault(require('./Descriptions'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nasync function readConfig(\n  argv,\n  packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.\n  // It only used to read initial config. If the initial config contains\n  // `project` property, we don't want to read `--config` value and rather\n  // read individual configs for every project.\n  skipArgvConfigOption,\n  parentConfigPath,\n  projectIndex = Infinity\n) {\n  let rawOptions;\n  let configPath = null;\n\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigPath) {\n      const parentConfigDirname = path().dirname(parentConfigPath);\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir\n        ? (0, _utils.replaceRootDirInPath)(\n            parentConfigDirname,\n            rawOptions.rootDir\n          )\n        : parentConfigDirname;\n    } else {\n      throw new Error(\n        'Jest: Cannot use configuration as an object without a file path.'\n      );\n    }\n  } else if ((0, _utils.isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    let config;\n\n    try {\n      config = JSON.parse(argv.config);\n    } catch {\n      throw new Error(\n        'There was an error while parsing the `--config` argument as a JSON string.'\n      );\n    } // NOTE: we might need to resolve this dir to an absolute path in the future\n\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, _resolveConfigPath.default)(argv.config, process.cwd());\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, _resolveConfigPath.default)(\n      packageRootOrConfig,\n      process.cwd()\n    );\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  }\n\n  if (typeof rawOptions === 'function') {\n    rawOptions = await rawOptions();\n  }\n\n  const {options, hasDeprecationWarnings} = (0, _normalize.default)(\n    rawOptions,\n    argv,\n    configPath,\n    projectIndex\n  );\n  const {globalConfig, projectConfig} = groupOptions(options);\n  return {\n    configPath,\n    globalConfig,\n    hasDeprecationWarnings,\n    projectConfig\n  };\n}\n\nconst groupOptions = options => ({\n  globalConfig: Object.freeze({\n    bail: options.bail,\n    changedFilesWithAncestor: options.changedFilesWithAncestor,\n    changedSince: options.changedSince,\n    collectCoverage: options.collectCoverage,\n    collectCoverageFrom: options.collectCoverageFrom,\n    collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n    coverageDirectory: options.coverageDirectory,\n    coverageProvider: options.coverageProvider,\n    coverageReporters: options.coverageReporters,\n    coverageThreshold: options.coverageThreshold,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    enabledTestsMap: options.enabledTestsMap,\n    errorOnDeprecated: options.errorOnDeprecated,\n    expand: options.expand,\n    filter: options.filter,\n    findRelatedTests: options.findRelatedTests,\n    forceExit: options.forceExit,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    json: options.json,\n    lastCommit: options.lastCommit,\n    listTests: options.listTests,\n    logHeapUsage: options.logHeapUsage,\n    maxConcurrency: options.maxConcurrency,\n    maxWorkers: options.maxWorkers,\n    noSCM: undefined,\n    noStackTrace: options.noStackTrace,\n    nonFlagArgs: options.nonFlagArgs,\n    notify: options.notify,\n    notifyMode: options.notifyMode,\n    onlyChanged: options.onlyChanged,\n    onlyFailures: options.onlyFailures,\n    outputFile: options.outputFile,\n    passWithNoTests: options.passWithNoTests,\n    projects: options.projects,\n    replname: options.replname,\n    reporters: options.reporters,\n    rootDir: options.rootDir,\n    runTestsByPath: options.runTestsByPath,\n    silent: options.silent,\n    skipFilter: options.skipFilter,\n    testFailureExitCode: options.testFailureExitCode,\n    testNamePattern: options.testNamePattern,\n    testPathPattern: options.testPathPattern,\n    testResultsProcessor: options.testResultsProcessor,\n    testSequencer: options.testSequencer,\n    testTimeout: options.testTimeout,\n    updateSnapshot: options.updateSnapshot,\n    useStderr: options.useStderr,\n    verbose: options.verbose,\n    watch: options.watch,\n    watchAll: options.watchAll,\n    watchPlugins: options.watchPlugins,\n    watchman: options.watchman\n  }),\n  projectConfig: Object.freeze({\n    automock: options.automock,\n    cache: options.cache,\n    cacheDirectory: options.cacheDirectory,\n    clearMocks: options.clearMocks,\n    coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n    cwd: options.cwd,\n    dependencyExtractor: options.dependencyExtractor,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    displayName: options.displayName,\n    errorOnDeprecated: options.errorOnDeprecated,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    forceCoverageMatch: options.forceCoverageMatch,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    globals: options.globals,\n    haste: options.haste,\n    injectGlobals: options.injectGlobals,\n    moduleDirectories: options.moduleDirectories,\n    moduleFileExtensions: options.moduleFileExtensions,\n    moduleLoader: options.moduleLoader,\n    moduleNameMapper: options.moduleNameMapper,\n    modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n    modulePaths: options.modulePaths,\n    name: options.name,\n    prettierPath: options.prettierPath,\n    resetMocks: options.resetMocks,\n    resetModules: options.resetModules,\n    resolver: options.resolver,\n    restoreMocks: options.restoreMocks,\n    rootDir: options.rootDir,\n    roots: options.roots,\n    runner: options.runner,\n    setupFiles: options.setupFiles,\n    setupFilesAfterEnv: options.setupFilesAfterEnv,\n    skipFilter: options.skipFilter,\n    skipNodeResolution: options.skipNodeResolution,\n    slowTestThreshold: options.slowTestThreshold,\n    snapshotResolver: options.snapshotResolver,\n    snapshotSerializers: options.snapshotSerializers,\n    testEnvironment: options.testEnvironment,\n    testEnvironmentOptions: options.testEnvironmentOptions,\n    testLocationInResults: options.testLocationInResults,\n    testMatch: options.testMatch,\n    testPathIgnorePatterns: options.testPathIgnorePatterns,\n    testRegex: options.testRegex,\n    testRunner: options.testRunner,\n    testURL: options.testURL,\n    timers: options.timers,\n    transform: options.transform,\n    transformIgnorePatterns: options.transformIgnorePatterns,\n    unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n    watchPathIgnorePatterns: options.watchPathIgnorePatterns\n  })\n});\n\nconst ensureNoDuplicateConfigs = (parsedConfigs, projects) => {\n  if (projects.length <= 1) {\n    return;\n  }\n\n  const configPathMap = new Map();\n\n  for (const config of parsedConfigs) {\n    const {configPath} = config;\n\n    if (configPathMap.has(configPath)) {\n      const message = `Whoops! Two projects resolved to the same config path: ${_chalk().default.bold(\n        String(configPath)\n      )}:\n\n  Project 1: ${_chalk().default.bold(\n    projects[parsedConfigs.findIndex(x => x === config)]\n  )}\n  Project 2: ${_chalk().default.bold(\n    projects[parsedConfigs.findIndex(x => x === configPathMap.get(configPath))]\n  )}\n\nThis usually means that your ${_chalk().default.bold(\n        '\"projects\"'\n      )} config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n`;\n      throw new Error(message);\n    }\n\n    if (configPath !== null) {\n      configPathMap.set(configPath, config);\n    }\n  }\n}; // Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\n\nasync function readConfigs(argv, projectPaths) {\n  let globalConfig;\n  let hasDeprecationWarnings;\n  let configs = [];\n  let projects = projectPaths;\n  let configPath;\n\n  if (projectPaths.length === 1) {\n    const parsedConfig = await readConfig(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      // In other words, if this was a single project,\n      // and its config has `projects` settings, use that value instead.\n      projects = globalConfig.projects;\n    }\n  }\n\n  if (projects.length > 0) {\n    const projectIsCwd =\n      process.platform === 'win32'\n        ? projects[0] === (0, _jestUtil().tryRealpath)(process.cwd())\n        : projects[0] === process.cwd();\n    const parsedConfigs = await Promise.all(\n      projects\n        .filter(root => {\n          // Ignore globbed files that cannot be `require`d.\n          if (\n            typeof root === 'string' &&\n            fs().existsSync(root) &&\n            !fs().lstatSync(root).isDirectory() &&\n            !constants.JEST_CONFIG_EXT_ORDER.some(ext => root.endsWith(ext))\n          ) {\n            return false;\n          }\n\n          return true;\n        })\n        .map((root, projectIndex) => {\n          const projectIsTheOnlyProject =\n            projectIndex === 0 && projects.length === 1;\n          const skipArgvConfigOption = !(\n            projectIsTheOnlyProject && projectIsCwd\n          );\n          return readConfig(\n            argv,\n            root,\n            skipArgvConfigOption,\n            configPath,\n            projectIndex\n          );\n        })\n    );\n    ensureNoDuplicateConfigs(parsedConfigs, projects);\n    configs = parsedConfigs.map(({projectConfig}) => projectConfig);\n\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(\n        ({hasDeprecationWarnings}) => !!hasDeprecationWarnings\n      );\n    } // If no config was passed initially, use the one from the first project\n\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n\n  return {\n    configs,\n    globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n}\n"]},"metadata":{},"sourceType":"script"}