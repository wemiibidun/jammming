{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _constants = require('./constants');\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst isFile = filePath => fs().existsSync(filePath) && !fs().lstatSync(filePath).isDirectory();\n\nconst getConfigFilename = ext => _constants.JEST_CONFIG_BASE_NAME + ext;\n\nvar _default = (pathToResolve, cwd) => {\n  if (!path().isAbsolute(cwd)) {\n    throw new Error(`\"cwd\" must be an absolute path. cwd: ${cwd}`);\n  }\n\n  const absolutePath = path().isAbsolute(pathToResolve) ? pathToResolve : path().resolve(cwd, pathToResolve);\n\n  if (isFile(absolutePath)) {\n    return absolutePath;\n  } // This is a guard against passing non existing path as a project/config,\n  // that will otherwise result in a very confusing situation.\n  // e.g.\n  // With a directory structure like this:\n  //   my_project/\n  //     packcage.json\n  //\n  // Passing a `my_project/some_directory_that_doesnt_exist` as a project\n  // name will resolve into a (possibly empty) `my_project/package.json` and\n  // try to run all tests it finds under `my_project` directory.\n\n\n  if (!fs().existsSync(absolutePath)) {\n    throw new Error(`Can't find a root directory while resolving a config file path.\\n` + `Provided path to resolve: ${pathToResolve}\\n` + `cwd: ${cwd}`);\n  }\n\n  return resolveConfigPathByTraversing(absolutePath, pathToResolve, cwd);\n};\n\nexports.default = _default;\n\nconst resolveConfigPathByTraversing = (pathToResolve, initialPath, cwd) => {\n  const jestConfig = _constants.JEST_CONFIG_EXT_ORDER.map(ext => path().resolve(pathToResolve, getConfigFilename(ext))).find(isFile);\n\n  if (jestConfig) {\n    return jestConfig;\n  }\n\n  const packageJson = path().resolve(pathToResolve, _constants.PACKAGE_JSON);\n\n  if (isFile(packageJson)) {\n    return packageJson;\n  } // This is the system root.\n  // We tried everything, config is nowhere to be found ¯\\_(ツ)_/¯\n\n\n  if (pathToResolve === path().dirname(pathToResolve)) {\n    throw new Error(makeResolutionErrorMessage(initialPath, cwd));\n  } // go up a level and try it again\n\n\n  return resolveConfigPathByTraversing(path().dirname(pathToResolve), initialPath, cwd);\n};\n\nconst makeResolutionErrorMessage = (initialPath, cwd) => 'Could not find a config file based on provided values:\\n' + `path: \"${initialPath}\"\\n` + `cwd: \"${cwd}\"\\n` + 'Config paths must be specified by either a direct path to a config\\n' + 'file, or a path to a directory. If directory is given, Jest will try to\\n' + `traverse directory tree up, until it finds one of those files in exact order: ${_constants.JEST_CONFIG_EXT_ORDER.map(ext => `\"${getConfigFilename(ext)}\"`).join(' or ')}.`;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-config/build/resolveConfigPath.js"],"names":["Object","defineProperty","exports","value","default","path","data","_interopRequireWildcard","require","fs","_constants","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","isFile","filePath","existsSync","lstatSync","isDirectory","getConfigFilename","ext","JEST_CONFIG_BASE_NAME","_default","pathToResolve","cwd","isAbsolute","Error","absolutePath","resolve","resolveConfigPathByTraversing","initialPath","jestConfig","JEST_CONFIG_EXT_ORDER","map","find","packageJson","PACKAGE_JSON","dirname","makeResolutionErrorMessage","join"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _constants = require('./constants');\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst isFile = filePath =>\n  fs().existsSync(filePath) && !fs().lstatSync(filePath).isDirectory();\n\nconst getConfigFilename = ext => _constants.JEST_CONFIG_BASE_NAME + ext;\n\nvar _default = (pathToResolve, cwd) => {\n  if (!path().isAbsolute(cwd)) {\n    throw new Error(`\"cwd\" must be an absolute path. cwd: ${cwd}`);\n  }\n\n  const absolutePath = path().isAbsolute(pathToResolve)\n    ? pathToResolve\n    : path().resolve(cwd, pathToResolve);\n\n  if (isFile(absolutePath)) {\n    return absolutePath;\n  } // This is a guard against passing non existing path as a project/config,\n  // that will otherwise result in a very confusing situation.\n  // e.g.\n  // With a directory structure like this:\n  //   my_project/\n  //     packcage.json\n  //\n  // Passing a `my_project/some_directory_that_doesnt_exist` as a project\n  // name will resolve into a (possibly empty) `my_project/package.json` and\n  // try to run all tests it finds under `my_project` directory.\n\n  if (!fs().existsSync(absolutePath)) {\n    throw new Error(\n      `Can't find a root directory while resolving a config file path.\\n` +\n        `Provided path to resolve: ${pathToResolve}\\n` +\n        `cwd: ${cwd}`\n    );\n  }\n\n  return resolveConfigPathByTraversing(absolutePath, pathToResolve, cwd);\n};\n\nexports.default = _default;\n\nconst resolveConfigPathByTraversing = (pathToResolve, initialPath, cwd) => {\n  const jestConfig = _constants.JEST_CONFIG_EXT_ORDER.map(ext =>\n    path().resolve(pathToResolve, getConfigFilename(ext))\n  ).find(isFile);\n\n  if (jestConfig) {\n    return jestConfig;\n  }\n\n  const packageJson = path().resolve(pathToResolve, _constants.PACKAGE_JSON);\n\n  if (isFile(packageJson)) {\n    return packageJson;\n  } // This is the system root.\n  // We tried everything, config is nowhere to be found ¯\\_(ツ)_/¯\n\n  if (pathToResolve === path().dirname(pathToResolve)) {\n    throw new Error(makeResolutionErrorMessage(initialPath, cwd));\n  } // go up a level and try it again\n\n  return resolveConfigPathByTraversing(\n    path().dirname(pathToResolve),\n    initialPath,\n    cwd\n  );\n};\n\nconst makeResolutionErrorMessage = (initialPath, cwd) =>\n  'Could not find a config file based on provided values:\\n' +\n  `path: \"${initialPath}\"\\n` +\n  `cwd: \"${cwd}\"\\n` +\n  'Config paths must be specified by either a direct path to a config\\n' +\n  'file, or a path to a directory. If directory is given, Jest will try to\\n' +\n  `traverse directory tree up, until it finds one of those files in exact order: ${_constants.JEST_CONFIG_EXT_ORDER.map(\n    ext => `\"${getConfigFilename(ext)}\"`\n  ).join(' or ')}.`;\n"]},"metadata":{},"sourceType":"script"}