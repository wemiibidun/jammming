{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = treeProcessor;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction treeProcessor(options) {\n  const {\n    nodeComplete,\n    nodeStart,\n    queueRunnerFactory,\n    runnableIds,\n    tree\n  } = options;\n\n  function isEnabled(node, parentEnabled) {\n    return parentEnabled || runnableIds.indexOf(node.id) !== -1;\n  }\n\n  function getNodeHandler(node, parentEnabled) {\n    const enabled = isEnabled(node, parentEnabled);\n    return node.children ? getNodeWithChildrenHandler(node, enabled) : getNodeWithoutChildrenHandler(node, enabled);\n  }\n\n  function getNodeWithoutChildrenHandler(node, enabled) {\n    return function fn(done = () => {}) {\n      node.execute(done, enabled);\n    };\n  }\n\n  function getNodeWithChildrenHandler(node, enabled) {\n    return async function fn(done = () => {}) {\n      nodeStart(node);\n      await queueRunnerFactory({\n        onException: error => node.onException(error),\n        queueableFns: wrapChildren(node, enabled),\n        userContext: node.sharedUserContext()\n      });\n      nodeComplete(node);\n      done();\n    };\n  }\n\n  function hasNoEnabledTest(node) {\n    if (node.children) {\n      return node.children.every(hasNoEnabledTest);\n    }\n\n    return node.disabled || node.markedPending;\n  }\n\n  function wrapChildren(node, enabled) {\n    if (!node.children) {\n      throw new Error('`node.children` is not defined.');\n    }\n\n    const children = node.children.map(child => ({\n      fn: getNodeHandler(child, enabled)\n    }));\n\n    if (hasNoEnabledTest(node)) {\n      return children;\n    }\n\n    return node.beforeAllFns.concat(children).concat(node.afterAllFns);\n  }\n\n  const treeHandler = getNodeHandler(tree, false);\n  return treeHandler();\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-jasmine2/build/treeProcessor.js"],"names":["Object","defineProperty","exports","value","default","treeProcessor","options","nodeComplete","nodeStart","queueRunnerFactory","runnableIds","tree","isEnabled","node","parentEnabled","indexOf","id","getNodeHandler","enabled","children","getNodeWithChildrenHandler","getNodeWithoutChildrenHandler","fn","done","execute","onException","error","queueableFns","wrapChildren","userContext","sharedUserContext","hasNoEnabledTest","every","disabled","markedPending","Error","map","child","beforeAllFns","concat","afterAllFns","treeHandler"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA;AALI,MAMFL,OANJ;;AAQA,WAASM,SAAT,CAAmBC,IAAnB,EAAyBC,aAAzB,EAAwC;AACtC,WAAOA,aAAa,IAAIJ,WAAW,CAACK,OAAZ,CAAoBF,IAAI,CAACG,EAAzB,MAAiC,CAAC,CAA1D;AACD;;AAED,WAASC,cAAT,CAAwBJ,IAAxB,EAA8BC,aAA9B,EAA6C;AAC3C,UAAMI,OAAO,GAAGN,SAAS,CAACC,IAAD,EAAOC,aAAP,CAAzB;AACA,WAAOD,IAAI,CAACM,QAAL,GACHC,0BAA0B,CAACP,IAAD,EAAOK,OAAP,CADvB,GAEHG,6BAA6B,CAACR,IAAD,EAAOK,OAAP,CAFjC;AAGD;;AAED,WAASG,6BAAT,CAAuCR,IAAvC,EAA6CK,OAA7C,EAAsD;AACpD,WAAO,SAASI,EAAT,CAAYC,IAAI,GAAG,MAAM,CAAE,CAA3B,EAA6B;AAClCV,MAAAA,IAAI,CAACW,OAAL,CAAaD,IAAb,EAAmBL,OAAnB;AACD,KAFD;AAGD;;AAED,WAASE,0BAAT,CAAoCP,IAApC,EAA0CK,OAA1C,EAAmD;AACjD,WAAO,eAAeI,EAAf,CAAkBC,IAAI,GAAG,MAAM,CAAE,CAAjC,EAAmC;AACxCf,MAAAA,SAAS,CAACK,IAAD,CAAT;AACA,YAAMJ,kBAAkB,CAAC;AACvBgB,QAAAA,WAAW,EAAEC,KAAK,IAAIb,IAAI,CAACY,WAAL,CAAiBC,KAAjB,CADC;AAEvBC,QAAAA,YAAY,EAAEC,YAAY,CAACf,IAAD,EAAOK,OAAP,CAFH;AAGvBW,QAAAA,WAAW,EAAEhB,IAAI,CAACiB,iBAAL;AAHU,OAAD,CAAxB;AAKAvB,MAAAA,YAAY,CAACM,IAAD,CAAZ;AACAU,MAAAA,IAAI;AACL,KATD;AAUD;;AAED,WAASQ,gBAAT,CAA0BlB,IAA1B,EAAgC;AAC9B,QAAIA,IAAI,CAACM,QAAT,EAAmB;AACjB,aAAON,IAAI,CAACM,QAAL,CAAca,KAAd,CAAoBD,gBAApB,CAAP;AACD;;AAED,WAAOlB,IAAI,CAACoB,QAAL,IAAiBpB,IAAI,CAACqB,aAA7B;AACD;;AAED,WAASN,YAAT,CAAsBf,IAAtB,EAA4BK,OAA5B,EAAqC;AACnC,QAAI,CAACL,IAAI,CAACM,QAAV,EAAoB;AAClB,YAAM,IAAIgB,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,UAAMhB,QAAQ,GAAGN,IAAI,CAACM,QAAL,CAAciB,GAAd,CAAkBC,KAAK,KAAK;AAC3Cf,MAAAA,EAAE,EAAEL,cAAc,CAACoB,KAAD,EAAQnB,OAAR;AADyB,KAAL,CAAvB,CAAjB;;AAIA,QAAIa,gBAAgB,CAAClB,IAAD,CAApB,EAA4B;AAC1B,aAAOM,QAAP;AACD;;AAED,WAAON,IAAI,CAACyB,YAAL,CAAkBC,MAAlB,CAAyBpB,QAAzB,EAAmCoB,MAAnC,CAA0C1B,IAAI,CAAC2B,WAA/C,CAAP;AACD;;AAED,QAAMC,WAAW,GAAGxB,cAAc,CAACN,IAAD,EAAO,KAAP,CAAlC;AACA,SAAO8B,WAAW,EAAlB;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = treeProcessor;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction treeProcessor(options) {\n  const {\n    nodeComplete,\n    nodeStart,\n    queueRunnerFactory,\n    runnableIds,\n    tree\n  } = options;\n\n  function isEnabled(node, parentEnabled) {\n    return parentEnabled || runnableIds.indexOf(node.id) !== -1;\n  }\n\n  function getNodeHandler(node, parentEnabled) {\n    const enabled = isEnabled(node, parentEnabled);\n    return node.children\n      ? getNodeWithChildrenHandler(node, enabled)\n      : getNodeWithoutChildrenHandler(node, enabled);\n  }\n\n  function getNodeWithoutChildrenHandler(node, enabled) {\n    return function fn(done = () => {}) {\n      node.execute(done, enabled);\n    };\n  }\n\n  function getNodeWithChildrenHandler(node, enabled) {\n    return async function fn(done = () => {}) {\n      nodeStart(node);\n      await queueRunnerFactory({\n        onException: error => node.onException(error),\n        queueableFns: wrapChildren(node, enabled),\n        userContext: node.sharedUserContext()\n      });\n      nodeComplete(node);\n      done();\n    };\n  }\n\n  function hasNoEnabledTest(node) {\n    if (node.children) {\n      return node.children.every(hasNoEnabledTest);\n    }\n\n    return node.disabled || node.markedPending;\n  }\n\n  function wrapChildren(node, enabled) {\n    if (!node.children) {\n      throw new Error('`node.children` is not defined.');\n    }\n\n    const children = node.children.map(child => ({\n      fn: getNodeHandler(child, enabled)\n    }));\n\n    if (hasNoEnabledTest(node)) {\n      return children;\n    }\n\n    return node.beforeAllFns.concat(children).concat(node.afterAllFns);\n  }\n\n  const treeHandler = getNodeHandler(tree, false);\n  return treeHandler();\n}\n"]},"metadata":{},"sourceType":"script"}