{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = readInitialCoverage;\n\nvar _core = require(\"@babel/core\");\n\nvar _schema = require(\"@istanbuljs/schema\");\n\nvar _constants = require(\"./constants\");\n\nfunction getAst(code) {\n  if (typeof code === 'object' && typeof code.type === 'string') {\n    // Assume code is already a babel ast.\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new Error('Code must be a string');\n  } // Parse as leniently as possible\n\n\n  return (0, _core.parseSync)(code, {\n    babelrc: false,\n    configFile: false,\n    parserOpts: {\n      allowImportExportEverywhere: true,\n      allowReturnOutsideFunction: true,\n      allowSuperOutsideMethod: true,\n      sourceType: 'script',\n      plugins: _schema.defaults.instrumenter.parserPlugins\n    }\n  });\n}\n\nfunction readInitialCoverage(code) {\n  const ast = getAst(code);\n  let covScope;\n  (0, _core.traverse)(ast, {\n    ObjectProperty(path) {\n      const {\n        node\n      } = path;\n\n      if (!node.computed && path.get('key').isIdentifier() && node.key.name === _constants.MAGIC_KEY) {\n        const magicValue = path.get('value').evaluate();\n\n        if (!magicValue.confident || magicValue.value !== _constants.MAGIC_VALUE) {\n          return;\n        }\n\n        covScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        path.stop();\n      }\n    }\n\n  });\n\n  if (!covScope) {\n    return null;\n  }\n\n  const result = {};\n\n  for (const key of ['path', 'hash', 'gcv', 'coverageData']) {\n    const binding = covScope.getOwnBinding(key);\n\n    if (!binding) {\n      return null;\n    }\n\n    const valuePath = binding.path.get('init');\n    const value = valuePath.evaluate();\n\n    if (!value.confident) {\n      return null;\n    }\n\n    result[key] = value.value;\n  }\n\n  delete result.coverageData[_constants.MAGIC_KEY];\n  delete result.coverageData.hash;\n  return result;\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/istanbul-lib-instrument/dist/read-coverage.js"],"names":["Object","defineProperty","exports","value","default","readInitialCoverage","_core","require","_schema","_constants","getAst","code","type","Error","parseSync","babelrc","configFile","parserOpts","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","sourceType","plugins","defaults","instrumenter","parserPlugins","ast","covScope","traverse","ObjectProperty","path","node","computed","get","isIdentifier","key","name","MAGIC_KEY","magicValue","evaluate","confident","MAGIC_VALUE","scope","getFunctionParent","getProgramParent","stop","result","binding","getOwnBinding","valuePath","coverageData","hash"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = readInitialCoverage;\n\nvar _core = require(\"@babel/core\");\n\nvar _schema = require(\"@istanbuljs/schema\");\n\nvar _constants = require(\"./constants\");\n\nfunction getAst(code) {\n  if (typeof code === 'object' && typeof code.type === 'string') {\n    // Assume code is already a babel ast.\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new Error('Code must be a string');\n  } // Parse as leniently as possible\n\n\n  return (0, _core.parseSync)(code, {\n    babelrc: false,\n    configFile: false,\n    parserOpts: {\n      allowImportExportEverywhere: true,\n      allowReturnOutsideFunction: true,\n      allowSuperOutsideMethod: true,\n      sourceType: 'script',\n      plugins: _schema.defaults.instrumenter.parserPlugins\n    }\n  });\n}\n\nfunction readInitialCoverage(code) {\n  const ast = getAst(code);\n  let covScope;\n  (0, _core.traverse)(ast, {\n    ObjectProperty(path) {\n      const {\n        node\n      } = path;\n\n      if (!node.computed && path.get('key').isIdentifier() && node.key.name === _constants.MAGIC_KEY) {\n        const magicValue = path.get('value').evaluate();\n\n        if (!magicValue.confident || magicValue.value !== _constants.MAGIC_VALUE) {\n          return;\n        }\n\n        covScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        path.stop();\n      }\n    }\n\n  });\n\n  if (!covScope) {\n    return null;\n  }\n\n  const result = {};\n\n  for (const key of ['path', 'hash', 'gcv', 'coverageData']) {\n    const binding = covScope.getOwnBinding(key);\n\n    if (!binding) {\n      return null;\n    }\n\n    const valuePath = binding.path.get('init');\n    const value = valuePath.evaluate();\n\n    if (!value.confident) {\n      return null;\n    }\n\n    result[key] = value.value;\n  }\n\n  delete result.coverageData[_constants.MAGIC_KEY];\n  delete result.coverageData.hash;\n  return result;\n}"]},"metadata":{},"sourceType":"script"}