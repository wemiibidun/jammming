{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\n\nvar t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(t.returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(t.expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = t.blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  specCompliant = false,\n  noNewArrows = !specCompliant\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  this.ensureBlock();\n  this.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      this.parentPath.scope.push({\n        id: checkBinding,\n        init: t.objectExpression([])\n      });\n    }\n\n    this.get(\"body\").unshiftContainer(\"body\", t.expressionStatement(t.callExpression(this.hub.addHelper(\"newArrowCheck\"), [t.thisExpression(), checkBinding ? t.identifier(checkBinding.name) : t.identifier(thisBinding)])));\n    this.replaceWith(t.callExpression(t.memberExpression((0, _helperFunctionName.default)(this, true) || this.node, t.identifier(\"bind\")), [checkBinding ? t.identifier(checkBinding.name) : t.thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {\n  const thisEnvFn = fnPath.findParent(p => {\n    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({\n      static: false\n    });\n  });\n  const inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === \"constructor\";\n\n  if (thisEnvFn.isClassProperty()) {\n    throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = t.identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => t.identifier(\"arguments\"));\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = t.identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => t.metaProperty(t.identifier(\"new\"), t.identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = t.identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = t.callExpression(t.identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", t.thisExpression());\n        superProp.replaceWith(t.memberExpression(call, t.identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? t.jsxIdentifier(thisBinding) : t.identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return thisBinding;\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, t.assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [t.assignmentExpression(\"=\", tmp, t.memberExpression(superProp.node.object, computedKey ? t.assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), t.assignmentExpression(\"=\", t.memberExpression(superProp.node.object, computedKey ? t.identifier(computedKey.name) : superProp.node.property, superProp.node.computed), t.binaryExpression(\"+\", t.identifier(tmp.name), t.numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(t.identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(t.sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return t.thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, t.assignmentExpression(\"=\", t.identifier(thisBinding), t.identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return t.arrowFunctionExpression([t.restElement(argsBinding)], t.callExpression(t.super(), [t.spreadElement(t.identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = t.memberExpression(t.super(), t.identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = t.memberExpression(t.super(), t.identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = t.assignmentExpression(\"=\", fnBody, t.identifier(valueIdent.name));\n    }\n\n    return t.arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@babel/traverse/lib/path/conversion.js"],"names":["Object","defineProperty","exports","value","toComputedKey","ensureBlock","arrowFunctionToShadowed","unwrapFunctionEnvironment","arrowFunctionToExpression","t","require","_helperFunctionName","key","isMemberExpression","node","property","isProperty","isMethod","ReferenceError","computed","isIdentifier","stringLiteral","name","body","get","bodyNode","Array","isArray","Error","isBlockStatement","statements","stringPath","listKey","isStatement","push","isFunction","returnStatement","expressionStatement","blockStatement","parentPath","setup","isArrowFunctionExpression","isFunctionExpression","isFunctionDeclaration","buildCodeFrameError","hoistFunctionEnvironment","allowInsertArrow","specCompliant","noNewArrows","thisBinding","type","checkBinding","scope","generateUidIdentifier","id","init","objectExpression","unshiftContainer","callExpression","hub","addHelper","thisExpression","identifier","replaceWith","memberExpression","default","fnPath","thisEnvFn","findParent","p","isProgram","isClassProperty","static","inConstructor","kind","thisPaths","argumentsPaths","newTargetPaths","superProps","superCalls","getScopeInformation","length","allSuperCalls","traverse","Function","child","skip","ClassProperty","CallExpression","isSuper","superBinding","getSuperBinding","forEach","superCall","callee","loc","argumentsBinding","getBinding","argumentsChild","argsRef","newTargetBinding","metaProperty","targetChild","targetRef","flatSuperProps","reduce","acc","superProp","concat","standardizeSuperProperty","isAssignment","isAssignmentExpression","left","isCall","isCallExpression","getSuperPropBinding","args","right","call","getThisBinding","hasSuperClass","thisChild","thisRef","isJSX","jsxIdentifier","operator","assignmentPath","op","slice","tmp","generateDeclaredUidIdentifier","object","assignmentExpression","binaryExpression","isUpdateExpression","updateExpr","computedKey","parts","numericLiteral","prefix","sequenceExpression","isClassMethod","superClass","supers","WeakSet","has","add","replaceWithMultiple","argsBinding","arrowFunctionExpression","restElement","super","spreadElement","propName","argsList","fnBody","method","unshift","valueIdent","cacheKey","data","getData","setData","ThisExpression","JSXIdentifier","isJSXMemberExpression","isJSXOpeningElement","MemberExpression","ReferencedIdentifier","MetaProperty"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\n\nvar t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(t.returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(t.expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = t.blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  specCompliant = false,\n  noNewArrows = !specCompliant\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  this.ensureBlock();\n  this.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      this.parentPath.scope.push({\n        id: checkBinding,\n        init: t.objectExpression([])\n      });\n    }\n\n    this.get(\"body\").unshiftContainer(\"body\", t.expressionStatement(t.callExpression(this.hub.addHelper(\"newArrowCheck\"), [t.thisExpression(), checkBinding ? t.identifier(checkBinding.name) : t.identifier(thisBinding)])));\n    this.replaceWith(t.callExpression(t.memberExpression((0, _helperFunctionName.default)(this, true) || this.node, t.identifier(\"bind\")), [checkBinding ? t.identifier(checkBinding.name) : t.thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {\n  const thisEnvFn = fnPath.findParent(p => {\n    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({\n      static: false\n    });\n  });\n  const inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === \"constructor\";\n\n  if (thisEnvFn.isClassProperty()) {\n    throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = t.identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => t.identifier(\"arguments\"));\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = t.identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => t.metaProperty(t.identifier(\"new\"), t.identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = t.identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = t.callExpression(t.identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", t.thisExpression());\n        superProp.replaceWith(t.memberExpression(call, t.identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? t.jsxIdentifier(thisBinding) : t.identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return thisBinding;\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, t.assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [t.assignmentExpression(\"=\", tmp, t.memberExpression(superProp.node.object, computedKey ? t.assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), t.assignmentExpression(\"=\", t.memberExpression(superProp.node.object, computedKey ? t.identifier(computedKey.name) : superProp.node.property, superProp.node.computed), t.binaryExpression(\"+\", t.identifier(tmp.name), t.numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(t.identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(t.sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return t.thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, t.assignmentExpression(\"=\", t.identifier(thisBinding), t.identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return t.arrowFunctionExpression([t.restElement(argsBinding)], t.callExpression(t.super(), [t.spreadElement(t.identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = t.memberExpression(t.super(), t.identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = t.memberExpression(t.super(), t.identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = t.assignmentExpression(\"=\", fnBody, t.identifier(valueIdent.name));\n    }\n\n    return t.arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}"]},"metadata":{},"sourceType":"script"}