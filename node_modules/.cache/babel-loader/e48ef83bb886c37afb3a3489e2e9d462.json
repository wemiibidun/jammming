{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar fs = _interopRequireWildcard(require('graceful-fs'));\n\nvar _jestMessageUtil = require('jest-message-util');\n\nvar _InlineSnapshots = require('./InlineSnapshots');\n\nvar _utils = require('./utils');\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar jestExistsFile = global[Symbol.for('jest-native-exists-file')] || fs.existsSync;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass SnapshotState {\n  // @ts-expect-error\n  constructor(snapshotPath, options) {\n    _defineProperty(this, '_counters', void 0);\n\n    _defineProperty(this, '_dirty', void 0);\n\n    _defineProperty(this, '_index', void 0);\n\n    _defineProperty(this, '_updateSnapshot', void 0);\n\n    _defineProperty(this, '_snapshotData', void 0);\n\n    _defineProperty(this, '_initialData', void 0);\n\n    _defineProperty(this, '_snapshotPath', void 0);\n\n    _defineProperty(this, '_inlineSnapshots', void 0);\n\n    _defineProperty(this, '_uncheckedKeys', void 0);\n\n    _defineProperty(this, '_getBabelTraverse', void 0);\n\n    _defineProperty(this, '_getPrettier', void 0);\n\n    _defineProperty(this, 'added', void 0);\n\n    _defineProperty(this, 'expand', void 0);\n\n    _defineProperty(this, 'matched', void 0);\n\n    _defineProperty(this, 'unmatched', void 0);\n\n    _defineProperty(this, 'updated', void 0);\n\n    this._snapshotPath = snapshotPath;\n    const {\n      data,\n      dirty\n    } = (0, _utils.getSnapshotData)(this._snapshotPath, options.updateSnapshot);\n    this._initialData = data;\n    this._snapshotData = data;\n    this._dirty = dirty;\n    this._getBabelTraverse = options.getBabelTraverse;\n    this._getPrettier = options.getPrettier;\n    this._inlineSnapshots = [];\n    this._uncheckedKeys = new Set(Object.keys(this._snapshotData));\n    this._counters = new Map();\n    this._index = 0;\n    this.expand = options.expand || false;\n    this.added = 0;\n    this.matched = 0;\n    this.unmatched = 0;\n    this._updateSnapshot = options.updateSnapshot;\n    this.updated = 0;\n  }\n\n  markSnapshotsAsCheckedForTest(testName) {\n    this._uncheckedKeys.forEach(uncheckedKey => {\n      if ((0, _utils.keyToTestName)(uncheckedKey) === testName) {\n        this._uncheckedKeys.delete(uncheckedKey);\n      }\n    });\n  }\n\n  _addSnapshot(key, receivedSerialized, options) {\n    this._dirty = true;\n\n    if (options.isInline) {\n      const error = options.error || new Error();\n      const lines = (0, _jestMessageUtil.getStackTraceLines)((0, _utils.removeLinesBeforeExternalMatcherTrap)(error.stack || ''));\n      const frame = (0, _jestMessageUtil.getTopFrame)(lines);\n\n      if (!frame) {\n        throw new Error(\"Jest: Couldn't infer stack frame for inline snapshot.\");\n      }\n\n      this._inlineSnapshots.push({\n        frame,\n        snapshot: receivedSerialized\n      });\n    } else {\n      this._snapshotData[key] = receivedSerialized;\n    }\n  }\n\n  clear() {\n    this._snapshotData = this._initialData;\n    this._inlineSnapshots = [];\n    this._counters = new Map();\n    this._index = 0;\n    this.added = 0;\n    this.matched = 0;\n    this.unmatched = 0;\n    this.updated = 0;\n  }\n\n  save() {\n    const hasExternalSnapshots = Object.keys(this._snapshotData).length;\n    const hasInlineSnapshots = this._inlineSnapshots.length;\n    const isEmpty = !hasExternalSnapshots && !hasInlineSnapshots;\n    const status = {\n      deleted: false,\n      saved: false\n    };\n\n    if ((this._dirty || this._uncheckedKeys.size) && !isEmpty) {\n      if (hasExternalSnapshots) {\n        (0, _utils.saveSnapshotFile)(this._snapshotData, this._snapshotPath);\n      }\n\n      if (hasInlineSnapshots) {\n        const prettier = this._getPrettier(); // Load lazily\n\n\n        const babelTraverse = this._getBabelTraverse(); // Load lazily\n\n\n        (0, _InlineSnapshots.saveInlineSnapshots)(this._inlineSnapshots, prettier, babelTraverse);\n      }\n\n      status.saved = true;\n    } else if (!hasExternalSnapshots && jestExistsFile(this._snapshotPath)) {\n      if (this._updateSnapshot === 'all') {\n        fs.unlinkSync(this._snapshotPath);\n      }\n\n      status.deleted = true;\n    }\n\n    return status;\n  }\n\n  getUncheckedCount() {\n    return this._uncheckedKeys.size || 0;\n  }\n\n  getUncheckedKeys() {\n    return Array.from(this._uncheckedKeys);\n  }\n\n  removeUncheckedKeys() {\n    if (this._updateSnapshot === 'all' && this._uncheckedKeys.size) {\n      this._dirty = true;\n\n      this._uncheckedKeys.forEach(key => delete this._snapshotData[key]);\n\n      this._uncheckedKeys.clear();\n    }\n  }\n\n  match({\n    testName,\n    received,\n    key,\n    inlineSnapshot,\n    isInline,\n    error\n  }) {\n    this._counters.set(testName, (this._counters.get(testName) || 0) + 1);\n\n    const count = Number(this._counters.get(testName));\n\n    if (!key) {\n      key = (0, _utils.testNameToKey)(testName, count);\n    } // Do not mark the snapshot as \"checked\" if the snapshot is inline and\n    // there's an external snapshot. This way the external snapshot can be\n    // removed with `--updateSnapshot`.\n\n\n    if (!(isInline && this._snapshotData[key] !== undefined)) {\n      this._uncheckedKeys.delete(key);\n    }\n\n    const receivedSerialized = (0, _utils.addExtraLineBreaks)((0, _utils.serialize)(received));\n    const expected = isInline ? inlineSnapshot : this._snapshotData[key];\n    const pass = expected === receivedSerialized;\n    const hasSnapshot = expected !== undefined;\n    const snapshotIsPersisted = isInline || fs.existsSync(this._snapshotPath);\n\n    if (pass && !isInline) {\n      // Executing a snapshot file as JavaScript and writing the strings back\n      // when other snapshots have changed loses the proper escaping for some\n      // characters. Since we check every snapshot in every test, use the newly\n      // generated formatted string.\n      // Note that this is only relevant when a snapshot is added and the dirty\n      // flag is set.\n      this._snapshotData[key] = receivedSerialized;\n    } // These are the conditions on when to write snapshots:\n    //  * There's no snapshot file in a non-CI environment.\n    //  * There is a snapshot file and we decided to update the snapshot.\n    //  * There is a snapshot file, but it doesn't have this snaphsot.\n    // These are the conditions on when not to write snapshots:\n    //  * The update flag is set to 'none'.\n    //  * There's no snapshot file or a file without this snapshot on a CI environment.\n\n\n    if (hasSnapshot && this._updateSnapshot === 'all' || (!hasSnapshot || !snapshotIsPersisted) && (this._updateSnapshot === 'new' || this._updateSnapshot === 'all')) {\n      if (this._updateSnapshot === 'all') {\n        if (!pass) {\n          if (hasSnapshot) {\n            this.updated++;\n          } else {\n            this.added++;\n          }\n\n          this._addSnapshot(key, receivedSerialized, {\n            error,\n            isInline\n          });\n        } else {\n          this.matched++;\n        }\n      } else {\n        this._addSnapshot(key, receivedSerialized, {\n          error,\n          isInline\n        });\n\n        this.added++;\n      }\n\n      return {\n        actual: '',\n        count,\n        expected: '',\n        key,\n        pass: true\n      };\n    } else {\n      if (!pass) {\n        this.unmatched++;\n        return {\n          actual: (0, _utils.removeExtraLineBreaks)(receivedSerialized),\n          count,\n          expected: expected !== undefined ? (0, _utils.removeExtraLineBreaks)(expected) : undefined,\n          key,\n          pass: false\n        };\n      } else {\n        this.matched++;\n        return {\n          actual: '',\n          count,\n          expected: '',\n          key,\n          pass: true\n        };\n      }\n    }\n  }\n\n  fail(testName, _received, key) {\n    this._counters.set(testName, (this._counters.get(testName) || 0) + 1);\n\n    const count = Number(this._counters.get(testName));\n\n    if (!key) {\n      key = (0, _utils.testNameToKey)(testName, count);\n    }\n\n    this._uncheckedKeys.delete(key);\n\n    this.unmatched++;\n    return key;\n  }\n\n}\n\nexports.default = SnapshotState;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-snapshot/build/State.js"],"names":["Object","defineProperty","exports","value","default","fs","_interopRequireWildcard","require","_jestMessageUtil","_InlineSnapshots","_utils","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Symbol","global","jestExistsFile","for","existsSync","_defineProperty","enumerable","configurable","writable","SnapshotState","constructor","snapshotPath","options","_snapshotPath","data","dirty","getSnapshotData","updateSnapshot","_initialData","_snapshotData","_dirty","_getBabelTraverse","getBabelTraverse","_getPrettier","getPrettier","_inlineSnapshots","_uncheckedKeys","Set","keys","_counters","Map","_index","expand","added","matched","unmatched","_updateSnapshot","updated","markSnapshotsAsCheckedForTest","testName","forEach","uncheckedKey","keyToTestName","delete","_addSnapshot","receivedSerialized","isInline","error","Error","lines","getStackTraceLines","removeLinesBeforeExternalMatcherTrap","stack","frame","getTopFrame","push","snapshot","clear","save","hasExternalSnapshots","length","hasInlineSnapshots","isEmpty","status","deleted","saved","size","saveSnapshotFile","prettier","babelTraverse","saveInlineSnapshots","unlinkSync","getUncheckedCount","getUncheckedKeys","Array","from","removeUncheckedKeys","match","received","inlineSnapshot","count","Number","testNameToKey","undefined","addExtraLineBreaks","serialize","expected","pass","hasSnapshot","snapshotIsPersisted","actual","removeExtraLineBreaks","fail","_received"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar fs = _interopRequireWildcard(require('graceful-fs'));\n\nvar _jestMessageUtil = require('jest-message-util');\n\nvar _InlineSnapshots = require('./InlineSnapshots');\n\nvar _utils = require('./utils');\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar jestExistsFile =\n  global[Symbol.for('jest-native-exists-file')] || fs.existsSync;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass SnapshotState {\n  // @ts-expect-error\n  constructor(snapshotPath, options) {\n    _defineProperty(this, '_counters', void 0);\n\n    _defineProperty(this, '_dirty', void 0);\n\n    _defineProperty(this, '_index', void 0);\n\n    _defineProperty(this, '_updateSnapshot', void 0);\n\n    _defineProperty(this, '_snapshotData', void 0);\n\n    _defineProperty(this, '_initialData', void 0);\n\n    _defineProperty(this, '_snapshotPath', void 0);\n\n    _defineProperty(this, '_inlineSnapshots', void 0);\n\n    _defineProperty(this, '_uncheckedKeys', void 0);\n\n    _defineProperty(this, '_getBabelTraverse', void 0);\n\n    _defineProperty(this, '_getPrettier', void 0);\n\n    _defineProperty(this, 'added', void 0);\n\n    _defineProperty(this, 'expand', void 0);\n\n    _defineProperty(this, 'matched', void 0);\n\n    _defineProperty(this, 'unmatched', void 0);\n\n    _defineProperty(this, 'updated', void 0);\n\n    this._snapshotPath = snapshotPath;\n    const {data, dirty} = (0, _utils.getSnapshotData)(\n      this._snapshotPath,\n      options.updateSnapshot\n    );\n    this._initialData = data;\n    this._snapshotData = data;\n    this._dirty = dirty;\n    this._getBabelTraverse = options.getBabelTraverse;\n    this._getPrettier = options.getPrettier;\n    this._inlineSnapshots = [];\n    this._uncheckedKeys = new Set(Object.keys(this._snapshotData));\n    this._counters = new Map();\n    this._index = 0;\n    this.expand = options.expand || false;\n    this.added = 0;\n    this.matched = 0;\n    this.unmatched = 0;\n    this._updateSnapshot = options.updateSnapshot;\n    this.updated = 0;\n  }\n\n  markSnapshotsAsCheckedForTest(testName) {\n    this._uncheckedKeys.forEach(uncheckedKey => {\n      if ((0, _utils.keyToTestName)(uncheckedKey) === testName) {\n        this._uncheckedKeys.delete(uncheckedKey);\n      }\n    });\n  }\n\n  _addSnapshot(key, receivedSerialized, options) {\n    this._dirty = true;\n\n    if (options.isInline) {\n      const error = options.error || new Error();\n      const lines = (0, _jestMessageUtil.getStackTraceLines)(\n        (0, _utils.removeLinesBeforeExternalMatcherTrap)(error.stack || '')\n      );\n      const frame = (0, _jestMessageUtil.getTopFrame)(lines);\n\n      if (!frame) {\n        throw new Error(\n          \"Jest: Couldn't infer stack frame for inline snapshot.\"\n        );\n      }\n\n      this._inlineSnapshots.push({\n        frame,\n        snapshot: receivedSerialized\n      });\n    } else {\n      this._snapshotData[key] = receivedSerialized;\n    }\n  }\n\n  clear() {\n    this._snapshotData = this._initialData;\n    this._inlineSnapshots = [];\n    this._counters = new Map();\n    this._index = 0;\n    this.added = 0;\n    this.matched = 0;\n    this.unmatched = 0;\n    this.updated = 0;\n  }\n\n  save() {\n    const hasExternalSnapshots = Object.keys(this._snapshotData).length;\n    const hasInlineSnapshots = this._inlineSnapshots.length;\n    const isEmpty = !hasExternalSnapshots && !hasInlineSnapshots;\n    const status = {\n      deleted: false,\n      saved: false\n    };\n\n    if ((this._dirty || this._uncheckedKeys.size) && !isEmpty) {\n      if (hasExternalSnapshots) {\n        (0, _utils.saveSnapshotFile)(this._snapshotData, this._snapshotPath);\n      }\n\n      if (hasInlineSnapshots) {\n        const prettier = this._getPrettier(); // Load lazily\n\n        const babelTraverse = this._getBabelTraverse(); // Load lazily\n\n        (0, _InlineSnapshots.saveInlineSnapshots)(\n          this._inlineSnapshots,\n          prettier,\n          babelTraverse\n        );\n      }\n\n      status.saved = true;\n    } else if (!hasExternalSnapshots && jestExistsFile(this._snapshotPath)) {\n      if (this._updateSnapshot === 'all') {\n        fs.unlinkSync(this._snapshotPath);\n      }\n\n      status.deleted = true;\n    }\n\n    return status;\n  }\n\n  getUncheckedCount() {\n    return this._uncheckedKeys.size || 0;\n  }\n\n  getUncheckedKeys() {\n    return Array.from(this._uncheckedKeys);\n  }\n\n  removeUncheckedKeys() {\n    if (this._updateSnapshot === 'all' && this._uncheckedKeys.size) {\n      this._dirty = true;\n\n      this._uncheckedKeys.forEach(key => delete this._snapshotData[key]);\n\n      this._uncheckedKeys.clear();\n    }\n  }\n\n  match({testName, received, key, inlineSnapshot, isInline, error}) {\n    this._counters.set(testName, (this._counters.get(testName) || 0) + 1);\n\n    const count = Number(this._counters.get(testName));\n\n    if (!key) {\n      key = (0, _utils.testNameToKey)(testName, count);\n    } // Do not mark the snapshot as \"checked\" if the snapshot is inline and\n    // there's an external snapshot. This way the external snapshot can be\n    // removed with `--updateSnapshot`.\n\n    if (!(isInline && this._snapshotData[key] !== undefined)) {\n      this._uncheckedKeys.delete(key);\n    }\n\n    const receivedSerialized = (0, _utils.addExtraLineBreaks)(\n      (0, _utils.serialize)(received)\n    );\n    const expected = isInline ? inlineSnapshot : this._snapshotData[key];\n    const pass = expected === receivedSerialized;\n    const hasSnapshot = expected !== undefined;\n    const snapshotIsPersisted = isInline || fs.existsSync(this._snapshotPath);\n\n    if (pass && !isInline) {\n      // Executing a snapshot file as JavaScript and writing the strings back\n      // when other snapshots have changed loses the proper escaping for some\n      // characters. Since we check every snapshot in every test, use the newly\n      // generated formatted string.\n      // Note that this is only relevant when a snapshot is added and the dirty\n      // flag is set.\n      this._snapshotData[key] = receivedSerialized;\n    } // These are the conditions on when to write snapshots:\n    //  * There's no snapshot file in a non-CI environment.\n    //  * There is a snapshot file and we decided to update the snapshot.\n    //  * There is a snapshot file, but it doesn't have this snaphsot.\n    // These are the conditions on when not to write snapshots:\n    //  * The update flag is set to 'none'.\n    //  * There's no snapshot file or a file without this snapshot on a CI environment.\n\n    if (\n      (hasSnapshot && this._updateSnapshot === 'all') ||\n      ((!hasSnapshot || !snapshotIsPersisted) &&\n        (this._updateSnapshot === 'new' || this._updateSnapshot === 'all'))\n    ) {\n      if (this._updateSnapshot === 'all') {\n        if (!pass) {\n          if (hasSnapshot) {\n            this.updated++;\n          } else {\n            this.added++;\n          }\n\n          this._addSnapshot(key, receivedSerialized, {\n            error,\n            isInline\n          });\n        } else {\n          this.matched++;\n        }\n      } else {\n        this._addSnapshot(key, receivedSerialized, {\n          error,\n          isInline\n        });\n\n        this.added++;\n      }\n\n      return {\n        actual: '',\n        count,\n        expected: '',\n        key,\n        pass: true\n      };\n    } else {\n      if (!pass) {\n        this.unmatched++;\n        return {\n          actual: (0, _utils.removeExtraLineBreaks)(receivedSerialized),\n          count,\n          expected:\n            expected !== undefined\n              ? (0, _utils.removeExtraLineBreaks)(expected)\n              : undefined,\n          key,\n          pass: false\n        };\n      } else {\n        this.matched++;\n        return {\n          actual: '',\n          count,\n          expected: '',\n          key,\n          pass: true\n        };\n      }\n    }\n  }\n\n  fail(testName, _received, key) {\n    this._counters.set(testName, (this._counters.get(testName) || 0) + 1);\n\n    const count = Number(this._counters.get(testName));\n\n    if (!key) {\n      key = (0, _utils.testNameToKey)(testName, count);\n    }\n\n    this._uncheckedKeys.delete(key);\n\n    this.unmatched++;\n    return key;\n  }\n}\n\nexports.default = SnapshotState;\n"]},"metadata":{},"sourceType":"script"}