{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = normalize;\n\nfunction _crypto() {\n  const data = require('crypto');\n\n  _crypto = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _deepmerge() {\n  const data = _interopRequireDefault(require('deepmerge'));\n\n  _deepmerge = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  const data = require('glob');\n\n  _glob = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gracefulFs() {\n  const data = require('graceful-fs');\n\n  _gracefulFs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRegexUtil() {\n  const data = require('jest-regex-util');\n\n  _jestRegexUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _ReporterValidationErrors = require('./ReporterValidationErrors');\n\nvar _ValidConfig = _interopRequireDefault(require('./ValidConfig'));\n\nvar _color = require('./color');\n\nvar _constants = require('./constants');\n\nvar _getMaxWorkers = _interopRequireDefault(require('./getMaxWorkers'));\n\nvar _setFromArgv = _interopRequireDefault(require('./setFromArgv'));\n\nvar _utils = require('./utils');\n\nvar _validatePattern = _interopRequireDefault(require('./validatePattern'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst ERROR = `${_utils.BULLET}Validation Error`;\nconst PRESET_EXTENSIONS = ['.json', '.js'];\nconst PRESET_NAME = 'jest-preset';\n\nconst createConfigError = message => new (_jestValidate().ValidationError)(ERROR, message, _utils.DOCUMENTATION_NOTE);\n\nfunction verifyDirectoryExists(path, key) {\n  try {\n    const rootStat = (0, _gracefulFs().statSync)(path);\n\n    if (!rootStat.isDirectory()) {\n      throw createConfigError(`  ${_chalk().default.bold(path)} in the ${_chalk().default.bold(key)} option is not a directory.`);\n    }\n  } catch (err) {\n    if (err instanceof _jestValidate().ValidationError) {\n      throw err;\n    }\n\n    if (err.code === 'ENOENT') {\n      throw createConfigError(`  Directory ${_chalk().default.bold(path)} in the ${_chalk().default.bold(key)} option was not found.`);\n    } // Not sure in which cases `statSync` can throw, so let's just show the underlying error to the user\n\n\n    throw createConfigError(`  Got an error trying to find ${_chalk().default.bold(path)} in the ${_chalk().default.bold(key)} option.\\n\\n  Error was: ${err.message}`);\n  }\n} // TS 3.5 forces us to split these into 2\n\n\nconst mergeModuleNameMapperWithPreset = (options, preset) => {\n  if (options['moduleNameMapper'] && preset['moduleNameMapper']) {\n    options['moduleNameMapper'] = { ...options['moduleNameMapper'],\n      ...preset['moduleNameMapper'],\n      ...options['moduleNameMapper']\n    };\n  }\n};\n\nconst mergeTransformWithPreset = (options, preset) => {\n  if (options['transform'] && preset['transform']) {\n    options['transform'] = { ...options['transform'],\n      ...preset['transform'],\n      ...options['transform']\n    };\n  }\n};\n\nconst mergeGlobalsWithPreset = (options, preset) => {\n  if (options['globals'] && preset['globals']) {\n    options['globals'] = (0, _deepmerge().default)(preset['globals'], options['globals']);\n  }\n};\n\nconst setupPreset = (options, optionsPreset) => {\n  let preset;\n  const presetPath = (0, _utils.replaceRootDirInPath)(options.rootDir, optionsPreset);\n\n  const presetModule = _jestResolve().default.findNodeModule(presetPath.startsWith('.') ? presetPath : path().join(presetPath, PRESET_NAME), {\n    basedir: options.rootDir,\n    extensions: PRESET_EXTENSIONS\n  });\n\n  try {\n    if (!presetModule) {\n      throw new Error(`Cannot find module '${presetPath}'`);\n    } // Force re-evaluation to support multiple projects\n\n\n    try {\n      delete require.cache[require.resolve(presetModule)];\n    } catch {}\n\n    preset = require(presetModule);\n  } catch (error) {\n    if (error instanceof SyntaxError || error instanceof TypeError) {\n      throw createConfigError(`  Preset ${_chalk().default.bold(presetPath)} is invalid:\\n\\n  ${error.message}\\n  ${error.stack}`);\n    }\n\n    if (error.message.includes('Cannot find module')) {\n      if (error.message.includes(presetPath)) {\n        const preset = _jestResolve().default.findNodeModule(presetPath, {\n          basedir: options.rootDir\n        });\n\n        if (preset) {\n          throw createConfigError(`  Module ${_chalk().default.bold(presetPath)} should have \"jest-preset.js\" or \"jest-preset.json\" file at the root.`);\n        }\n\n        throw createConfigError(`  Preset ${_chalk().default.bold(presetPath)} not found.`);\n      }\n\n      throw createConfigError(`  Missing dependency in ${_chalk().default.bold(presetPath)}:\\n\\n  ${error.message}\\n  ${error.stack}`);\n    }\n\n    throw createConfigError(`  An unknown error occurred in ${_chalk().default.bold(presetPath)}:\\n\\n  ${error.message}\\n  ${error.stack}`);\n  }\n\n  if (options.setupFiles) {\n    options.setupFiles = (preset.setupFiles || []).concat(options.setupFiles);\n  }\n\n  if (options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = (preset.setupFilesAfterEnv || []).concat(options.setupFilesAfterEnv);\n  }\n\n  if (options.modulePathIgnorePatterns && preset.modulePathIgnorePatterns) {\n    options.modulePathIgnorePatterns = preset.modulePathIgnorePatterns.concat(options.modulePathIgnorePatterns);\n  }\n\n  mergeModuleNameMapperWithPreset(options, preset);\n  mergeTransformWithPreset(options, preset);\n  mergeGlobalsWithPreset(options, preset);\n  return { ...preset,\n    ...options\n  };\n};\n\nconst setupBabelJest = options => {\n  const transform = options.transform;\n  let babelJest;\n\n  if (transform) {\n    const customJSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.js') || regex.test('a.jsx');\n    });\n    const customTSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.ts') || regex.test('a.tsx');\n    });\n    [customJSPattern, customTSPattern].forEach(pattern => {\n      if (pattern) {\n        const customTransformer = transform[pattern];\n\n        if (Array.isArray(customTransformer)) {\n          if (customTransformer[0] === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            customTransformer[0] = babelJest;\n          } else if (customTransformer[0].includes('babel-jest')) {\n            babelJest = customTransformer[0];\n          }\n        } else {\n          if (customTransformer === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            transform[pattern] = babelJest;\n          } else if (customTransformer.includes('babel-jest')) {\n            babelJest = customTransformer;\n          }\n        }\n      }\n    });\n  } else {\n    babelJest = require.resolve('babel-jest');\n    options.transform = {\n      [_constants.DEFAULT_JS_PATTERN]: babelJest\n    };\n  }\n};\n\nconst normalizeCollectCoverageOnlyFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  const collectCoverageOnlyFrom = Array.isArray(initialCollectCoverageFrom) ? initialCollectCoverageFrom // passed from argv\n  : Object.keys(initialCollectCoverageFrom); // passed from options\n\n  return collectCoverageOnlyFrom.reduce((map, filePath) => {\n    filePath = path().resolve(options.rootDir, (0, _utils.replaceRootDirInPath)(options.rootDir, filePath));\n    map[filePath] = true;\n    return map;\n  }, Object.create(null));\n};\n\nconst normalizeCollectCoverageFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  let value;\n\n  if (!initialCollectCoverageFrom) {\n    value = [];\n  }\n\n  if (!Array.isArray(initialCollectCoverageFrom)) {\n    try {\n      value = JSON.parse(initialCollectCoverageFrom);\n    } catch {}\n\n    if (options[key] && !Array.isArray(value)) {\n      value = [initialCollectCoverageFrom];\n    }\n  } else {\n    value = initialCollectCoverageFrom;\n  }\n\n  if (value) {\n    value = value.map(filePath => filePath.replace(/^(!?)(<rootDir>\\/)(.*)/, '$1$3'));\n  }\n\n  return value;\n};\n\nconst normalizeUnmockedModulePathPatterns = (options, key // _replaceRootDirTags is specifically well-suited for substituting\n) => // <rootDir> in paths (it deals with properly interpreting relative path\n// separators, etc).\n//\n// For patterns, direct global substitution is far more ideal, so we\n// special case substitutions for patterns here.\noptions[key].map(pattern => (0, _jestRegexUtil().replacePathSepForRegex)(pattern.replace(/<rootDir>/g, options.rootDir)));\n\nconst normalizePreprocessor = options => {\n  if (options.scriptPreprocessor && options.transform) {\n    throw createConfigError(`  Options: ${_chalk().default.bold('scriptPreprocessor')} and ${_chalk().default.bold('transform')} cannot be used together.\n  Please change your configuration to only use ${_chalk().default.bold('transform')}.`);\n  }\n\n  if (options.preprocessorIgnorePatterns && options.transformIgnorePatterns) {\n    throw createConfigError(`  Options ${_chalk().default.bold('preprocessorIgnorePatterns')} and ${_chalk().default.bold('transformIgnorePatterns')} cannot be used together.\n  Please change your configuration to only use ${_chalk().default.bold('transformIgnorePatterns')}.`);\n  }\n\n  if (options.scriptPreprocessor) {\n    options.transform = {\n      '.*': options.scriptPreprocessor\n    };\n  }\n\n  if (options.preprocessorIgnorePatterns) {\n    options.transformIgnorePatterns = options.preprocessorIgnorePatterns;\n  }\n\n  delete options.scriptPreprocessor;\n  delete options.preprocessorIgnorePatterns;\n  return options;\n};\n\nconst normalizeMissingOptions = (options, configPath, projectIndex) => {\n  if (!options.name) {\n    options.name = (0, _crypto().createHash)('md5').update(options.rootDir) // In case we load config from some path that has the same root dir\n    .update(configPath || '').update(String(projectIndex)).digest('hex');\n  }\n\n  if (!options.setupFiles) {\n    options.setupFiles = [];\n  }\n\n  return options;\n};\n\nconst normalizeRootDir = options => {\n  // Assert that there *is* a rootDir\n  if (!options.rootDir) {\n    throw createConfigError(`  Configuration option ${_chalk().default.bold('rootDir')} must be specified.`);\n  }\n\n  options.rootDir = path().normalize(options.rootDir);\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    options.rootDir = (0, _jestUtil().tryRealpath)(options.rootDir);\n  } catch {// ignored\n  }\n\n  verifyDirectoryExists(options.rootDir, 'rootDir');\n  return { ...options,\n    rootDir: options.rootDir\n  };\n};\n\nconst normalizeReporters = options => {\n  const reporters = options.reporters;\n\n  if (!reporters || !Array.isArray(reporters)) {\n    return options;\n  }\n\n  (0, _ReporterValidationErrors.validateReporters)(reporters);\n  options.reporters = reporters.map(reporterConfig => {\n    const normalizedReporterConfig = typeof reporterConfig === 'string' // if reporter config is a string, we wrap it in an array\n    ? // and pass an empty object for options argument, to normalize\n    // the shape.\n    [reporterConfig, {}] : reporterConfig;\n    const reporterPath = (0, _utils.replaceRootDirInPath)(options.rootDir, normalizedReporterConfig[0]);\n\n    if (reporterPath !== _constants.DEFAULT_REPORTER_LABEL) {\n      const reporter = _jestResolve().default.findNodeModule(reporterPath, {\n        basedir: options.rootDir\n      });\n\n      if (!reporter) {\n        throw new (_jestResolve().default.ModuleNotFoundError)(`Could not resolve a module for a custom reporter.\\n` + `  Module name: ${reporterPath}`);\n      }\n\n      normalizedReporterConfig[0] = reporter;\n    }\n\n    return normalizedReporterConfig;\n  });\n  return options;\n};\n\nconst buildTestPathPattern = argv => {\n  const patterns = [];\n\n  if (argv._) {\n    patterns.push(...argv._);\n  }\n\n  if (argv.testPathPattern) {\n    patterns.push(...argv.testPathPattern);\n  }\n\n  const replacePosixSep = pattern => {\n    // yargs coerces positional args into numbers\n    const patternAsString = pattern.toString();\n\n    if (path().sep === '/') {\n      return patternAsString;\n    }\n\n    return patternAsString.replace(/\\//g, '\\\\\\\\');\n  };\n\n  const testPathPattern = patterns.map(replacePosixSep).join('|');\n\n  if ((0, _validatePattern.default)(testPathPattern)) {\n    return testPathPattern;\n  } else {\n    showTestPathPatternError(testPathPattern);\n    return '';\n  }\n};\n\nconst showTestPathPatternError = testPathPattern => {\n  (0, _jestUtil().clearLine)(process.stdout);\n  console.log(_chalk().default.red(`  Invalid testPattern ${testPathPattern} supplied. ` + `Running all tests instead.`));\n};\n\nfunction normalize(initialOptions, argv, configPath, projectIndex = Infinity) {\n  const {\n    hasDeprecationWarnings\n  } = (0, _jestValidate().validate)(initialOptions, {\n    comment: _utils.DOCUMENTATION_NOTE,\n    deprecatedConfig: _Deprecated.default,\n    exampleConfig: _ValidConfig.default,\n    recursiveBlacklist: ['collectCoverageOnlyFrom', // 'coverageThreshold' allows to use 'global' and glob strings on the same\n    // level, there's currently no way we can deal with such config\n    'coverageThreshold', 'globals', 'moduleNameMapper', 'testEnvironmentOptions', 'transform']\n  });\n  let options = normalizePreprocessor(normalizeReporters(normalizeMissingOptions(normalizeRootDir((0, _setFromArgv.default)(initialOptions, argv)), configPath, projectIndex)));\n\n  if (options.preset) {\n    options = setupPreset(options, options.preset);\n  }\n\n  if (!options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = [];\n  }\n\n  if (options.setupTestFrameworkScriptFile && options.setupFilesAfterEnv.length > 0) {\n    throw createConfigError(`  Options: ${_chalk().default.bold('setupTestFrameworkScriptFile')} and ${_chalk().default.bold('setupFilesAfterEnv')} cannot be used together.\n  Please change your configuration to only use ${_chalk().default.bold('setupFilesAfterEnv')}.`);\n  }\n\n  if (options.setupTestFrameworkScriptFile) {\n    options.setupFilesAfterEnv.push(options.setupTestFrameworkScriptFile);\n  }\n\n  options.testEnvironment = (0, _utils.getTestEnvironment)({\n    rootDir: options.rootDir,\n    testEnvironment: options.testEnvironment || _Defaults.default.testEnvironment\n  });\n\n  if (!options.roots && options.testPathDirs) {\n    options.roots = options.testPathDirs;\n    delete options.testPathDirs;\n  }\n\n  if (!options.roots) {\n    options.roots = [options.rootDir];\n  }\n\n  if (!options.testRunner || options.testRunner === 'jasmine2') {\n    options.testRunner = require.resolve('jest-jasmine2');\n  }\n\n  if (!options.coverageDirectory) {\n    options.coverageDirectory = path().resolve(options.rootDir, 'coverage');\n  }\n\n  setupBabelJest(options); // TODO: Type this properly\n\n  const newOptions = { ..._Defaults.default\n  };\n\n  if (options.resolver) {\n    newOptions.resolver = (0, _utils.resolve)(null, {\n      filePath: options.resolver,\n      key: 'resolver',\n      rootDir: options.rootDir\n    });\n  }\n\n  const optionKeys = Object.keys(options);\n  optionKeys.reduce((newOptions, key) => {\n    // The resolver has been resolved separately; skip it\n    if (key === 'resolver') {\n      return newOptions;\n    } // This is cheating, because it claims that all keys of InitialOptions are Required.\n    // We only really know it's Required for oldOptions[key], not for oldOptions.someOtherKey,\n    // so oldOptions[key] is the only way it should be used.\n\n\n    const oldOptions = options;\n    let value;\n\n    switch (key) {\n      case 'collectCoverageOnlyFrom':\n        value = normalizeCollectCoverageOnlyFrom(oldOptions, key);\n        break;\n\n      case 'setupFiles':\n      case 'setupFilesAfterEnv':\n      case 'snapshotSerializers':\n        {\n          const option = oldOptions[key];\n          value = option && option.map(filePath => (0, _utils.resolve)(newOptions.resolver, {\n            filePath,\n            key,\n            rootDir: options.rootDir\n          }));\n        }\n        break;\n\n      case 'modulePaths':\n      case 'roots':\n        {\n          const option = oldOptions[key];\n          value = option && option.map(filePath => path().resolve(options.rootDir, (0, _utils.replaceRootDirInPath)(options.rootDir, filePath)));\n        }\n        break;\n\n      case 'collectCoverageFrom':\n        value = normalizeCollectCoverageFrom(oldOptions, key);\n        break;\n\n      case 'cacheDirectory':\n      case 'coverageDirectory':\n        {\n          const option = oldOptions[key];\n          value = option && path().resolve(options.rootDir, (0, _utils.replaceRootDirInPath)(options.rootDir, option));\n        }\n        break;\n\n      case 'dependencyExtractor':\n      case 'globalSetup':\n      case 'globalTeardown':\n      case 'moduleLoader':\n      case 'snapshotResolver':\n      case 'testResultsProcessor':\n      case 'testRunner':\n      case 'filter':\n        {\n          const option = oldOptions[key];\n          value = option && (0, _utils.resolve)(newOptions.resolver, {\n            filePath: option,\n            key,\n            rootDir: options.rootDir\n          });\n        }\n        break;\n\n      case 'runner':\n        {\n          const option = oldOptions[key];\n          value = option && (0, _utils.getRunner)(newOptions.resolver, {\n            filePath: option,\n            rootDir: options.rootDir\n          });\n        }\n        break;\n\n      case 'prettierPath':\n        {\n          // We only want this to throw if \"prettierPath\" is explicitly passed\n          // from config or CLI, and the requested path isn't found. Otherwise we\n          // set it to null and throw an error lazily when it is used.\n          const option = oldOptions[key];\n          value = option && (0, _utils.resolve)(newOptions.resolver, {\n            filePath: option,\n            key,\n            optional: option === _Defaults.default[key],\n            rootDir: options.rootDir\n          });\n        }\n        break;\n\n      case 'moduleNameMapper':\n        const moduleNameMapper = oldOptions[key];\n        value = moduleNameMapper && Object.keys(moduleNameMapper).map(regex => {\n          const item = moduleNameMapper && moduleNameMapper[regex];\n          return item && [regex, (0, _utils._replaceRootDirTags)(options.rootDir, item)];\n        });\n        break;\n\n      case 'transform':\n        const transform = oldOptions[key];\n        value = transform && Object.keys(transform).map(regex => {\n          const transformElement = transform[regex];\n          return [regex, (0, _utils.resolve)(newOptions.resolver, {\n            filePath: Array.isArray(transformElement) ? transformElement[0] : transformElement,\n            key,\n            rootDir: options.rootDir\n          }), Array.isArray(transformElement) ? transformElement[1] : {}];\n        });\n        break;\n\n      case 'coveragePathIgnorePatterns':\n      case 'modulePathIgnorePatterns':\n      case 'testPathIgnorePatterns':\n      case 'transformIgnorePatterns':\n      case 'watchPathIgnorePatterns':\n      case 'unmockedModulePathPatterns':\n        value = normalizeUnmockedModulePathPatterns(oldOptions, key);\n        break;\n\n      case 'haste':\n        value = { ...oldOptions[key]\n        };\n\n        if (value.hasteImplModulePath != null) {\n          const resolvedHasteImpl = (0, _utils.resolve)(newOptions.resolver, {\n            filePath: (0, _utils.replaceRootDirInPath)(options.rootDir, value.hasteImplModulePath),\n            key: 'haste.hasteImplModulePath',\n            rootDir: options.rootDir\n          });\n          value.hasteImplModulePath = resolvedHasteImpl || undefined;\n        }\n\n        break;\n\n      case 'projects':\n        value = (oldOptions[key] || []).map(project => typeof project === 'string' ? (0, _utils._replaceRootDirTags)(options.rootDir, project) : project).reduce((projects, project) => {\n          // Project can be specified as globs. If a glob matches any files,\n          // We expand it to these paths. If not, we keep the original path\n          // for the future resolution.\n          const globMatches = typeof project === 'string' ? (0, _glob().sync)(project) : [];\n          return projects.concat(globMatches.length ? globMatches : project);\n        }, []);\n        break;\n\n      case 'moduleDirectories':\n      case 'testMatch':\n        {\n          const replacedRootDirTags = (0, _utils._replaceRootDirTags)((0, _utils.escapeGlobCharacters)(options.rootDir), oldOptions[key]);\n\n          if (replacedRootDirTags) {\n            value = Array.isArray(replacedRootDirTags) ? replacedRootDirTags.map(_jestUtil().replacePathSepForGlob) : (0, _jestUtil().replacePathSepForGlob)(replacedRootDirTags);\n          } else {\n            value = replacedRootDirTags;\n          }\n        }\n        break;\n\n      case 'testRegex':\n        {\n          const option = oldOptions[key];\n          value = option ? (Array.isArray(option) ? option : [option]).map(_jestRegexUtil().replacePathSepForRegex) : [];\n        }\n        break;\n\n      case 'moduleFileExtensions':\n        {\n          value = oldOptions[key];\n\n          if (Array.isArray(value) && ( // If it's the wrong type, it can throw at a later time\n          options.runner === undefined || options.runner === _Defaults.default.runner) && // Only require 'js' for the default jest-runner\n          !value.includes('js')) {\n            const errorMessage = `  moduleFileExtensions must include 'js':\\n` + `  but instead received:\\n` + `    ${_chalk().default.bold.red(JSON.stringify(value))}`; // If `js` is not included, any dependency Jest itself injects into\n            // the environment, like jasmine or sourcemap-support, will need to\n            // `require` its modules with a file extension. This is not plausible\n            // in the long run, so it's way easier to just fail hard early.\n            // We might consider throwing if `json` is missing as well, as it's a\n            // fair assumption from modules that they can do\n            // `require('some-package/package') without the trailing `.json` as it\n            // works in Node normally.\n\n            throw createConfigError(errorMessage + \"\\n  Please change your configuration to include 'js'.\");\n          }\n\n          break;\n        }\n\n      case 'bail':\n        {\n          const bail = oldOptions[key];\n\n          if (typeof bail === 'boolean') {\n            value = bail ? 1 : 0;\n          } else if (typeof bail === 'string') {\n            value = 1; // If Jest is invoked as `jest --bail someTestPattern` then need to\n            // move the pattern from the `bail` configuration and into `argv._`\n            // to be processed as an extra parameter\n\n            argv._.push(bail);\n          } else {\n            value = oldOptions[key];\n          }\n\n          break;\n        }\n\n      case 'displayName':\n        {\n          const displayName = oldOptions[key];\n          /**\n           * Ensuring that displayName shape is correct here so that the\n           * reporters can trust the shape of the data\n           */\n\n          if (typeof displayName === 'object') {\n            const {\n              name,\n              color\n            } = displayName;\n\n            if (!name || !color || typeof name !== 'string' || typeof color !== 'string') {\n              const errorMessage = `  Option \"${_chalk().default.bold('displayName')}\" must be of type:\\n\\n` + '  {\\n' + '    name: string;\\n' + '    color: string;\\n' + '  }\\n';\n              throw createConfigError(errorMessage);\n            }\n\n            value = oldOptions[key];\n          } else {\n            value = {\n              color: (0, _color.getDisplayNameColor)(options.runner),\n              name: displayName\n            };\n          }\n\n          break;\n        }\n\n      case 'testTimeout':\n        {\n          if (oldOptions[key] < 0) {\n            throw createConfigError(`  Option \"${_chalk().default.bold('testTimeout')}\" must be a natural number.`);\n          }\n\n          value = oldOptions[key];\n          break;\n        }\n\n      case 'automock':\n      case 'cache':\n      case 'changedSince':\n      case 'changedFilesWithAncestor':\n      case 'clearMocks':\n      case 'collectCoverage':\n      case 'coverageProvider':\n      case 'coverageReporters':\n      case 'coverageThreshold':\n      case 'detectLeaks':\n      case 'detectOpenHandles':\n      case 'errorOnDeprecated':\n      case 'expand':\n      case 'extraGlobals':\n      case 'globals':\n      case 'findRelatedTests':\n      case 'forceCoverageMatch':\n      case 'forceExit':\n      case 'injectGlobals':\n      case 'lastCommit':\n      case 'listTests':\n      case 'logHeapUsage':\n      case 'maxConcurrency':\n      case 'mapCoverage':\n      case 'name':\n      case 'noStackTrace':\n      case 'notify':\n      case 'notifyMode':\n      case 'onlyChanged':\n      case 'onlyFailures':\n      case 'outputFile':\n      case 'passWithNoTests':\n      case 'replname':\n      case 'reporters':\n      case 'resetMocks':\n      case 'resetModules':\n      case 'restoreMocks':\n      case 'rootDir':\n      case 'runTestsByPath':\n      case 'silent':\n      case 'skipFilter':\n      case 'skipNodeResolution':\n      case 'slowTestThreshold':\n      case 'testEnvironment':\n      case 'testEnvironmentOptions':\n      case 'testFailureExitCode':\n      case 'testLocationInResults':\n      case 'testNamePattern':\n      case 'testURL':\n      case 'timers':\n      case 'useStderr':\n      case 'verbose':\n      case 'watch':\n      case 'watchAll':\n      case 'watchman':\n        value = oldOptions[key];\n        break;\n\n      case 'watchPlugins':\n        value = (oldOptions[key] || []).map(watchPlugin => {\n          if (typeof watchPlugin === 'string') {\n            return {\n              config: {},\n              path: (0, _utils.getWatchPlugin)(newOptions.resolver, {\n                filePath: watchPlugin,\n                rootDir: options.rootDir\n              })\n            };\n          } else {\n            return {\n              config: watchPlugin[1] || {},\n              path: (0, _utils.getWatchPlugin)(newOptions.resolver, {\n                filePath: watchPlugin[0],\n                rootDir: options.rootDir\n              })\n            };\n          }\n        });\n        break;\n    } // @ts-expect-error: automock is missing in GlobalConfig, so what\n\n\n    newOptions[key] = value;\n    return newOptions;\n  }, newOptions);\n  newOptions.roots.forEach((root, i) => {\n    verifyDirectoryExists(root, `roots[${i}]`);\n  });\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    newOptions.cwd = (0, _jestUtil().tryRealpath)(process.cwd());\n  } catch {// ignored\n  }\n\n  newOptions.testSequencer = (0, _utils.getSequencer)(newOptions.resolver, {\n    filePath: options.testSequencer || _Defaults.default.testSequencer,\n    rootDir: options.rootDir\n  });\n  newOptions.nonFlagArgs = argv._;\n  newOptions.testPathPattern = buildTestPathPattern(argv);\n  newOptions.json = !!argv.json;\n  newOptions.testFailureExitCode = parseInt(newOptions.testFailureExitCode, 10);\n\n  if (newOptions.lastCommit || newOptions.changedFilesWithAncestor || newOptions.changedSince) {\n    newOptions.onlyChanged = true;\n  }\n\n  if (argv.all) {\n    newOptions.onlyChanged = false;\n    newOptions.onlyFailures = false;\n  } else if (newOptions.testPathPattern) {\n    // When passing a test path pattern we don't want to only monitor changed\n    // files unless `--watch` is also passed.\n    newOptions.onlyChanged = newOptions.watch;\n  }\n\n  if (!newOptions.onlyChanged) {\n    newOptions.onlyChanged = false;\n  }\n\n  if (!newOptions.lastCommit) {\n    newOptions.lastCommit = false;\n  }\n\n  if (!newOptions.onlyFailures) {\n    newOptions.onlyFailures = false;\n  }\n\n  if (!newOptions.watchAll) {\n    newOptions.watchAll = false;\n  } // as unknown since it can happen. We really need to fix the types here\n\n\n  if (newOptions.moduleNameMapper === _Defaults.default.moduleNameMapper) {\n    newOptions.moduleNameMapper = [];\n  }\n\n  newOptions.updateSnapshot = argv.ci && !argv.updateSnapshot ? 'none' : argv.updateSnapshot ? 'all' : 'new';\n  newOptions.maxConcurrency = parseInt(newOptions.maxConcurrency, 10);\n  newOptions.maxWorkers = (0, _getMaxWorkers.default)(argv, options);\n\n  if (newOptions.testRegex.length && options.testMatch) {\n    throw createConfigError(`  Configuration options ${_chalk().default.bold('testMatch')} and` + ` ${_chalk().default.bold('testRegex')} cannot be used together.`);\n  }\n\n  if (newOptions.testRegex.length && !options.testMatch) {\n    // Prevent the default testMatch conflicting with any explicitly\n    // configured `testRegex` value\n    newOptions.testMatch = [];\n  } // If argv.json is set, coverageReporters shouldn't print a text report.\n\n\n  if (argv.json) {\n    newOptions.coverageReporters = (newOptions.coverageReporters || []).filter(reporter => reporter !== 'text');\n  } // If collectCoverage is enabled while using --findRelatedTests we need to\n  // avoid having false negatives in the generated coverage report.\n  // The following: `--findRelatedTests '/rootDir/file1.js' --coverage`\n  // Is transformed to: `--findRelatedTests '/rootDir/file1.js' --coverage --collectCoverageFrom 'file1.js'`\n  // where arguments to `--collectCoverageFrom` should be globs (or relative\n  // paths to the rootDir)\n\n\n  if (newOptions.collectCoverage && argv.findRelatedTests) {\n    let collectCoverageFrom = argv._.map(filename => {\n      filename = (0, _utils.replaceRootDirInPath)(options.rootDir, filename);\n      return path().isAbsolute(filename) ? path().relative(options.rootDir, filename) : filename;\n    }); // Don't override existing collectCoverageFrom options\n\n\n    if (newOptions.collectCoverageFrom) {\n      collectCoverageFrom = collectCoverageFrom.reduce((patterns, filename) => {\n        if ((0, _micromatch().default)([(0, _jestUtil().replacePathSepForGlob)(path().relative(options.rootDir, filename))], newOptions.collectCoverageFrom).length === 0) {\n          return patterns;\n        }\n\n        return [...patterns, filename];\n      }, newOptions.collectCoverageFrom);\n    }\n\n    newOptions.collectCoverageFrom = collectCoverageFrom;\n  } else if (!newOptions.collectCoverageFrom) {\n    newOptions.collectCoverageFrom = [];\n  }\n\n  if (!newOptions.findRelatedTests) {\n    newOptions.findRelatedTests = false;\n  }\n\n  if (!newOptions.projects) {\n    newOptions.projects = [];\n  }\n\n  if (!newOptions.extraGlobals) {\n    newOptions.extraGlobals = [];\n  }\n\n  if (!newOptions.forceExit) {\n    newOptions.forceExit = false;\n  }\n\n  if (!newOptions.logHeapUsage) {\n    newOptions.logHeapUsage = false;\n  }\n\n  return {\n    hasDeprecationWarnings,\n    options: newOptions\n  };\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-config/build/normalize.js"],"names":["Object","defineProperty","exports","value","default","normalize","_crypto","data","require","path","_interopRequireWildcard","_chalk","_interopRequireDefault","_deepmerge","_glob","_gracefulFs","_micromatch","_jestRegexUtil","_jestResolve","_jestUtil","_jestValidate","_Defaults","_Deprecated","_ReporterValidationErrors","_ValidConfig","_color","_constants","_getMaxWorkers","_setFromArgv","_utils","_validatePattern","obj","__esModule","_getRequireWildcardCache","WeakMap","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ERROR","BULLET","PRESET_EXTENSIONS","PRESET_NAME","createConfigError","message","ValidationError","DOCUMENTATION_NOTE","verifyDirectoryExists","rootStat","statSync","isDirectory","bold","err","code","mergeModuleNameMapperWithPreset","options","preset","mergeTransformWithPreset","mergeGlobalsWithPreset","setupPreset","optionsPreset","presetPath","replaceRootDirInPath","rootDir","presetModule","findNodeModule","startsWith","join","basedir","extensions","Error","resolve","error","SyntaxError","TypeError","stack","includes","setupFiles","concat","setupFilesAfterEnv","modulePathIgnorePatterns","setupBabelJest","transform","babelJest","customJSPattern","keys","find","pattern","regex","RegExp","test","customTSPattern","forEach","customTransformer","Array","isArray","DEFAULT_JS_PATTERN","normalizeCollectCoverageOnlyFrom","initialCollectCoverageFrom","collectCoverageOnlyFrom","reduce","map","filePath","create","normalizeCollectCoverageFrom","JSON","parse","replace","normalizeUnmockedModulePathPatterns","replacePathSepForRegex","normalizePreprocessor","scriptPreprocessor","preprocessorIgnorePatterns","transformIgnorePatterns","normalizeMissingOptions","configPath","projectIndex","name","createHash","update","String","digest","normalizeRootDir","tryRealpath","normalizeReporters","reporters","validateReporters","reporterConfig","normalizedReporterConfig","reporterPath","DEFAULT_REPORTER_LABEL","reporter","ModuleNotFoundError","buildTestPathPattern","argv","patterns","_","push","testPathPattern","replacePosixSep","patternAsString","toString","sep","showTestPathPatternError","clearLine","process","stdout","console","log","red","initialOptions","Infinity","hasDeprecationWarnings","validate","comment","deprecatedConfig","exampleConfig","recursiveBlacklist","setupTestFrameworkScriptFile","length","testEnvironment","getTestEnvironment","roots","testPathDirs","testRunner","coverageDirectory","newOptions","resolver","optionKeys","oldOptions","option","getRunner","optional","moduleNameMapper","item","_replaceRootDirTags","transformElement","hasteImplModulePath","resolvedHasteImpl","undefined","project","projects","globMatches","sync","replacedRootDirTags","escapeGlobCharacters","replacePathSepForGlob","runner","errorMessage","stringify","bail","displayName","color","getDisplayNameColor","watchPlugin","config","getWatchPlugin","root","i","cwd","testSequencer","getSequencer","nonFlagArgs","json","testFailureExitCode","parseInt","lastCommit","changedFilesWithAncestor","changedSince","onlyChanged","all","onlyFailures","watch","watchAll","updateSnapshot","ci","maxConcurrency","maxWorkers","testRegex","testMatch","coverageReporters","filter","collectCoverage","findRelatedTests","collectCoverageFrom","filename","isAbsolute","relative","extraGlobals","forceExit","logHeapUsage"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = normalize;\n\nfunction _crypto() {\n  const data = require('crypto');\n\n  _crypto = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _deepmerge() {\n  const data = _interopRequireDefault(require('deepmerge'));\n\n  _deepmerge = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  const data = require('glob');\n\n  _glob = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gracefulFs() {\n  const data = require('graceful-fs');\n\n  _gracefulFs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _micromatch() {\n  const data = _interopRequireDefault(require('micromatch'));\n\n  _micromatch = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestRegexUtil() {\n  const data = require('jest-regex-util');\n\n  _jestRegexUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = _interopRequireDefault(require('jest-resolve'));\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestValidate() {\n  const data = require('jest-validate');\n\n  _jestValidate = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _ReporterValidationErrors = require('./ReporterValidationErrors');\n\nvar _ValidConfig = _interopRequireDefault(require('./ValidConfig'));\n\nvar _color = require('./color');\n\nvar _constants = require('./constants');\n\nvar _getMaxWorkers = _interopRequireDefault(require('./getMaxWorkers'));\n\nvar _setFromArgv = _interopRequireDefault(require('./setFromArgv'));\n\nvar _utils = require('./utils');\n\nvar _validatePattern = _interopRequireDefault(require('./validatePattern'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst ERROR = `${_utils.BULLET}Validation Error`;\nconst PRESET_EXTENSIONS = ['.json', '.js'];\nconst PRESET_NAME = 'jest-preset';\n\nconst createConfigError = message =>\n  new (_jestValidate().ValidationError)(\n    ERROR,\n    message,\n    _utils.DOCUMENTATION_NOTE\n  );\n\nfunction verifyDirectoryExists(path, key) {\n  try {\n    const rootStat = (0, _gracefulFs().statSync)(path);\n\n    if (!rootStat.isDirectory()) {\n      throw createConfigError(\n        `  ${_chalk().default.bold(path)} in the ${_chalk().default.bold(\n          key\n        )} option is not a directory.`\n      );\n    }\n  } catch (err) {\n    if (err instanceof _jestValidate().ValidationError) {\n      throw err;\n    }\n\n    if (err.code === 'ENOENT') {\n      throw createConfigError(\n        `  Directory ${_chalk().default.bold(\n          path\n        )} in the ${_chalk().default.bold(key)} option was not found.`\n      );\n    } // Not sure in which cases `statSync` can throw, so let's just show the underlying error to the user\n\n    throw createConfigError(\n      `  Got an error trying to find ${_chalk().default.bold(\n        path\n      )} in the ${_chalk().default.bold(key)} option.\\n\\n  Error was: ${\n        err.message\n      }`\n    );\n  }\n} // TS 3.5 forces us to split these into 2\n\nconst mergeModuleNameMapperWithPreset = (options, preset) => {\n  if (options['moduleNameMapper'] && preset['moduleNameMapper']) {\n    options['moduleNameMapper'] = {\n      ...options['moduleNameMapper'],\n      ...preset['moduleNameMapper'],\n      ...options['moduleNameMapper']\n    };\n  }\n};\n\nconst mergeTransformWithPreset = (options, preset) => {\n  if (options['transform'] && preset['transform']) {\n    options['transform'] = {\n      ...options['transform'],\n      ...preset['transform'],\n      ...options['transform']\n    };\n  }\n};\n\nconst mergeGlobalsWithPreset = (options, preset) => {\n  if (options['globals'] && preset['globals']) {\n    options['globals'] = (0, _deepmerge().default)(\n      preset['globals'],\n      options['globals']\n    );\n  }\n};\n\nconst setupPreset = (options, optionsPreset) => {\n  let preset;\n  const presetPath = (0, _utils.replaceRootDirInPath)(\n    options.rootDir,\n    optionsPreset\n  );\n\n  const presetModule = _jestResolve().default.findNodeModule(\n    presetPath.startsWith('.')\n      ? presetPath\n      : path().join(presetPath, PRESET_NAME),\n    {\n      basedir: options.rootDir,\n      extensions: PRESET_EXTENSIONS\n    }\n  );\n\n  try {\n    if (!presetModule) {\n      throw new Error(`Cannot find module '${presetPath}'`);\n    } // Force re-evaluation to support multiple projects\n\n    try {\n      delete require.cache[require.resolve(presetModule)];\n    } catch {}\n\n    preset = require(presetModule);\n  } catch (error) {\n    if (error instanceof SyntaxError || error instanceof TypeError) {\n      throw createConfigError(\n        `  Preset ${_chalk().default.bold(presetPath)} is invalid:\\n\\n  ${\n          error.message\n        }\\n  ${error.stack}`\n      );\n    }\n\n    if (error.message.includes('Cannot find module')) {\n      if (error.message.includes(presetPath)) {\n        const preset = _jestResolve().default.findNodeModule(presetPath, {\n          basedir: options.rootDir\n        });\n\n        if (preset) {\n          throw createConfigError(\n            `  Module ${_chalk().default.bold(\n              presetPath\n            )} should have \"jest-preset.js\" or \"jest-preset.json\" file at the root.`\n          );\n        }\n\n        throw createConfigError(\n          `  Preset ${_chalk().default.bold(presetPath)} not found.`\n        );\n      }\n\n      throw createConfigError(\n        `  Missing dependency in ${_chalk().default.bold(presetPath)}:\\n\\n  ${\n          error.message\n        }\\n  ${error.stack}`\n      );\n    }\n\n    throw createConfigError(\n      `  An unknown error occurred in ${_chalk().default.bold(\n        presetPath\n      )}:\\n\\n  ${error.message}\\n  ${error.stack}`\n    );\n  }\n\n  if (options.setupFiles) {\n    options.setupFiles = (preset.setupFiles || []).concat(options.setupFiles);\n  }\n\n  if (options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = (preset.setupFilesAfterEnv || []).concat(\n      options.setupFilesAfterEnv\n    );\n  }\n\n  if (options.modulePathIgnorePatterns && preset.modulePathIgnorePatterns) {\n    options.modulePathIgnorePatterns = preset.modulePathIgnorePatterns.concat(\n      options.modulePathIgnorePatterns\n    );\n  }\n\n  mergeModuleNameMapperWithPreset(options, preset);\n  mergeTransformWithPreset(options, preset);\n  mergeGlobalsWithPreset(options, preset);\n  return {...preset, ...options};\n};\n\nconst setupBabelJest = options => {\n  const transform = options.transform;\n  let babelJest;\n\n  if (transform) {\n    const customJSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.js') || regex.test('a.jsx');\n    });\n    const customTSPattern = Object.keys(transform).find(pattern => {\n      const regex = new RegExp(pattern);\n      return regex.test('a.ts') || regex.test('a.tsx');\n    });\n    [customJSPattern, customTSPattern].forEach(pattern => {\n      if (pattern) {\n        const customTransformer = transform[pattern];\n\n        if (Array.isArray(customTransformer)) {\n          if (customTransformer[0] === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            customTransformer[0] = babelJest;\n          } else if (customTransformer[0].includes('babel-jest')) {\n            babelJest = customTransformer[0];\n          }\n        } else {\n          if (customTransformer === 'babel-jest') {\n            babelJest = require.resolve('babel-jest');\n            transform[pattern] = babelJest;\n          } else if (customTransformer.includes('babel-jest')) {\n            babelJest = customTransformer;\n          }\n        }\n      }\n    });\n  } else {\n    babelJest = require.resolve('babel-jest');\n    options.transform = {\n      [_constants.DEFAULT_JS_PATTERN]: babelJest\n    };\n  }\n};\n\nconst normalizeCollectCoverageOnlyFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  const collectCoverageOnlyFrom = Array.isArray(initialCollectCoverageFrom)\n    ? initialCollectCoverageFrom // passed from argv\n    : Object.keys(initialCollectCoverageFrom); // passed from options\n\n  return collectCoverageOnlyFrom.reduce((map, filePath) => {\n    filePath = path().resolve(\n      options.rootDir,\n      (0, _utils.replaceRootDirInPath)(options.rootDir, filePath)\n    );\n    map[filePath] = true;\n    return map;\n  }, Object.create(null));\n};\n\nconst normalizeCollectCoverageFrom = (options, key) => {\n  const initialCollectCoverageFrom = options[key];\n  let value;\n\n  if (!initialCollectCoverageFrom) {\n    value = [];\n  }\n\n  if (!Array.isArray(initialCollectCoverageFrom)) {\n    try {\n      value = JSON.parse(initialCollectCoverageFrom);\n    } catch {}\n\n    if (options[key] && !Array.isArray(value)) {\n      value = [initialCollectCoverageFrom];\n    }\n  } else {\n    value = initialCollectCoverageFrom;\n  }\n\n  if (value) {\n    value = value.map(filePath =>\n      filePath.replace(/^(!?)(<rootDir>\\/)(.*)/, '$1$3')\n    );\n  }\n\n  return value;\n};\n\nconst normalizeUnmockedModulePathPatterns = (\n  options,\n  key // _replaceRootDirTags is specifically well-suited for substituting\n) =>\n  // <rootDir> in paths (it deals with properly interpreting relative path\n  // separators, etc).\n  //\n  // For patterns, direct global substitution is far more ideal, so we\n  // special case substitutions for patterns here.\n  options[key].map(pattern =>\n    (0, _jestRegexUtil().replacePathSepForRegex)(\n      pattern.replace(/<rootDir>/g, options.rootDir)\n    )\n  );\n\nconst normalizePreprocessor = options => {\n  if (options.scriptPreprocessor && options.transform) {\n    throw createConfigError(`  Options: ${_chalk().default.bold(\n      'scriptPreprocessor'\n    )} and ${_chalk().default.bold('transform')} cannot be used together.\n  Please change your configuration to only use ${_chalk().default.bold(\n    'transform'\n  )}.`);\n  }\n\n  if (options.preprocessorIgnorePatterns && options.transformIgnorePatterns) {\n    throw createConfigError(`  Options ${_chalk().default.bold(\n      'preprocessorIgnorePatterns'\n    )} and ${_chalk().default.bold(\n      'transformIgnorePatterns'\n    )} cannot be used together.\n  Please change your configuration to only use ${_chalk().default.bold(\n    'transformIgnorePatterns'\n  )}.`);\n  }\n\n  if (options.scriptPreprocessor) {\n    options.transform = {\n      '.*': options.scriptPreprocessor\n    };\n  }\n\n  if (options.preprocessorIgnorePatterns) {\n    options.transformIgnorePatterns = options.preprocessorIgnorePatterns;\n  }\n\n  delete options.scriptPreprocessor;\n  delete options.preprocessorIgnorePatterns;\n  return options;\n};\n\nconst normalizeMissingOptions = (options, configPath, projectIndex) => {\n  if (!options.name) {\n    options.name = (0, _crypto().createHash)('md5')\n      .update(options.rootDir) // In case we load config from some path that has the same root dir\n      .update(configPath || '')\n      .update(String(projectIndex))\n      .digest('hex');\n  }\n\n  if (!options.setupFiles) {\n    options.setupFiles = [];\n  }\n\n  return options;\n};\n\nconst normalizeRootDir = options => {\n  // Assert that there *is* a rootDir\n  if (!options.rootDir) {\n    throw createConfigError(\n      `  Configuration option ${_chalk().default.bold(\n        'rootDir'\n      )} must be specified.`\n    );\n  }\n\n  options.rootDir = path().normalize(options.rootDir);\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    options.rootDir = (0, _jestUtil().tryRealpath)(options.rootDir);\n  } catch {\n    // ignored\n  }\n\n  verifyDirectoryExists(options.rootDir, 'rootDir');\n  return {...options, rootDir: options.rootDir};\n};\n\nconst normalizeReporters = options => {\n  const reporters = options.reporters;\n\n  if (!reporters || !Array.isArray(reporters)) {\n    return options;\n  }\n\n  (0, _ReporterValidationErrors.validateReporters)(reporters);\n  options.reporters = reporters.map(reporterConfig => {\n    const normalizedReporterConfig =\n      typeof reporterConfig === 'string' // if reporter config is a string, we wrap it in an array\n        ? // and pass an empty object for options argument, to normalize\n          // the shape.\n          [reporterConfig, {}]\n        : reporterConfig;\n    const reporterPath = (0, _utils.replaceRootDirInPath)(\n      options.rootDir,\n      normalizedReporterConfig[0]\n    );\n\n    if (reporterPath !== _constants.DEFAULT_REPORTER_LABEL) {\n      const reporter = _jestResolve().default.findNodeModule(reporterPath, {\n        basedir: options.rootDir\n      });\n\n      if (!reporter) {\n        throw new (_jestResolve().default.ModuleNotFoundError)(\n          `Could not resolve a module for a custom reporter.\\n` +\n            `  Module name: ${reporterPath}`\n        );\n      }\n\n      normalizedReporterConfig[0] = reporter;\n    }\n\n    return normalizedReporterConfig;\n  });\n  return options;\n};\n\nconst buildTestPathPattern = argv => {\n  const patterns = [];\n\n  if (argv._) {\n    patterns.push(...argv._);\n  }\n\n  if (argv.testPathPattern) {\n    patterns.push(...argv.testPathPattern);\n  }\n\n  const replacePosixSep = pattern => {\n    // yargs coerces positional args into numbers\n    const patternAsString = pattern.toString();\n\n    if (path().sep === '/') {\n      return patternAsString;\n    }\n\n    return patternAsString.replace(/\\//g, '\\\\\\\\');\n  };\n\n  const testPathPattern = patterns.map(replacePosixSep).join('|');\n\n  if ((0, _validatePattern.default)(testPathPattern)) {\n    return testPathPattern;\n  } else {\n    showTestPathPatternError(testPathPattern);\n    return '';\n  }\n};\n\nconst showTestPathPatternError = testPathPattern => {\n  (0, _jestUtil().clearLine)(process.stdout);\n  console.log(\n    _chalk().default.red(\n      `  Invalid testPattern ${testPathPattern} supplied. ` +\n        `Running all tests instead.`\n    )\n  );\n};\n\nfunction normalize(initialOptions, argv, configPath, projectIndex = Infinity) {\n  const {hasDeprecationWarnings} = (0, _jestValidate().validate)(\n    initialOptions,\n    {\n      comment: _utils.DOCUMENTATION_NOTE,\n      deprecatedConfig: _Deprecated.default,\n      exampleConfig: _ValidConfig.default,\n      recursiveBlacklist: [\n        'collectCoverageOnlyFrom', // 'coverageThreshold' allows to use 'global' and glob strings on the same\n        // level, there's currently no way we can deal with such config\n        'coverageThreshold',\n        'globals',\n        'moduleNameMapper',\n        'testEnvironmentOptions',\n        'transform'\n      ]\n    }\n  );\n  let options = normalizePreprocessor(\n    normalizeReporters(\n      normalizeMissingOptions(\n        normalizeRootDir((0, _setFromArgv.default)(initialOptions, argv)),\n        configPath,\n        projectIndex\n      )\n    )\n  );\n\n  if (options.preset) {\n    options = setupPreset(options, options.preset);\n  }\n\n  if (!options.setupFilesAfterEnv) {\n    options.setupFilesAfterEnv = [];\n  }\n\n  if (\n    options.setupTestFrameworkScriptFile &&\n    options.setupFilesAfterEnv.length > 0\n  ) {\n    throw createConfigError(`  Options: ${_chalk().default.bold(\n      'setupTestFrameworkScriptFile'\n    )} and ${_chalk().default.bold(\n      'setupFilesAfterEnv'\n    )} cannot be used together.\n  Please change your configuration to only use ${_chalk().default.bold(\n    'setupFilesAfterEnv'\n  )}.`);\n  }\n\n  if (options.setupTestFrameworkScriptFile) {\n    options.setupFilesAfterEnv.push(options.setupTestFrameworkScriptFile);\n  }\n\n  options.testEnvironment = (0, _utils.getTestEnvironment)({\n    rootDir: options.rootDir,\n    testEnvironment:\n      options.testEnvironment || _Defaults.default.testEnvironment\n  });\n\n  if (!options.roots && options.testPathDirs) {\n    options.roots = options.testPathDirs;\n    delete options.testPathDirs;\n  }\n\n  if (!options.roots) {\n    options.roots = [options.rootDir];\n  }\n\n  if (!options.testRunner || options.testRunner === 'jasmine2') {\n    options.testRunner = require.resolve('jest-jasmine2');\n  }\n\n  if (!options.coverageDirectory) {\n    options.coverageDirectory = path().resolve(options.rootDir, 'coverage');\n  }\n\n  setupBabelJest(options); // TODO: Type this properly\n\n  const newOptions = {..._Defaults.default};\n\n  if (options.resolver) {\n    newOptions.resolver = (0, _utils.resolve)(null, {\n      filePath: options.resolver,\n      key: 'resolver',\n      rootDir: options.rootDir\n    });\n  }\n\n  const optionKeys = Object.keys(options);\n  optionKeys.reduce((newOptions, key) => {\n    // The resolver has been resolved separately; skip it\n    if (key === 'resolver') {\n      return newOptions;\n    } // This is cheating, because it claims that all keys of InitialOptions are Required.\n    // We only really know it's Required for oldOptions[key], not for oldOptions.someOtherKey,\n    // so oldOptions[key] is the only way it should be used.\n\n    const oldOptions = options;\n    let value;\n\n    switch (key) {\n      case 'collectCoverageOnlyFrom':\n        value = normalizeCollectCoverageOnlyFrom(oldOptions, key);\n        break;\n\n      case 'setupFiles':\n      case 'setupFilesAfterEnv':\n      case 'snapshotSerializers':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            option.map(filePath =>\n              (0, _utils.resolve)(newOptions.resolver, {\n                filePath,\n                key,\n                rootDir: options.rootDir\n              })\n            );\n        }\n        break;\n\n      case 'modulePaths':\n      case 'roots':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            option.map(filePath =>\n              path().resolve(\n                options.rootDir,\n                (0, _utils.replaceRootDirInPath)(options.rootDir, filePath)\n              )\n            );\n        }\n        break;\n\n      case 'collectCoverageFrom':\n        value = normalizeCollectCoverageFrom(oldOptions, key);\n        break;\n\n      case 'cacheDirectory':\n      case 'coverageDirectory':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            path().resolve(\n              options.rootDir,\n              (0, _utils.replaceRootDirInPath)(options.rootDir, option)\n            );\n        }\n        break;\n\n      case 'dependencyExtractor':\n      case 'globalSetup':\n      case 'globalTeardown':\n      case 'moduleLoader':\n      case 'snapshotResolver':\n      case 'testResultsProcessor':\n      case 'testRunner':\n      case 'filter':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            (0, _utils.resolve)(newOptions.resolver, {\n              filePath: option,\n              key,\n              rootDir: options.rootDir\n            });\n        }\n        break;\n\n      case 'runner':\n        {\n          const option = oldOptions[key];\n          value =\n            option &&\n            (0, _utils.getRunner)(newOptions.resolver, {\n              filePath: option,\n              rootDir: options.rootDir\n            });\n        }\n        break;\n\n      case 'prettierPath':\n        {\n          // We only want this to throw if \"prettierPath\" is explicitly passed\n          // from config or CLI, and the requested path isn't found. Otherwise we\n          // set it to null and throw an error lazily when it is used.\n          const option = oldOptions[key];\n          value =\n            option &&\n            (0, _utils.resolve)(newOptions.resolver, {\n              filePath: option,\n              key,\n              optional: option === _Defaults.default[key],\n              rootDir: options.rootDir\n            });\n        }\n        break;\n\n      case 'moduleNameMapper':\n        const moduleNameMapper = oldOptions[key];\n        value =\n          moduleNameMapper &&\n          Object.keys(moduleNameMapper).map(regex => {\n            const item = moduleNameMapper && moduleNameMapper[regex];\n            return (\n              item && [\n                regex,\n                (0, _utils._replaceRootDirTags)(options.rootDir, item)\n              ]\n            );\n          });\n        break;\n\n      case 'transform':\n        const transform = oldOptions[key];\n        value =\n          transform &&\n          Object.keys(transform).map(regex => {\n            const transformElement = transform[regex];\n            return [\n              regex,\n              (0, _utils.resolve)(newOptions.resolver, {\n                filePath: Array.isArray(transformElement)\n                  ? transformElement[0]\n                  : transformElement,\n                key,\n                rootDir: options.rootDir\n              }),\n              Array.isArray(transformElement) ? transformElement[1] : {}\n            ];\n          });\n        break;\n\n      case 'coveragePathIgnorePatterns':\n      case 'modulePathIgnorePatterns':\n      case 'testPathIgnorePatterns':\n      case 'transformIgnorePatterns':\n      case 'watchPathIgnorePatterns':\n      case 'unmockedModulePathPatterns':\n        value = normalizeUnmockedModulePathPatterns(oldOptions, key);\n        break;\n\n      case 'haste':\n        value = {...oldOptions[key]};\n\n        if (value.hasteImplModulePath != null) {\n          const resolvedHasteImpl = (0, _utils.resolve)(newOptions.resolver, {\n            filePath: (0, _utils.replaceRootDirInPath)(\n              options.rootDir,\n              value.hasteImplModulePath\n            ),\n            key: 'haste.hasteImplModulePath',\n            rootDir: options.rootDir\n          });\n          value.hasteImplModulePath = resolvedHasteImpl || undefined;\n        }\n\n        break;\n\n      case 'projects':\n        value = (oldOptions[key] || [])\n          .map(project =>\n            typeof project === 'string'\n              ? (0, _utils._replaceRootDirTags)(options.rootDir, project)\n              : project\n          )\n          .reduce((projects, project) => {\n            // Project can be specified as globs. If a glob matches any files,\n            // We expand it to these paths. If not, we keep the original path\n            // for the future resolution.\n            const globMatches =\n              typeof project === 'string' ? (0, _glob().sync)(project) : [];\n            return projects.concat(globMatches.length ? globMatches : project);\n          }, []);\n        break;\n\n      case 'moduleDirectories':\n      case 'testMatch':\n        {\n          const replacedRootDirTags = (0, _utils._replaceRootDirTags)(\n            (0, _utils.escapeGlobCharacters)(options.rootDir),\n            oldOptions[key]\n          );\n\n          if (replacedRootDirTags) {\n            value = Array.isArray(replacedRootDirTags)\n              ? replacedRootDirTags.map(_jestUtil().replacePathSepForGlob)\n              : (0, _jestUtil().replacePathSepForGlob)(replacedRootDirTags);\n          } else {\n            value = replacedRootDirTags;\n          }\n        }\n        break;\n\n      case 'testRegex':\n        {\n          const option = oldOptions[key];\n          value = option\n            ? (Array.isArray(option) ? option : [option]).map(\n                _jestRegexUtil().replacePathSepForRegex\n              )\n            : [];\n        }\n        break;\n\n      case 'moduleFileExtensions': {\n        value = oldOptions[key];\n\n        if (\n          Array.isArray(value) && // If it's the wrong type, it can throw at a later time\n          (options.runner === undefined ||\n            options.runner === _Defaults.default.runner) && // Only require 'js' for the default jest-runner\n          !value.includes('js')\n        ) {\n          const errorMessage =\n            `  moduleFileExtensions must include 'js':\\n` +\n            `  but instead received:\\n` +\n            `    ${_chalk().default.bold.red(JSON.stringify(value))}`; // If `js` is not included, any dependency Jest itself injects into\n          // the environment, like jasmine or sourcemap-support, will need to\n          // `require` its modules with a file extension. This is not plausible\n          // in the long run, so it's way easier to just fail hard early.\n          // We might consider throwing if `json` is missing as well, as it's a\n          // fair assumption from modules that they can do\n          // `require('some-package/package') without the trailing `.json` as it\n          // works in Node normally.\n\n          throw createConfigError(\n            errorMessage +\n              \"\\n  Please change your configuration to include 'js'.\"\n          );\n        }\n\n        break;\n      }\n\n      case 'bail': {\n        const bail = oldOptions[key];\n\n        if (typeof bail === 'boolean') {\n          value = bail ? 1 : 0;\n        } else if (typeof bail === 'string') {\n          value = 1; // If Jest is invoked as `jest --bail someTestPattern` then need to\n          // move the pattern from the `bail` configuration and into `argv._`\n          // to be processed as an extra parameter\n\n          argv._.push(bail);\n        } else {\n          value = oldOptions[key];\n        }\n\n        break;\n      }\n\n      case 'displayName': {\n        const displayName = oldOptions[key];\n        /**\n         * Ensuring that displayName shape is correct here so that the\n         * reporters can trust the shape of the data\n         */\n\n        if (typeof displayName === 'object') {\n          const {name, color} = displayName;\n\n          if (\n            !name ||\n            !color ||\n            typeof name !== 'string' ||\n            typeof color !== 'string'\n          ) {\n            const errorMessage =\n              `  Option \"${_chalk().default.bold(\n                'displayName'\n              )}\" must be of type:\\n\\n` +\n              '  {\\n' +\n              '    name: string;\\n' +\n              '    color: string;\\n' +\n              '  }\\n';\n            throw createConfigError(errorMessage);\n          }\n\n          value = oldOptions[key];\n        } else {\n          value = {\n            color: (0, _color.getDisplayNameColor)(options.runner),\n            name: displayName\n          };\n        }\n\n        break;\n      }\n\n      case 'testTimeout': {\n        if (oldOptions[key] < 0) {\n          throw createConfigError(\n            `  Option \"${_chalk().default.bold(\n              'testTimeout'\n            )}\" must be a natural number.`\n          );\n        }\n\n        value = oldOptions[key];\n        break;\n      }\n\n      case 'automock':\n      case 'cache':\n      case 'changedSince':\n      case 'changedFilesWithAncestor':\n      case 'clearMocks':\n      case 'collectCoverage':\n      case 'coverageProvider':\n      case 'coverageReporters':\n      case 'coverageThreshold':\n      case 'detectLeaks':\n      case 'detectOpenHandles':\n      case 'errorOnDeprecated':\n      case 'expand':\n      case 'extraGlobals':\n      case 'globals':\n      case 'findRelatedTests':\n      case 'forceCoverageMatch':\n      case 'forceExit':\n      case 'injectGlobals':\n      case 'lastCommit':\n      case 'listTests':\n      case 'logHeapUsage':\n      case 'maxConcurrency':\n      case 'mapCoverage':\n      case 'name':\n      case 'noStackTrace':\n      case 'notify':\n      case 'notifyMode':\n      case 'onlyChanged':\n      case 'onlyFailures':\n      case 'outputFile':\n      case 'passWithNoTests':\n      case 'replname':\n      case 'reporters':\n      case 'resetMocks':\n      case 'resetModules':\n      case 'restoreMocks':\n      case 'rootDir':\n      case 'runTestsByPath':\n      case 'silent':\n      case 'skipFilter':\n      case 'skipNodeResolution':\n      case 'slowTestThreshold':\n      case 'testEnvironment':\n      case 'testEnvironmentOptions':\n      case 'testFailureExitCode':\n      case 'testLocationInResults':\n      case 'testNamePattern':\n      case 'testURL':\n      case 'timers':\n      case 'useStderr':\n      case 'verbose':\n      case 'watch':\n      case 'watchAll':\n      case 'watchman':\n        value = oldOptions[key];\n        break;\n\n      case 'watchPlugins':\n        value = (oldOptions[key] || []).map(watchPlugin => {\n          if (typeof watchPlugin === 'string') {\n            return {\n              config: {},\n              path: (0, _utils.getWatchPlugin)(newOptions.resolver, {\n                filePath: watchPlugin,\n                rootDir: options.rootDir\n              })\n            };\n          } else {\n            return {\n              config: watchPlugin[1] || {},\n              path: (0, _utils.getWatchPlugin)(newOptions.resolver, {\n                filePath: watchPlugin[0],\n                rootDir: options.rootDir\n              })\n            };\n          }\n        });\n        break;\n    } // @ts-expect-error: automock is missing in GlobalConfig, so what\n\n    newOptions[key] = value;\n    return newOptions;\n  }, newOptions);\n  newOptions.roots.forEach((root, i) => {\n    verifyDirectoryExists(root, `roots[${i}]`);\n  });\n\n  try {\n    // try to resolve windows short paths, ignoring errors (permission errors, mostly)\n    newOptions.cwd = (0, _jestUtil().tryRealpath)(process.cwd());\n  } catch {\n    // ignored\n  }\n\n  newOptions.testSequencer = (0, _utils.getSequencer)(newOptions.resolver, {\n    filePath: options.testSequencer || _Defaults.default.testSequencer,\n    rootDir: options.rootDir\n  });\n  newOptions.nonFlagArgs = argv._;\n  newOptions.testPathPattern = buildTestPathPattern(argv);\n  newOptions.json = !!argv.json;\n  newOptions.testFailureExitCode = parseInt(newOptions.testFailureExitCode, 10);\n\n  if (\n    newOptions.lastCommit ||\n    newOptions.changedFilesWithAncestor ||\n    newOptions.changedSince\n  ) {\n    newOptions.onlyChanged = true;\n  }\n\n  if (argv.all) {\n    newOptions.onlyChanged = false;\n    newOptions.onlyFailures = false;\n  } else if (newOptions.testPathPattern) {\n    // When passing a test path pattern we don't want to only monitor changed\n    // files unless `--watch` is also passed.\n    newOptions.onlyChanged = newOptions.watch;\n  }\n\n  if (!newOptions.onlyChanged) {\n    newOptions.onlyChanged = false;\n  }\n\n  if (!newOptions.lastCommit) {\n    newOptions.lastCommit = false;\n  }\n\n  if (!newOptions.onlyFailures) {\n    newOptions.onlyFailures = false;\n  }\n\n  if (!newOptions.watchAll) {\n    newOptions.watchAll = false;\n  } // as unknown since it can happen. We really need to fix the types here\n\n  if (newOptions.moduleNameMapper === _Defaults.default.moduleNameMapper) {\n    newOptions.moduleNameMapper = [];\n  }\n\n  newOptions.updateSnapshot =\n    argv.ci && !argv.updateSnapshot\n      ? 'none'\n      : argv.updateSnapshot\n      ? 'all'\n      : 'new';\n  newOptions.maxConcurrency = parseInt(newOptions.maxConcurrency, 10);\n  newOptions.maxWorkers = (0, _getMaxWorkers.default)(argv, options);\n\n  if (newOptions.testRegex.length && options.testMatch) {\n    throw createConfigError(\n      `  Configuration options ${_chalk().default.bold('testMatch')} and` +\n        ` ${_chalk().default.bold('testRegex')} cannot be used together.`\n    );\n  }\n\n  if (newOptions.testRegex.length && !options.testMatch) {\n    // Prevent the default testMatch conflicting with any explicitly\n    // configured `testRegex` value\n    newOptions.testMatch = [];\n  } // If argv.json is set, coverageReporters shouldn't print a text report.\n\n  if (argv.json) {\n    newOptions.coverageReporters = (newOptions.coverageReporters || []).filter(\n      reporter => reporter !== 'text'\n    );\n  } // If collectCoverage is enabled while using --findRelatedTests we need to\n  // avoid having false negatives in the generated coverage report.\n  // The following: `--findRelatedTests '/rootDir/file1.js' --coverage`\n  // Is transformed to: `--findRelatedTests '/rootDir/file1.js' --coverage --collectCoverageFrom 'file1.js'`\n  // where arguments to `--collectCoverageFrom` should be globs (or relative\n  // paths to the rootDir)\n\n  if (newOptions.collectCoverage && argv.findRelatedTests) {\n    let collectCoverageFrom = argv._.map(filename => {\n      filename = (0, _utils.replaceRootDirInPath)(options.rootDir, filename);\n      return path().isAbsolute(filename)\n        ? path().relative(options.rootDir, filename)\n        : filename;\n    }); // Don't override existing collectCoverageFrom options\n\n    if (newOptions.collectCoverageFrom) {\n      collectCoverageFrom = collectCoverageFrom.reduce((patterns, filename) => {\n        if (\n          (0, _micromatch().default)(\n            [\n              (0, _jestUtil().replacePathSepForGlob)(\n                path().relative(options.rootDir, filename)\n              )\n            ],\n            newOptions.collectCoverageFrom\n          ).length === 0\n        ) {\n          return patterns;\n        }\n\n        return [...patterns, filename];\n      }, newOptions.collectCoverageFrom);\n    }\n\n    newOptions.collectCoverageFrom = collectCoverageFrom;\n  } else if (!newOptions.collectCoverageFrom) {\n    newOptions.collectCoverageFrom = [];\n  }\n\n  if (!newOptions.findRelatedTests) {\n    newOptions.findRelatedTests = false;\n  }\n\n  if (!newOptions.projects) {\n    newOptions.projects = [];\n  }\n\n  if (!newOptions.extraGlobals) {\n    newOptions.extraGlobals = [];\n  }\n\n  if (!newOptions.forceExit) {\n    newOptions.forceExit = false;\n  }\n\n  if (!newOptions.logHeapUsage) {\n    newOptions.logHeapUsage = false;\n  }\n\n  return {\n    hasDeprecationWarnings,\n    options: newOptions\n  };\n}\n"]},"metadata":{},"sourceType":"script"}