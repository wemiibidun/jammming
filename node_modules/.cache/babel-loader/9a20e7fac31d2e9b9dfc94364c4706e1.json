{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction helpers() {\n  const data = require(\"@babel/helpers\");\n\n  helpers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = require(\"@babel/generator\");\n\n  _generator = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = require(\"@babel/template\");\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = require(\"@babel/types\");\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"../transformation/file/file\");\n\nconst buildUmdWrapper = replacements => (0, _template().default)`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(allowlist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  const container = t().functionExpression(null, [t().identifier(\"global\")], t().blockStatement(body));\n  const tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression(\"===\", t().unaryExpression(\"typeof\", t().identifier(\"global\")), t().stringLiteral(\"undefined\")), t().identifier(\"self\"), t().identifier(\"global\"))]))]);\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"global\"), namespace), t().objectExpression([])))]));\n  buildHelpers(body, namespace, allowlist);\n  return tree;\n}\n\nfunction buildModule(allowlist) {\n  const body = [];\n  const refs = buildHelpers(body, null, allowlist);\n  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(name => {\n    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));\n  })));\n  return t().program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().identifier(\"global\"))]));\n  buildHelpers(body, namespace, allowlist);\n  return t().program([buildUmdWrapper({\n    FACTORY_PARAMETERS: t().identifier(\"global\"),\n    BROWSER_ARGUMENTS: t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"root\"), namespace), t().objectExpression([])),\n    COMMON_ARGUMENTS: t().identifier(\"exports\"),\n    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: t().identifier(\"this\")\n  })]);\n}\n\nfunction buildVar(allowlist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().objectExpression([]))]));\n  const tree = t().program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(t().expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, allowlist) {\n  const getHelperReference = name => {\n    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(`_${name}`);\n  };\n\n  const refs = {};\n  helpers().list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n    const ref = refs[name] = getHelperReference(name);\n    helpers().ensure(name, _file.default);\n    const {\n      nodes\n    } = helpers().get(name, getHelperReference, ref);\n    body.push(...nodes);\n  });\n  return refs;\n}\n\nfunction _default(allowlist, outputType = \"global\") {\n  let tree;\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return (0, _generator().default)(tree).code;\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@babel/core/lib/tools/build-external-helpers.js"],"names":["Object","defineProperty","exports","value","default","_default","helpers","data","require","_generator","_template","t","_file","buildUmdWrapper","replacements","buildGlobal","allowlist","namespace","identifier","body","container","functionExpression","blockStatement","tree","program","expressionStatement","callExpression","conditionalExpression","binaryExpression","unaryExpression","stringLiteral","push","variableDeclaration","variableDeclarator","assignmentExpression","memberExpression","objectExpression","buildHelpers","buildModule","refs","unshift","exportNamedDeclaration","keys","map","name","exportSpecifier","cloneNode","buildUmd","FACTORY_PARAMETERS","BROWSER_ARGUMENTS","COMMON_ARGUMENTS","AMD_ARGUMENTS","arrayExpression","FACTORY_BODY","UMD_ROOT","buildVar","getHelperReference","list","forEach","indexOf","ref","ensure","nodes","get","outputType","build","global","module","umd","var","Error","code"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction helpers() {\n  const data = require(\"@babel/helpers\");\n\n  helpers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = require(\"@babel/generator\");\n\n  _generator = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = require(\"@babel/template\");\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = require(\"@babel/types\");\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"../transformation/file/file\");\n\nconst buildUmdWrapper = replacements => (0, _template().default)`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(allowlist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  const container = t().functionExpression(null, [t().identifier(\"global\")], t().blockStatement(body));\n  const tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression(\"===\", t().unaryExpression(\"typeof\", t().identifier(\"global\")), t().stringLiteral(\"undefined\")), t().identifier(\"self\"), t().identifier(\"global\"))]))]);\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"global\"), namespace), t().objectExpression([])))]));\n  buildHelpers(body, namespace, allowlist);\n  return tree;\n}\n\nfunction buildModule(allowlist) {\n  const body = [];\n  const refs = buildHelpers(body, null, allowlist);\n  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(name => {\n    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));\n  })));\n  return t().program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().identifier(\"global\"))]));\n  buildHelpers(body, namespace, allowlist);\n  return t().program([buildUmdWrapper({\n    FACTORY_PARAMETERS: t().identifier(\"global\"),\n    BROWSER_ARGUMENTS: t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"root\"), namespace), t().objectExpression([])),\n    COMMON_ARGUMENTS: t().identifier(\"exports\"),\n    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: t().identifier(\"this\")\n  })]);\n}\n\nfunction buildVar(allowlist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().objectExpression([]))]));\n  const tree = t().program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(t().expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, allowlist) {\n  const getHelperReference = name => {\n    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(`_${name}`);\n  };\n\n  const refs = {};\n  helpers().list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n    const ref = refs[name] = getHelperReference(name);\n    helpers().ensure(name, _file.default);\n    const {\n      nodes\n    } = helpers().get(name, getHelperReference, ref);\n    body.push(...nodes);\n  });\n  return refs;\n}\n\nfunction _default(allowlist, outputType = \"global\") {\n  let tree;\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return (0, _generator().default)(tree).code;\n}"]},"metadata":{},"sourceType":"script"}