{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Identifier = Identifier;\nexports.ArgumentPlaceholder = ArgumentPlaceholder;\nexports.SpreadElement = exports.RestElement = RestElement;\nexports.ObjectPattern = exports.ObjectExpression = ObjectExpression;\nexports.ObjectMethod = ObjectMethod;\nexports.ObjectProperty = ObjectProperty;\nexports.ArrayPattern = exports.ArrayExpression = ArrayExpression;\nexports.RecordExpression = RecordExpression;\nexports.TupleExpression = TupleExpression;\nexports.RegExpLiteral = RegExpLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.StringLiteral = StringLiteral;\nexports.BigIntLiteral = BigIntLiteral;\nexports.DecimalLiteral = DecimalLiteral;\nexports.PipelineTopicExpression = PipelineTopicExpression;\nexports.PipelineBareFunction = PipelineBareFunction;\nexports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;\n\nvar t = require(\"@babel/types\");\n\nvar _jsesc = require(\"jsesc\");\n\nfunction Identifier(node) {\n  this.exactSource(node.loc, () => {\n    this.word(node.name);\n  });\n}\n\nfunction ArgumentPlaceholder() {\n  this.token(\"?\");\n}\n\nfunction RestElement(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction ObjectExpression(node) {\n  const props = node.properties;\n  this.token(\"{\");\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(\"}\");\n}\n\nfunction ObjectMethod(node) {\n  this.printJoin(node.decorators, node);\n\n  this._methodHead(node);\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction ObjectProperty(node) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ArrayExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  this.token(\"[\");\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      this.token(\",\");\n    }\n  }\n\n  this.token(\"]\");\n}\n\nfunction RecordExpression(node) {\n  const props = node.properties;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"{|\";\n    endToken = \"|}\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#{\";\n    endToken = \"}\";\n  } else {\n    throw new Error(`The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(endToken);\n}\n\nfunction TupleExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"[|\";\n    endToken = \"|]\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nfunction RegExpLiteral(node) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nfunction BooleanLiteral(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteral() {\n  this.word(\"null\");\n}\n\nfunction NumericLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value + \"\";\n\n  if (opts.numbers) {\n    this.number(_jsesc(node.value, opts));\n  } else if (raw == null) {\n    this.number(value);\n  } else if (this.format.minified) {\n    this.number(raw.length < value.length ? raw : value);\n  } else {\n    this.number(raw);\n  }\n}\n\nfunction StringLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {\n    json: true\n  }));\n\n  return this.token(val);\n}\n\nfunction BigIntLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"n\");\n}\n\nfunction DecimalLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"m\");\n}\n\nfunction PipelineTopicExpression(node) {\n  this.print(node.expression, node);\n}\n\nfunction PipelineBareFunction(node) {\n  this.print(node.callee, node);\n}\n\nfunction PipelinePrimaryTopicReference() {\n  this.token(\"#\");\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@babel/generator/lib/generators/types.js"],"names":["Object","defineProperty","exports","value","Identifier","ArgumentPlaceholder","SpreadElement","RestElement","ObjectPattern","ObjectExpression","ObjectMethod","ObjectProperty","ArrayPattern","ArrayExpression","RecordExpression","TupleExpression","RegExpLiteral","BooleanLiteral","NullLiteral","NumericLiteral","StringLiteral","BigIntLiteral","DecimalLiteral","PipelineTopicExpression","PipelineBareFunction","PipelinePrimaryTopicReference","t","require","_jsesc","node","exactSource","loc","word","name","token","print","argument","props","properties","printInnerComments","length","space","printList","indent","statement","printJoin","decorators","_methodHead","body","computed","key","isAssignmentPattern","isIdentifier","left","shorthand","elems","elements","len","i","elem","startToken","endToken","format","recordAndTupleSyntaxType","Error","JSON","stringify","pattern","flags","raw","getPossibleRaw","opts","jsescOption","numbers","number","minified","val","assign","jsonCompatibleStrings","json","expression","callee"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Identifier = Identifier;\nexports.ArgumentPlaceholder = ArgumentPlaceholder;\nexports.SpreadElement = exports.RestElement = RestElement;\nexports.ObjectPattern = exports.ObjectExpression = ObjectExpression;\nexports.ObjectMethod = ObjectMethod;\nexports.ObjectProperty = ObjectProperty;\nexports.ArrayPattern = exports.ArrayExpression = ArrayExpression;\nexports.RecordExpression = RecordExpression;\nexports.TupleExpression = TupleExpression;\nexports.RegExpLiteral = RegExpLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.StringLiteral = StringLiteral;\nexports.BigIntLiteral = BigIntLiteral;\nexports.DecimalLiteral = DecimalLiteral;\nexports.PipelineTopicExpression = PipelineTopicExpression;\nexports.PipelineBareFunction = PipelineBareFunction;\nexports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;\n\nvar t = require(\"@babel/types\");\n\nvar _jsesc = require(\"jsesc\");\n\nfunction Identifier(node) {\n  this.exactSource(node.loc, () => {\n    this.word(node.name);\n  });\n}\n\nfunction ArgumentPlaceholder() {\n  this.token(\"?\");\n}\n\nfunction RestElement(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction ObjectExpression(node) {\n  const props = node.properties;\n  this.token(\"{\");\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(\"}\");\n}\n\nfunction ObjectMethod(node) {\n  this.printJoin(node.decorators, node);\n\n  this._methodHead(node);\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction ObjectProperty(node) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ArrayExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  this.token(\"[\");\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      this.token(\",\");\n    }\n  }\n\n  this.token(\"]\");\n}\n\nfunction RecordExpression(node) {\n  const props = node.properties;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"{|\";\n    endToken = \"|}\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#{\";\n    endToken = \"}\";\n  } else {\n    throw new Error(`The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(endToken);\n}\n\nfunction TupleExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"[|\";\n    endToken = \"|]\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nfunction RegExpLiteral(node) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nfunction BooleanLiteral(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteral() {\n  this.word(\"null\");\n}\n\nfunction NumericLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value + \"\";\n\n  if (opts.numbers) {\n    this.number(_jsesc(node.value, opts));\n  } else if (raw == null) {\n    this.number(value);\n  } else if (this.format.minified) {\n    this.number(raw.length < value.length ? raw : value);\n  } else {\n    this.number(raw);\n  }\n}\n\nfunction StringLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {\n    json: true\n  }));\n\n  return this.token(val);\n}\n\nfunction BigIntLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"n\");\n}\n\nfunction DecimalLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"m\");\n}\n\nfunction PipelineTopicExpression(node) {\n  this.print(node.expression, node);\n}\n\nfunction PipelineBareFunction(node) {\n  this.print(node.callee, node);\n}\n\nfunction PipelinePrimaryTopicReference() {\n  this.token(\"#\");\n}"]},"metadata":{},"sourceType":"script"}