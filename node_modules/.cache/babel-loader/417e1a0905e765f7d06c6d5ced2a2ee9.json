{"ast":null,"code":"var clientID='6d7f450a2d294423a212e3874d46ad4f';var redirectUri='http://tangible-attraction.surge.sh';//link to share with people to see your app\nvar accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}//check for access token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);//let's us capture all the characters assigned to the token\nvar expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);//this clears the parameter, allowing us to grab access token when it expires\nwindow.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientID,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/Users/wemi/Documents/GitHub/jammming/src/util/Spotify.js"],"names":["clientID","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientID = '6d7f450a2d294423a212e3874d46ad4f';\nconst redirectUri = 'http://tangible-attraction.surge.sh'; //link to share with people to see your app\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken (){\n        if (accessToken){\n            return accessToken;\n        }\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); //let's us capture all the characters assigned to the token\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            //this clears the parameter, allowing us to grab access token when it expires\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        }else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track =>({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist (name, trackUris){\n        if (!name || !trackUris.length){ \n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json() \n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body : JSON.stringify({uris: trackUris})\n                })\n            })\n\n        })\n        \n      }\n\n    }\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}