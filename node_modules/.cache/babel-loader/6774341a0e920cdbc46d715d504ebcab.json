{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MAGIC_VALUE = exports.MAGIC_KEY = exports.SHA = void 0;\n\nvar _crypto = require(\"crypto\");\n\nvar _semver = require(\"semver\");\n\nvar _package = require(\"../package.json\"); // function to use for creating hashes\n\n\nconst SHA = 'sha1'; // name of coverage data magic key\n\nexports.SHA = SHA;\nconst MAGIC_KEY = '_coverageSchema'; // name of coverage data magic value\n\nexports.MAGIC_KEY = MAGIC_KEY;\nconst MAGIC_VALUE = (0, _crypto.createHash)(SHA).update(_package.name + '@' + (0, _semver.major)(_package.version)).digest('hex');\nexports.MAGIC_VALUE = MAGIC_VALUE;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/istanbul-lib-instrument/dist/constants.js"],"names":["Object","defineProperty","exports","value","MAGIC_VALUE","MAGIC_KEY","SHA","_crypto","require","_semver","_package","createHash","update","name","major","version","digest"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,GAAR,GAAc,KAAK,CAA7D;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAtB,C,CAEA;;;AACA,MAAMF,GAAG,GAAG,MAAZ,C,CAAoB;;AAEpBJ,OAAO,CAACI,GAAR,GAAcA,GAAd;AACA,MAAMD,SAAS,GAAG,iBAAlB,C,CAAqC;;AAErCH,OAAO,CAACG,SAAR,GAAoBA,SAApB;AACA,MAAMD,WAAW,GAAG,CAAC,GAAGG,OAAO,CAACI,UAAZ,EAAwBL,GAAxB,EAA6BM,MAA7B,CAAoCF,QAAQ,CAACG,IAAT,GAAgB,GAAhB,GAAsB,CAAC,GAAGJ,OAAO,CAACK,KAAZ,EAAmBJ,QAAQ,CAACK,OAA5B,CAA1D,EAAgGC,MAAhG,CAAuG,KAAvG,CAApB;AACAd,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MAGIC_VALUE = exports.MAGIC_KEY = exports.SHA = void 0;\n\nvar _crypto = require(\"crypto\");\n\nvar _semver = require(\"semver\");\n\nvar _package = require(\"../package.json\");\n\n// function to use for creating hashes\nconst SHA = 'sha1'; // name of coverage data magic key\n\nexports.SHA = SHA;\nconst MAGIC_KEY = '_coverageSchema'; // name of coverage data magic value\n\nexports.MAGIC_KEY = MAGIC_KEY;\nconst MAGIC_VALUE = (0, _crypto.createHash)(SHA).update(_package.name + '@' + (0, _semver.major)(_package.version)).digest('hex');\nexports.MAGIC_VALUE = MAGIC_VALUE;"]},"metadata":{},"sourceType":"script"}