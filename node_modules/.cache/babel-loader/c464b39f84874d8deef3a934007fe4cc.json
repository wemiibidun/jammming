{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _template() {\n  const data = require('@babel/template');\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('@babel/types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nconst JEST_GLOBAL_NAME = 'jest';\nconst JEST_GLOBALS_MODULE_NAME = '@jest/globals';\nconst JEST_GLOBALS_MODULE_JEST_EXPORT_NAME = 'jest';\nconst hoistedVariables = new WeakSet(); // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst ALLOWED_IDENTIFIERS = new Set(['Array', 'ArrayBuffer', 'Boolean', 'BigInt', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Generator', 'GeneratorFunction', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'InternalError', 'Intl', 'JSON', 'Map', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'URIError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'WeakMap', 'WeakSet', 'arguments', 'console', 'expect', 'isNaN', 'jest', 'parseFloat', 'parseInt', 'require', 'undefined', ...Object.getOwnPropertyNames(global)].sort());\nconst IDVisitor = {\n  ReferencedIdentifier(path, {\n    ids\n  }) {\n    ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n\n    if (!moduleFactory.isFunction()) {\n      throw moduleFactory.buildCodeFrameError('The second argument of `jest.mock` must be an inline function.\\n', TypeError);\n    }\n\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-expect-error: ReferencedIdentifier and blacklist are not known on visitors\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n\n    for (const id of ids) {\n      const {\n        name\n      } = id.node;\n      let found = false;\n      let scope = id.scope;\n\n      while (scope !== parentScope) {\n        if (scope.bindings[name]) {\n          found = true;\n          break;\n        }\n\n        scope = scope.parent;\n      }\n\n      if (!found) {\n        let isAllowedIdentifier = scope.hasGlobal(name) && ALLOWED_IDENTIFIERS.has(name) || /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n        /^(?:__)?cov/.test(name);\n\n        if (!isAllowedIdentifier) {\n          const binding = scope.bindings[name];\n\n          if (binding === null || binding === void 0 ? void 0 : binding.path.isVariableDeclarator()) {\n            const {\n              node\n            } = binding.path;\n            const initNode = node.init;\n\n            if (initNode && binding.constant && scope.isPure(initNode, true)) {\n              hoistedVariables.add(node);\n              isAllowedIdentifier = true;\n            }\n          }\n        }\n\n        if (!isAllowedIdentifier) {\n          throw id.buildCodeFrameError('The module factory of `jest.mock()` is not allowed to ' + 'reference any out-of-scope variables.\\n' + 'Invalid variable access: ' + name + '\\n' + 'Allowed objects: ' + Array.from(ALLOWED_IDENTIFIERS).join(', ') + '.\\n' + 'Note: This is a precaution to guard against uninitialized mock ' + 'variables. If it is ensured that the mock is required lazily, ' + 'variable names prefixed with `mock` (case insensitive) are permitted.\\n', ReferenceError);\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args => args.length === 0;\n\nconst createJestObjectGetter = (0, _template().statement)`\nfunction GETTER_NAME() {\n  const { JEST_GLOBALS_MODULE_JEST_EXPORT_NAME } = require(\"JEST_GLOBALS_MODULE_NAME\");\n  GETTER_NAME = () => JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n  return JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n}\n`;\n\nconst isJestObject = expression => {\n  // global\n  if (expression.isIdentifier() && expression.node.name === JEST_GLOBAL_NAME && !expression.scope.hasBinding(JEST_GLOBAL_NAME)) {\n    return true;\n  } // import { jest } from '@jest/globals'\n\n\n  if (expression.referencesImport(JEST_GLOBALS_MODULE_NAME, JEST_GLOBALS_MODULE_JEST_EXPORT_NAME)) {\n    return true;\n  } // import * as JestGlobals from '@jest/globals'\n\n\n  if (expression.isMemberExpression() && !expression.node.computed && expression.get('object').referencesImport(JEST_GLOBALS_MODULE_NAME, '*') && expression.node.property.type === 'Identifier' && expression.node.property.name === JEST_GLOBALS_MODULE_JEST_EXPORT_NAME) {\n    return true;\n  }\n\n  return false;\n};\n\nconst extractJestObjExprIfHoistable = expr => {\n  var _FUNCTIONS$propertyNa;\n\n  if (!expr.isCallExpression()) {\n    return null;\n  }\n\n  const callee = expr.get('callee');\n  const args = expr.get('arguments');\n\n  if (!callee.isMemberExpression() || callee.node.computed) {\n    return null;\n  }\n\n  const object = callee.get('object');\n  const property = callee.get('property');\n  const propertyName = property.node.name;\n  const jestObjExpr = isJestObject(object) ? object // The Jest object could be returned from another call since the functions are all chainable.\n  : extractJestObjExprIfHoistable(object);\n\n  if (!jestObjExpr) {\n    return null;\n  } // Important: Call the function check last\n  // It might throw an error to display to the user,\n  // which should only happen if we're already sure it's a call on the Jest object.\n\n\n  const functionLooksHoistable = (_FUNCTIONS$propertyNa = FUNCTIONS[propertyName]) === null || _FUNCTIONS$propertyNa === void 0 ? void 0 : _FUNCTIONS$propertyNa.call(FUNCTIONS, args);\n  return functionLooksHoistable ? jestObjExpr : null;\n};\n/* eslint-disable sort-keys */\n\n\nvar _default = () => ({\n  pre({\n    path: program\n  }) {\n    this.declareJestObjGetterIdentifier = () => {\n      if (this.jestObjGetterIdentifier) {\n        return this.jestObjGetterIdentifier;\n      }\n\n      this.jestObjGetterIdentifier = program.scope.generateUidIdentifier('getJestObj');\n      program.unshiftContainer('body', [createJestObjectGetter({\n        GETTER_NAME: this.jestObjGetterIdentifier.name,\n        JEST_GLOBALS_MODULE_JEST_EXPORT_NAME,\n        JEST_GLOBALS_MODULE_NAME\n      })]);\n      return this.jestObjGetterIdentifier;\n    };\n  },\n\n  visitor: {\n    ExpressionStatement(exprStmt) {\n      const jestObjExpr = extractJestObjExprIfHoistable(exprStmt.get('expression'));\n\n      if (jestObjExpr) {\n        jestObjExpr.replaceWith((0, _types().callExpression)(this.declareJestObjGetterIdentifier(), []));\n      }\n    }\n\n  },\n\n  // in `post` to make sure we come after an import transform and can unshift above the `require`s\n  post({\n    path: program\n  }) {\n    const self = this;\n    visitBlock(program);\n    program.traverse({\n      BlockStatement: visitBlock\n    });\n\n    function visitBlock(block) {\n      // use a temporary empty statement instead of the real first statement, which may itself be hoisted\n      const [varsHoistPoint, callsHoistPoint] = block.unshiftContainer('body', [(0, _types().emptyStatement)(), (0, _types().emptyStatement)()]);\n      block.traverse({\n        CallExpression: visitCallExpr,\n        VariableDeclarator: visitVariableDeclarator,\n        // do not traverse into nested blocks, or we'll hoist calls in there out to this block\n        // @ts-expect-error blacklist is not known\n        blacklist: ['BlockStatement']\n      });\n      callsHoistPoint.remove();\n      varsHoistPoint.remove();\n\n      function visitCallExpr(callExpr) {\n        var _self$jestObjGetterId;\n\n        const {\n          node: {\n            callee\n          }\n        } = callExpr;\n\n        if ((0, _types().isIdentifier)(callee) && callee.name === ((_self$jestObjGetterId = self.jestObjGetterIdentifier) === null || _self$jestObjGetterId === void 0 ? void 0 : _self$jestObjGetterId.name)) {\n          const mockStmt = callExpr.getStatementParent();\n\n          if (mockStmt) {\n            const mockStmtParent = mockStmt.parentPath;\n\n            if (mockStmtParent.isBlock()) {\n              const mockStmtNode = mockStmt.node;\n              mockStmt.remove();\n              callsHoistPoint.insertBefore(mockStmtNode);\n            }\n          }\n        }\n      }\n\n      function visitVariableDeclarator(varDecl) {\n        if (hoistedVariables.has(varDecl.node)) {\n          // should be assert function, but it's not. So let's cast below\n          varDecl.parentPath.assertVariableDeclaration();\n          const {\n            kind,\n            declarations\n          } = varDecl.parent;\n\n          if (declarations.length === 1) {\n            varDecl.parentPath.remove();\n          } else {\n            varDecl.remove();\n          }\n\n          varsHoistPoint.insertBefore((0, _types().variableDeclaration)(kind, [varDecl.node]));\n        }\n      }\n    }\n  }\n\n});\n/* eslint-enable */\n\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/babel-plugin-jest-hoist/build/index.js"],"names":["Object","defineProperty","exports","value","default","_template","data","require","_types","JEST_GLOBAL_NAME","JEST_GLOBALS_MODULE_NAME","JEST_GLOBALS_MODULE_JEST_EXPORT_NAME","hoistedVariables","WeakSet","ALLOWED_IDENTIFIERS","Set","getOwnPropertyNames","global","sort","IDVisitor","ReferencedIdentifier","path","ids","add","blacklist","FUNCTIONS","create","mock","args","length","isStringLiteral","isLiteral","moduleFactory","isFunction","buildCodeFrameError","TypeError","parentScope","parentPath","scope","traverse","id","name","node","found","bindings","parent","isAllowedIdentifier","hasGlobal","has","test","binding","isVariableDeclarator","initNode","init","constant","isPure","Array","from","join","ReferenceError","unmock","deepUnmock","disableAutomock","enableAutomock","createJestObjectGetter","statement","isJestObject","expression","isIdentifier","hasBinding","referencesImport","isMemberExpression","computed","get","property","type","extractJestObjExprIfHoistable","expr","_FUNCTIONS$propertyNa","isCallExpression","callee","object","propertyName","jestObjExpr","functionLooksHoistable","call","_default","pre","program","declareJestObjGetterIdentifier","jestObjGetterIdentifier","generateUidIdentifier","unshiftContainer","GETTER_NAME","visitor","ExpressionStatement","exprStmt","replaceWith","callExpression","post","self","visitBlock","BlockStatement","block","varsHoistPoint","callsHoistPoint","emptyStatement","CallExpression","visitCallExpr","VariableDeclarator","visitVariableDeclarator","remove","callExpr","_self$jestObjGetterId","mockStmt","getStatementParent","mockStmtParent","isBlock","mockStmtNode","insertBefore","varDecl","assertVariableDeclaration","kind","declarations","variableDeclaration"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _template() {\n  const data = require('@babel/template');\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('@babel/types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst JEST_GLOBAL_NAME = 'jest';\nconst JEST_GLOBALS_MODULE_NAME = '@jest/globals';\nconst JEST_GLOBALS_MODULE_JEST_EXPORT_NAME = 'jest';\nconst hoistedVariables = new WeakSet(); // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst ALLOWED_IDENTIFIERS = new Set(\n  [\n    'Array',\n    'ArrayBuffer',\n    'Boolean',\n    'BigInt',\n    'DataView',\n    'Date',\n    'Error',\n    'EvalError',\n    'Float32Array',\n    'Float64Array',\n    'Function',\n    'Generator',\n    'GeneratorFunction',\n    'Infinity',\n    'Int16Array',\n    'Int32Array',\n    'Int8Array',\n    'InternalError',\n    'Intl',\n    'JSON',\n    'Map',\n    'Math',\n    'NaN',\n    'Number',\n    'Object',\n    'Promise',\n    'Proxy',\n    'RangeError',\n    'ReferenceError',\n    'Reflect',\n    'RegExp',\n    'Set',\n    'String',\n    'Symbol',\n    'SyntaxError',\n    'TypeError',\n    'URIError',\n    'Uint16Array',\n    'Uint32Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'WeakMap',\n    'WeakSet',\n    'arguments',\n    'console',\n    'expect',\n    'isNaN',\n    'jest',\n    'parseFloat',\n    'parseInt',\n    'require',\n    'undefined',\n    ...Object.getOwnPropertyNames(global)\n  ].sort()\n);\nconst IDVisitor = {\n  ReferencedIdentifier(path, {ids}) {\n    ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n\n    if (!moduleFactory.isFunction()) {\n      throw moduleFactory.buildCodeFrameError(\n        'The second argument of `jest.mock` must be an inline function.\\n',\n        TypeError\n      );\n    }\n\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-expect-error: ReferencedIdentifier and blacklist are not known on visitors\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n\n    for (const id of ids) {\n      const {name} = id.node;\n      let found = false;\n      let scope = id.scope;\n\n      while (scope !== parentScope) {\n        if (scope.bindings[name]) {\n          found = true;\n          break;\n        }\n\n        scope = scope.parent;\n      }\n\n      if (!found) {\n        let isAllowedIdentifier =\n          (scope.hasGlobal(name) && ALLOWED_IDENTIFIERS.has(name)) ||\n          /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n          /^(?:__)?cov/.test(name);\n\n        if (!isAllowedIdentifier) {\n          const binding = scope.bindings[name];\n\n          if (\n            binding === null || binding === void 0\n              ? void 0\n              : binding.path.isVariableDeclarator()\n          ) {\n            const {node} = binding.path;\n            const initNode = node.init;\n\n            if (initNode && binding.constant && scope.isPure(initNode, true)) {\n              hoistedVariables.add(node);\n              isAllowedIdentifier = true;\n            }\n          }\n        }\n\n        if (!isAllowedIdentifier) {\n          throw id.buildCodeFrameError(\n            'The module factory of `jest.mock()` is not allowed to ' +\n              'reference any out-of-scope variables.\\n' +\n              'Invalid variable access: ' +\n              name +\n              '\\n' +\n              'Allowed objects: ' +\n              Array.from(ALLOWED_IDENTIFIERS).join(', ') +\n              '.\\n' +\n              'Note: This is a precaution to guard against uninitialized mock ' +\n              'variables. If it is ensured that the mock is required lazily, ' +\n              'variable names prefixed with `mock` (case insensitive) are permitted.\\n',\n            ReferenceError\n          );\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args =>\n  args.length === 0;\n\nconst createJestObjectGetter = (0, _template().statement)`\nfunction GETTER_NAME() {\n  const { JEST_GLOBALS_MODULE_JEST_EXPORT_NAME } = require(\"JEST_GLOBALS_MODULE_NAME\");\n  GETTER_NAME = () => JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n  return JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n}\n`;\n\nconst isJestObject = expression => {\n  // global\n  if (\n    expression.isIdentifier() &&\n    expression.node.name === JEST_GLOBAL_NAME &&\n    !expression.scope.hasBinding(JEST_GLOBAL_NAME)\n  ) {\n    return true;\n  } // import { jest } from '@jest/globals'\n\n  if (\n    expression.referencesImport(\n      JEST_GLOBALS_MODULE_NAME,\n      JEST_GLOBALS_MODULE_JEST_EXPORT_NAME\n    )\n  ) {\n    return true;\n  } // import * as JestGlobals from '@jest/globals'\n\n  if (\n    expression.isMemberExpression() &&\n    !expression.node.computed &&\n    expression.get('object').referencesImport(JEST_GLOBALS_MODULE_NAME, '*') &&\n    expression.node.property.type === 'Identifier' &&\n    expression.node.property.name === JEST_GLOBALS_MODULE_JEST_EXPORT_NAME\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst extractJestObjExprIfHoistable = expr => {\n  var _FUNCTIONS$propertyNa;\n\n  if (!expr.isCallExpression()) {\n    return null;\n  }\n\n  const callee = expr.get('callee');\n  const args = expr.get('arguments');\n\n  if (!callee.isMemberExpression() || callee.node.computed) {\n    return null;\n  }\n\n  const object = callee.get('object');\n  const property = callee.get('property');\n  const propertyName = property.node.name;\n  const jestObjExpr = isJestObject(object)\n    ? object // The Jest object could be returned from another call since the functions are all chainable.\n    : extractJestObjExprIfHoistable(object);\n\n  if (!jestObjExpr) {\n    return null;\n  } // Important: Call the function check last\n  // It might throw an error to display to the user,\n  // which should only happen if we're already sure it's a call on the Jest object.\n\n  const functionLooksHoistable =\n    (_FUNCTIONS$propertyNa = FUNCTIONS[propertyName]) === null ||\n    _FUNCTIONS$propertyNa === void 0\n      ? void 0\n      : _FUNCTIONS$propertyNa.call(FUNCTIONS, args);\n  return functionLooksHoistable ? jestObjExpr : null;\n};\n/* eslint-disable sort-keys */\n\nvar _default = () => ({\n  pre({path: program}) {\n    this.declareJestObjGetterIdentifier = () => {\n      if (this.jestObjGetterIdentifier) {\n        return this.jestObjGetterIdentifier;\n      }\n\n      this.jestObjGetterIdentifier = program.scope.generateUidIdentifier(\n        'getJestObj'\n      );\n      program.unshiftContainer('body', [\n        createJestObjectGetter({\n          GETTER_NAME: this.jestObjGetterIdentifier.name,\n          JEST_GLOBALS_MODULE_JEST_EXPORT_NAME,\n          JEST_GLOBALS_MODULE_NAME\n        })\n      ]);\n      return this.jestObjGetterIdentifier;\n    };\n  },\n\n  visitor: {\n    ExpressionStatement(exprStmt) {\n      const jestObjExpr = extractJestObjExprIfHoistable(\n        exprStmt.get('expression')\n      );\n\n      if (jestObjExpr) {\n        jestObjExpr.replaceWith(\n          (0, _types().callExpression)(\n            this.declareJestObjGetterIdentifier(),\n            []\n          )\n        );\n      }\n    }\n  },\n\n  // in `post` to make sure we come after an import transform and can unshift above the `require`s\n  post({path: program}) {\n    const self = this;\n    visitBlock(program);\n    program.traverse({\n      BlockStatement: visitBlock\n    });\n\n    function visitBlock(block) {\n      // use a temporary empty statement instead of the real first statement, which may itself be hoisted\n      const [varsHoistPoint, callsHoistPoint] = block.unshiftContainer('body', [\n        (0, _types().emptyStatement)(),\n        (0, _types().emptyStatement)()\n      ]);\n      block.traverse({\n        CallExpression: visitCallExpr,\n        VariableDeclarator: visitVariableDeclarator,\n        // do not traverse into nested blocks, or we'll hoist calls in there out to this block\n        // @ts-expect-error blacklist is not known\n        blacklist: ['BlockStatement']\n      });\n      callsHoistPoint.remove();\n      varsHoistPoint.remove();\n\n      function visitCallExpr(callExpr) {\n        var _self$jestObjGetterId;\n\n        const {\n          node: {callee}\n        } = callExpr;\n\n        if (\n          (0, _types().isIdentifier)(callee) &&\n          callee.name ===\n            ((_self$jestObjGetterId = self.jestObjGetterIdentifier) === null ||\n            _self$jestObjGetterId === void 0\n              ? void 0\n              : _self$jestObjGetterId.name)\n        ) {\n          const mockStmt = callExpr.getStatementParent();\n\n          if (mockStmt) {\n            const mockStmtParent = mockStmt.parentPath;\n\n            if (mockStmtParent.isBlock()) {\n              const mockStmtNode = mockStmt.node;\n              mockStmt.remove();\n              callsHoistPoint.insertBefore(mockStmtNode);\n            }\n          }\n        }\n      }\n\n      function visitVariableDeclarator(varDecl) {\n        if (hoistedVariables.has(varDecl.node)) {\n          // should be assert function, but it's not. So let's cast below\n          varDecl.parentPath.assertVariableDeclaration();\n          const {kind, declarations} = varDecl.parent;\n\n          if (declarations.length === 1) {\n            varDecl.parentPath.remove();\n          } else {\n            varDecl.remove();\n          }\n\n          varsHoistPoint.insertBefore(\n            (0, _types().variableDeclaration)(kind, [varDecl.node])\n          );\n        }\n      }\n    }\n  }\n});\n/* eslint-enable */\n\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}