{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst {\n  promisify\n} = require('util');\n\nconst glob = promisify(require('glob'));\n\nconst minimatch = require('minimatch');\n\nconst {\n  defaults\n} = require('@istanbuljs/schema');\n\nconst isOutsideDir = require('./is-outside-dir');\n\nclass TestExclude {\n  constructor(opts = {}) {\n    Object.assign(this, {\n      relativePath: true\n    }, defaults.testExclude);\n\n    for (const [name, value] of Object.entries(opts)) {\n      if (value !== undefined) {\n        this[name] = value;\n      }\n    }\n\n    if (typeof this.include === 'string') {\n      this.include = [this.include];\n    }\n\n    if (typeof this.exclude === 'string') {\n      this.exclude = [this.exclude];\n    }\n\n    if (typeof this.extension === 'string') {\n      this.extension = [this.extension];\n    } else if (this.extension.length === 0) {\n      this.extension = false;\n    }\n\n    if (this.include && this.include.length > 0) {\n      this.include = prepGlobPatterns([].concat(this.include));\n    } else {\n      this.include = false;\n    }\n\n    if (this.excludeNodeModules && !this.exclude.includes('**/node_modules/**')) {\n      this.exclude = this.exclude.concat('**/node_modules/**');\n    }\n\n    this.exclude = prepGlobPatterns([].concat(this.exclude));\n    this.handleNegation();\n  }\n  /* handle the special case of negative globs\n   * (!**foo/bar); we create a new this.excludeNegated set\n   * of rules, which is applied after excludes and we\n   * move excluded include rules into this.excludes.\n   */\n\n\n  handleNegation() {\n    const noNeg = e => e.charAt(0) !== '!';\n\n    const onlyNeg = e => e.charAt(0) === '!';\n\n    const stripNeg = e => e.slice(1);\n\n    if (Array.isArray(this.include)) {\n      const includeNegated = this.include.filter(onlyNeg).map(stripNeg);\n      this.exclude.push(...prepGlobPatterns(includeNegated));\n      this.include = this.include.filter(noNeg);\n    }\n\n    this.excludeNegated = this.exclude.filter(onlyNeg).map(stripNeg);\n    this.exclude = this.exclude.filter(noNeg);\n    this.excludeNegated = prepGlobPatterns(this.excludeNegated);\n  }\n\n  shouldInstrument(filename, relFile) {\n    if (this.extension && !this.extension.some(ext => filename.endsWith(ext))) {\n      return false;\n    }\n\n    let pathToCheck = filename;\n\n    if (this.relativePath) {\n      relFile = relFile || path.relative(this.cwd, filename); // Don't instrument files that are outside of the current working directory.\n\n      if (isOutsideDir(this.cwd, filename)) {\n        return false;\n      }\n\n      pathToCheck = relFile.replace(/^\\.[\\\\/]/, ''); // remove leading './' or '.\\'.\n    }\n\n    const dot = {\n      dot: true\n    };\n\n    const matches = pattern => minimatch(pathToCheck, pattern, dot);\n\n    return (!this.include || this.include.some(matches)) && (!this.exclude.some(matches) || this.excludeNegated.some(matches));\n  }\n\n  globSync(cwd = this.cwd) {\n    const globPatterns = getExtensionPattern(this.extension || []);\n    const globOptions = {\n      cwd,\n      nodir: true,\n      dot: true\n    };\n    /* If we don't have any excludeNegated then we can optimize glob by telling\n     * it to not iterate into unwanted directory trees (like node_modules). */\n\n    if (this.excludeNegated.length === 0) {\n      globOptions.ignore = this.exclude;\n    }\n\n    return glob.sync(globPatterns, globOptions).filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n  }\n\n  async glob(cwd = this.cwd) {\n    const globPatterns = getExtensionPattern(this.extension || []);\n    const globOptions = {\n      cwd,\n      nodir: true,\n      dot: true\n    };\n    /* If we don't have any excludeNegated then we can optimize glob by telling\n     * it to not iterate into unwanted directory trees (like node_modules). */\n\n    if (this.excludeNegated.length === 0) {\n      globOptions.ignore = this.exclude;\n    }\n\n    const list = await glob(globPatterns, globOptions);\n    return list.filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n  }\n\n}\n\nfunction prepGlobPatterns(patterns) {\n  return patterns.reduce((result, pattern) => {\n    // Allow gitignore style of directory exclusion\n    if (!/\\/\\*\\*$/.test(pattern)) {\n      result = result.concat(pattern.replace(/\\/$/, '') + '/**');\n    } // Any rules of the form **/foo.js, should also match foo.js.\n\n\n    if (/^\\*\\*\\//.test(pattern)) {\n      result = result.concat(pattern.replace(/^\\*\\*\\//, ''));\n    }\n\n    return result.concat(pattern);\n  }, []);\n}\n\nfunction getExtensionPattern(extension) {\n  switch (extension.length) {\n    case 0:\n      return '**';\n\n    case 1:\n      return `**/*${extension[0]}`;\n\n    default:\n      return `**/*{${extension.join()}}`;\n  }\n}\n\nmodule.exports = TestExclude;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/test-exclude/index.js"],"names":["path","require","promisify","glob","minimatch","defaults","isOutsideDir","TestExclude","constructor","opts","Object","assign","relativePath","testExclude","name","value","entries","undefined","include","exclude","extension","length","prepGlobPatterns","concat","excludeNodeModules","includes","handleNegation","noNeg","e","charAt","onlyNeg","stripNeg","slice","Array","isArray","includeNegated","filter","map","push","excludeNegated","shouldInstrument","filename","relFile","some","ext","endsWith","pathToCheck","relative","cwd","replace","dot","matches","pattern","globSync","globPatterns","getExtensionPattern","globOptions","nodir","ignore","sync","file","resolve","list","patterns","reduce","result","test","join","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { promisify } = require('util');\nconst glob = promisify(require('glob'));\nconst minimatch = require('minimatch');\nconst { defaults } = require('@istanbuljs/schema');\nconst isOutsideDir = require('./is-outside-dir');\n\nclass TestExclude {\n    constructor(opts = {}) {\n        Object.assign(\n            this,\n            {relativePath: true},\n            defaults.testExclude\n        );\n\n        for (const [name, value] of Object.entries(opts)) {\n            if (value !== undefined) {\n                this[name] = value;\n            }\n        }\n\n        if (typeof this.include === 'string') {\n            this.include = [this.include];\n        }\n\n        if (typeof this.exclude === 'string') {\n            this.exclude = [this.exclude];\n        }\n\n        if (typeof this.extension === 'string') {\n            this.extension = [this.extension];\n        } else if (this.extension.length === 0) {\n            this.extension = false;\n        }\n\n        if (this.include && this.include.length > 0) {\n            this.include = prepGlobPatterns([].concat(this.include));\n        } else {\n            this.include = false;\n        }\n\n        if (\n            this.excludeNodeModules &&\n            !this.exclude.includes('**/node_modules/**')\n        ) {\n            this.exclude = this.exclude.concat('**/node_modules/**');\n        }\n\n        this.exclude = prepGlobPatterns([].concat(this.exclude));\n\n        this.handleNegation();\n    }\n\n    /* handle the special case of negative globs\n     * (!**foo/bar); we create a new this.excludeNegated set\n     * of rules, which is applied after excludes and we\n     * move excluded include rules into this.excludes.\n     */\n    handleNegation() {\n        const noNeg = e => e.charAt(0) !== '!';\n        const onlyNeg = e => e.charAt(0) === '!';\n        const stripNeg = e => e.slice(1);\n\n        if (Array.isArray(this.include)) {\n            const includeNegated = this.include.filter(onlyNeg).map(stripNeg);\n            this.exclude.push(...prepGlobPatterns(includeNegated));\n            this.include = this.include.filter(noNeg);\n        }\n\n        this.excludeNegated = this.exclude.filter(onlyNeg).map(stripNeg);\n        this.exclude = this.exclude.filter(noNeg);\n        this.excludeNegated = prepGlobPatterns(this.excludeNegated);\n    }\n\n    shouldInstrument(filename, relFile) {\n        if (\n            this.extension &&\n            !this.extension.some(ext => filename.endsWith(ext))\n        ) {\n            return false;\n        }\n\n        let pathToCheck = filename;\n\n        if (this.relativePath) {\n            relFile = relFile || path.relative(this.cwd, filename);\n\n            // Don't instrument files that are outside of the current working directory.\n            if (isOutsideDir(this.cwd, filename)) {\n                return false;\n            }\n\n            pathToCheck = relFile.replace(/^\\.[\\\\/]/, ''); // remove leading './' or '.\\'.\n        }\n\n        const dot = { dot: true };\n        const matches = pattern => minimatch(pathToCheck, pattern, dot);\n        return (\n            (!this.include || this.include.some(matches)) &&\n            (!this.exclude.some(matches) || this.excludeNegated.some(matches))\n        );\n    }\n\n    globSync(cwd = this.cwd) {\n        const globPatterns = getExtensionPattern(this.extension || []);\n        const globOptions = { cwd, nodir: true, dot: true };\n        /* If we don't have any excludeNegated then we can optimize glob by telling\n         * it to not iterate into unwanted directory trees (like node_modules). */\n        if (this.excludeNegated.length === 0) {\n            globOptions.ignore = this.exclude;\n        }\n\n        return glob\n            .sync(globPatterns, globOptions)\n            .filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n    }\n\n    async glob(cwd = this.cwd) {\n        const globPatterns = getExtensionPattern(this.extension || []);\n        const globOptions = { cwd, nodir: true, dot: true };\n        /* If we don't have any excludeNegated then we can optimize glob by telling\n         * it to not iterate into unwanted directory trees (like node_modules). */\n        if (this.excludeNegated.length === 0) {\n            globOptions.ignore = this.exclude;\n        }\n\n        const list = await glob(globPatterns, globOptions);\n        return list.filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n    }\n}\n\nfunction prepGlobPatterns(patterns) {\n    return patterns.reduce((result, pattern) => {\n        // Allow gitignore style of directory exclusion\n        if (!/\\/\\*\\*$/.test(pattern)) {\n            result = result.concat(pattern.replace(/\\/$/, '') + '/**');\n        }\n\n        // Any rules of the form **/foo.js, should also match foo.js.\n        if (/^\\*\\*\\//.test(pattern)) {\n            result = result.concat(pattern.replace(/^\\*\\*\\//, ''));\n        }\n\n        return result.concat(pattern);\n    }, []);\n}\n\nfunction getExtensionPattern(extension) {\n    switch (extension.length) {\n        case 0:\n            return '**';\n        case 1:\n            return `**/*${extension[0]}`;\n        default:\n            return `**/*{${extension.join()}}`;\n    }\n}\n\nmodule.exports = TestExclude;\n"]},"metadata":{},"sourceType":"script"}