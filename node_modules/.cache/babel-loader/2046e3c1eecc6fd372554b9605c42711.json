{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printSnapshotAndReceived = exports.printPropertiesAndReceived = exports.printReceived = exports.printExpected = exports.matcherHintFromConfig = exports.PROPERTIES_ARG = exports.SNAPSHOT_ARG = exports.HINT_ARG = exports.noColor = exports.bReceivedColor = exports.aSnapshotColor = exports.getReceivedColorForChalkInstance = exports.getSnapshotColorForChalkInstance = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _utils = require('expect/build/utils');\n\nvar _jestDiff = require('jest-diff');\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _colors = require('./colors');\n\nvar _dedentLines = require('./dedentLines');\n\nvar _utils2 = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\n// Temporary hack because getObjectSubset has known limitations,\n// is not in the public interface of the expect package,\n// and the long-term goal is to use a non-serialization diff.\n\n\nconst getSnapshotColorForChalkInstance = chalkInstance => {\n  const level = chalkInstance.level;\n\n  if (level === 3) {\n    return chalkInstance.rgb(_colors.aForeground3[0], _colors.aForeground3[1], _colors.aForeground3[2]).bgRgb(_colors.aBackground3[0], _colors.aBackground3[1], _colors.aBackground3[2]);\n  }\n\n  if (level === 2) {\n    return chalkInstance.ansi256(_colors.aForeground2).bgAnsi256(_colors.aBackground2);\n  }\n\n  return chalkInstance.magenta.bgYellowBright;\n};\n\nexports.getSnapshotColorForChalkInstance = getSnapshotColorForChalkInstance;\n\nconst getReceivedColorForChalkInstance = chalkInstance => {\n  const level = chalkInstance.level;\n\n  if (level === 3) {\n    return chalkInstance.rgb(_colors.bForeground3[0], _colors.bForeground3[1], _colors.bForeground3[2]).bgRgb(_colors.bBackground3[0], _colors.bBackground3[1], _colors.bBackground3[2]);\n  }\n\n  if (level === 2) {\n    return chalkInstance.ansi256(_colors.bForeground2).bgAnsi256(_colors.bBackground2);\n  }\n\n  return chalkInstance.cyan.bgWhiteBright; // also known as teal\n};\n\nexports.getReceivedColorForChalkInstance = getReceivedColorForChalkInstance;\nconst aSnapshotColor = getSnapshotColorForChalkInstance(_chalk.default);\nexports.aSnapshotColor = aSnapshotColor;\nconst bReceivedColor = getReceivedColorForChalkInstance(_chalk.default);\nexports.bReceivedColor = bReceivedColor;\n\nconst noColor = string => string;\n\nexports.noColor = noColor;\nconst HINT_ARG = 'hint';\nexports.HINT_ARG = HINT_ARG;\nconst SNAPSHOT_ARG = 'snapshot';\nexports.SNAPSHOT_ARG = SNAPSHOT_ARG;\nconst PROPERTIES_ARG = 'properties';\nexports.PROPERTIES_ARG = PROPERTIES_ARG;\n\nconst matcherHintFromConfig = ({\n  context: {\n    isNot,\n    promise\n  },\n  hint,\n  inlineSnapshot,\n  matcherName,\n  properties\n}, isUpdatable) => {\n  const options = {\n    isNot,\n    promise\n  };\n\n  if (isUpdatable) {\n    options.receivedColor = bReceivedColor;\n  }\n\n  let expectedArgument = '';\n\n  if (typeof properties === 'object') {\n    expectedArgument = PROPERTIES_ARG;\n\n    if (isUpdatable) {\n      options.expectedColor = noColor;\n    }\n\n    if (typeof hint === 'string' && hint.length !== 0) {\n      options.secondArgument = HINT_ARG;\n      options.secondArgumentColor = _jestMatcherUtils.BOLD_WEIGHT;\n    } else if (typeof inlineSnapshot === 'string') {\n      options.secondArgument = SNAPSHOT_ARG;\n\n      if (isUpdatable) {\n        options.secondArgumentColor = aSnapshotColor;\n      } else {\n        options.secondArgumentColor = noColor;\n      }\n    }\n  } else {\n    if (typeof hint === 'string' && hint.length !== 0) {\n      expectedArgument = HINT_ARG;\n      options.expectedColor = _jestMatcherUtils.BOLD_WEIGHT;\n    } else if (typeof inlineSnapshot === 'string') {\n      expectedArgument = SNAPSHOT_ARG;\n\n      if (isUpdatable) {\n        options.expectedColor = aSnapshotColor;\n      }\n    }\n  }\n\n  return (0, _jestMatcherUtils.matcherHint)(matcherName, undefined, expectedArgument, options);\n}; // Given array of diffs, return string:\n// * include common substrings\n// * exclude change substrings which have opposite op\n// * include change substrings which have argument op\n//   with change color only if there is a common substring\n\n\nexports.matcherHintFromConfig = matcherHintFromConfig;\n\nconst joinDiffs = (diffs, op, hasCommon) => diffs.reduce((reduced, diff) => reduced + (diff[0] === _jestDiff.DIFF_EQUAL ? diff[1] : diff[0] !== op ? '' : hasCommon ? (0, _jestMatcherUtils.INVERTED_COLOR)(diff[1]) : diff[1]), '');\n\nconst isLineDiffable = received => {\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (_jestGetType.default.isPrimitive(received)) {\n    return typeof received === 'string';\n  }\n\n  if (receivedType === 'date' || receivedType === 'function' || receivedType === 'regexp') {\n    return false;\n  }\n\n  if (received instanceof Error) {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst printExpected = val => (0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utils2.minify)(val));\n\nexports.printExpected = printExpected;\n\nconst printReceived = val => (0, _jestMatcherUtils.RECEIVED_COLOR)((0, _utils2.minify)(val));\n\nexports.printReceived = printReceived;\n\nconst printPropertiesAndReceived = (properties, received, expand) => {\n  const aAnnotation = 'Expected properties';\n  const bAnnotation = 'Received value';\n\n  if (isLineDiffable(properties) && isLineDiffable(received)) {\n    return (0, _jestDiff.diffLinesUnified)((0, _utils2.serialize)(properties).split('\\n'), (0, _utils2.serialize)((0, _utils.getObjectSubset)(received, properties)).split('\\n'), {\n      aAnnotation,\n      aColor: _jestMatcherUtils.EXPECTED_COLOR,\n      bAnnotation,\n      bColor: _jestMatcherUtils.RECEIVED_COLOR,\n      changeLineTrailingSpaceColor: _chalk.default.bgYellow,\n      commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n      emptyFirstOrLastLinePlaceholder: '↵',\n      // U+21B5\n      expand,\n      includeChangeCounts: true\n    });\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(aAnnotation, bAnnotation);\n  return printLabel(aAnnotation) + printExpected(properties) + '\\n' + printLabel(bAnnotation) + printReceived(received);\n};\n\nexports.printPropertiesAndReceived = printPropertiesAndReceived;\nconst MAX_DIFF_STRING_LENGTH = 20000;\n\nconst printSnapshotAndReceived = (a, b, received, expand) => {\n  const aAnnotation = 'Snapshot';\n  const bAnnotation = 'Received';\n  const aColor = aSnapshotColor;\n  const bColor = bReceivedColor;\n  const options = {\n    aAnnotation,\n    aColor,\n    bAnnotation,\n    bColor,\n    changeLineTrailingSpaceColor: noColor,\n    commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n    emptyFirstOrLastLinePlaceholder: '↵',\n    // U+21B5\n    expand,\n    includeChangeCounts: true\n  };\n\n  if (typeof received === 'string') {\n    if (a.length >= 2 && a.startsWith('\"') && a.endsWith('\"') && b === (0, _prettyFormat.default)(received)) {\n      // If snapshot looks like default serialization of a string\n      // and received is string which has default serialization.\n      if (!a.includes('\\n') && !b.includes('\\n')) {\n        // If neither string is multiline,\n        // display as labels and quoted strings.\n        let aQuoted = a;\n        let bQuoted = b;\n\n        if (a.length - 2 <= MAX_DIFF_STRING_LENGTH && b.length - 2 <= MAX_DIFF_STRING_LENGTH) {\n          const diffs = (0, _jestDiff.diffStringsRaw)(a.slice(1, -1), b.slice(1, -1), true);\n          const hasCommon = diffs.some(diff => diff[0] === _jestDiff.DIFF_EQUAL);\n          aQuoted = '\"' + joinDiffs(diffs, _jestDiff.DIFF_DELETE, hasCommon) + '\"';\n          bQuoted = '\"' + joinDiffs(diffs, _jestDiff.DIFF_INSERT, hasCommon) + '\"';\n        }\n\n        const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(aAnnotation, bAnnotation);\n        return printLabel(aAnnotation) + aColor(aQuoted) + '\\n' + printLabel(bAnnotation) + bColor(bQuoted);\n      } // Else either string is multiline, so display as unquoted strings.\n\n\n      a = (0, _utils2.deserializeString)(a); //  hypothetical expected string\n\n      b = received; // not serialized\n    } // Else expected had custom serialization or was not a string\n    // or received has custom serialization.\n\n\n    return a.length <= MAX_DIFF_STRING_LENGTH && b.length <= MAX_DIFF_STRING_LENGTH ? (0, _jestDiff.diffStringsUnified)(a, b, options) : (0, _jestDiff.diffLinesUnified)(a.split('\\n'), b.split('\\n'), options);\n  }\n\n  if (isLineDiffable(received)) {\n    const aLines2 = a.split('\\n');\n    const bLines2 = b.split('\\n'); // Fall through to fix a regression for custom serializers\n    // like jest-snapshot-serializer-raw that ignore the indent option.\n\n    const b0 = (0, _utils2.serialize)(received, 0);\n\n    if (b0 !== b) {\n      const aLines0 = (0, _dedentLines.dedentLines)(aLines2);\n\n      if (aLines0 !== null) {\n        // Compare lines without indentation.\n        const bLines0 = b0.split('\\n');\n        return (0, _jestDiff.diffLinesUnified2)(aLines2, bLines2, aLines0, bLines0, options);\n      }\n    } // Fall back because:\n    // * props include a multiline string\n    // * text has more than one adjacent line\n    // * markup does not close\n\n\n    return (0, _jestDiff.diffLinesUnified)(aLines2, bLines2, options);\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(aAnnotation, bAnnotation);\n  return printLabel(aAnnotation) + aColor(a) + '\\n' + printLabel(bAnnotation) + bColor(b);\n};\n\nexports.printSnapshotAndReceived = printSnapshotAndReceived;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-snapshot/build/printSnapshot.js"],"names":["Object","defineProperty","exports","value","printSnapshotAndReceived","printPropertiesAndReceived","printReceived","printExpected","matcherHintFromConfig","PROPERTIES_ARG","SNAPSHOT_ARG","HINT_ARG","noColor","bReceivedColor","aSnapshotColor","getReceivedColorForChalkInstance","getSnapshotColorForChalkInstance","_chalk","_interopRequireDefault","require","_utils","_jestDiff","_jestGetType","_jestMatcherUtils","_prettyFormat","_colors","_dedentLines","_utils2","obj","__esModule","default","chalkInstance","level","rgb","aForeground3","bgRgb","aBackground3","ansi256","aForeground2","bgAnsi256","aBackground2","magenta","bgYellowBright","bForeground3","bBackground3","bForeground2","bBackground2","cyan","bgWhiteBright","string","context","isNot","promise","hint","inlineSnapshot","matcherName","properties","isUpdatable","options","receivedColor","expectedArgument","expectedColor","length","secondArgument","secondArgumentColor","BOLD_WEIGHT","matcherHint","undefined","joinDiffs","diffs","op","hasCommon","reduce","reduced","diff","DIFF_EQUAL","INVERTED_COLOR","isLineDiffable","received","receivedType","isPrimitive","Error","asymmetricMatch","val","EXPECTED_COLOR","minify","RECEIVED_COLOR","expand","aAnnotation","bAnnotation","diffLinesUnified","serialize","split","getObjectSubset","aColor","bColor","changeLineTrailingSpaceColor","bgYellow","commonLineTrailingSpaceColor","emptyFirstOrLastLinePlaceholder","includeChangeCounts","printLabel","getLabelPrinter","MAX_DIFF_STRING_LENGTH","a","b","startsWith","endsWith","includes","aQuoted","bQuoted","diffStringsRaw","slice","some","DIFF_DELETE","DIFF_INSERT","deserializeString","diffStringsUnified","aLines2","bLines2","b0","aLines0","dedentLines","bLines0","diffLinesUnified2"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printSnapshotAndReceived = exports.printPropertiesAndReceived = exports.printReceived = exports.printExpected = exports.matcherHintFromConfig = exports.PROPERTIES_ARG = exports.SNAPSHOT_ARG = exports.HINT_ARG = exports.noColor = exports.bReceivedColor = exports.aSnapshotColor = exports.getReceivedColorForChalkInstance = exports.getSnapshotColorForChalkInstance = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _utils = require('expect/build/utils');\n\nvar _jestDiff = require('jest-diff');\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _prettyFormat = _interopRequireDefault(require('pretty-format'));\n\nvar _colors = require('./colors');\n\nvar _dedentLines = require('./dedentLines');\n\nvar _utils2 = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\n// Temporary hack because getObjectSubset has known limitations,\n// is not in the public interface of the expect package,\n// and the long-term goal is to use a non-serialization diff.\nconst getSnapshotColorForChalkInstance = chalkInstance => {\n  const level = chalkInstance.level;\n\n  if (level === 3) {\n    return chalkInstance\n      .rgb(\n        _colors.aForeground3[0],\n        _colors.aForeground3[1],\n        _colors.aForeground3[2]\n      )\n      .bgRgb(\n        _colors.aBackground3[0],\n        _colors.aBackground3[1],\n        _colors.aBackground3[2]\n      );\n  }\n\n  if (level === 2) {\n    return chalkInstance\n      .ansi256(_colors.aForeground2)\n      .bgAnsi256(_colors.aBackground2);\n  }\n\n  return chalkInstance.magenta.bgYellowBright;\n};\n\nexports.getSnapshotColorForChalkInstance = getSnapshotColorForChalkInstance;\n\nconst getReceivedColorForChalkInstance = chalkInstance => {\n  const level = chalkInstance.level;\n\n  if (level === 3) {\n    return chalkInstance\n      .rgb(\n        _colors.bForeground3[0],\n        _colors.bForeground3[1],\n        _colors.bForeground3[2]\n      )\n      .bgRgb(\n        _colors.bBackground3[0],\n        _colors.bBackground3[1],\n        _colors.bBackground3[2]\n      );\n  }\n\n  if (level === 2) {\n    return chalkInstance\n      .ansi256(_colors.bForeground2)\n      .bgAnsi256(_colors.bBackground2);\n  }\n\n  return chalkInstance.cyan.bgWhiteBright; // also known as teal\n};\n\nexports.getReceivedColorForChalkInstance = getReceivedColorForChalkInstance;\nconst aSnapshotColor = getSnapshotColorForChalkInstance(_chalk.default);\nexports.aSnapshotColor = aSnapshotColor;\nconst bReceivedColor = getReceivedColorForChalkInstance(_chalk.default);\nexports.bReceivedColor = bReceivedColor;\n\nconst noColor = string => string;\n\nexports.noColor = noColor;\nconst HINT_ARG = 'hint';\nexports.HINT_ARG = HINT_ARG;\nconst SNAPSHOT_ARG = 'snapshot';\nexports.SNAPSHOT_ARG = SNAPSHOT_ARG;\nconst PROPERTIES_ARG = 'properties';\nexports.PROPERTIES_ARG = PROPERTIES_ARG;\n\nconst matcherHintFromConfig = (\n  {context: {isNot, promise}, hint, inlineSnapshot, matcherName, properties},\n  isUpdatable\n) => {\n  const options = {\n    isNot,\n    promise\n  };\n\n  if (isUpdatable) {\n    options.receivedColor = bReceivedColor;\n  }\n\n  let expectedArgument = '';\n\n  if (typeof properties === 'object') {\n    expectedArgument = PROPERTIES_ARG;\n\n    if (isUpdatable) {\n      options.expectedColor = noColor;\n    }\n\n    if (typeof hint === 'string' && hint.length !== 0) {\n      options.secondArgument = HINT_ARG;\n      options.secondArgumentColor = _jestMatcherUtils.BOLD_WEIGHT;\n    } else if (typeof inlineSnapshot === 'string') {\n      options.secondArgument = SNAPSHOT_ARG;\n\n      if (isUpdatable) {\n        options.secondArgumentColor = aSnapshotColor;\n      } else {\n        options.secondArgumentColor = noColor;\n      }\n    }\n  } else {\n    if (typeof hint === 'string' && hint.length !== 0) {\n      expectedArgument = HINT_ARG;\n      options.expectedColor = _jestMatcherUtils.BOLD_WEIGHT;\n    } else if (typeof inlineSnapshot === 'string') {\n      expectedArgument = SNAPSHOT_ARG;\n\n      if (isUpdatable) {\n        options.expectedColor = aSnapshotColor;\n      }\n    }\n  }\n\n  return (0, _jestMatcherUtils.matcherHint)(\n    matcherName,\n    undefined,\n    expectedArgument,\n    options\n  );\n}; // Given array of diffs, return string:\n// * include common substrings\n// * exclude change substrings which have opposite op\n// * include change substrings which have argument op\n//   with change color only if there is a common substring\n\nexports.matcherHintFromConfig = matcherHintFromConfig;\n\nconst joinDiffs = (diffs, op, hasCommon) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _jestDiff.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] !== op\n        ? ''\n        : hasCommon\n        ? (0, _jestMatcherUtils.INVERTED_COLOR)(diff[1])\n        : diff[1]),\n    ''\n  );\n\nconst isLineDiffable = received => {\n  const receivedType = (0, _jestGetType.default)(received);\n\n  if (_jestGetType.default.isPrimitive(received)) {\n    return typeof received === 'string';\n  }\n\n  if (\n    receivedType === 'date' ||\n    receivedType === 'function' ||\n    receivedType === 'regexp'\n  ) {\n    return false;\n  }\n\n  if (received instanceof Error) {\n    return false;\n  }\n\n  if (\n    receivedType === 'object' &&\n    typeof received.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst printExpected = val =>\n  (0, _jestMatcherUtils.EXPECTED_COLOR)((0, _utils2.minify)(val));\n\nexports.printExpected = printExpected;\n\nconst printReceived = val =>\n  (0, _jestMatcherUtils.RECEIVED_COLOR)((0, _utils2.minify)(val));\n\nexports.printReceived = printReceived;\n\nconst printPropertiesAndReceived = (properties, received, expand) => {\n  const aAnnotation = 'Expected properties';\n  const bAnnotation = 'Received value';\n\n  if (isLineDiffable(properties) && isLineDiffable(received)) {\n    return (0, _jestDiff.diffLinesUnified)(\n      (0, _utils2.serialize)(properties).split('\\n'),\n      (0, _utils2.serialize)(\n        (0, _utils.getObjectSubset)(received, properties)\n      ).split('\\n'),\n      {\n        aAnnotation,\n        aColor: _jestMatcherUtils.EXPECTED_COLOR,\n        bAnnotation,\n        bColor: _jestMatcherUtils.RECEIVED_COLOR,\n        changeLineTrailingSpaceColor: _chalk.default.bgYellow,\n        commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n        emptyFirstOrLastLinePlaceholder: '↵',\n        // U+21B5\n        expand,\n        includeChangeCounts: true\n      }\n    );\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(\n    aAnnotation,\n    bAnnotation\n  );\n  return (\n    printLabel(aAnnotation) +\n    printExpected(properties) +\n    '\\n' +\n    printLabel(bAnnotation) +\n    printReceived(received)\n  );\n};\n\nexports.printPropertiesAndReceived = printPropertiesAndReceived;\nconst MAX_DIFF_STRING_LENGTH = 20000;\n\nconst printSnapshotAndReceived = (a, b, received, expand) => {\n  const aAnnotation = 'Snapshot';\n  const bAnnotation = 'Received';\n  const aColor = aSnapshotColor;\n  const bColor = bReceivedColor;\n  const options = {\n    aAnnotation,\n    aColor,\n    bAnnotation,\n    bColor,\n    changeLineTrailingSpaceColor: noColor,\n    commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n    emptyFirstOrLastLinePlaceholder: '↵',\n    // U+21B5\n    expand,\n    includeChangeCounts: true\n  };\n\n  if (typeof received === 'string') {\n    if (\n      a.length >= 2 &&\n      a.startsWith('\"') &&\n      a.endsWith('\"') &&\n      b === (0, _prettyFormat.default)(received)\n    ) {\n      // If snapshot looks like default serialization of a string\n      // and received is string which has default serialization.\n      if (!a.includes('\\n') && !b.includes('\\n')) {\n        // If neither string is multiline,\n        // display as labels and quoted strings.\n        let aQuoted = a;\n        let bQuoted = b;\n\n        if (\n          a.length - 2 <= MAX_DIFF_STRING_LENGTH &&\n          b.length - 2 <= MAX_DIFF_STRING_LENGTH\n        ) {\n          const diffs = (0, _jestDiff.diffStringsRaw)(\n            a.slice(1, -1),\n            b.slice(1, -1),\n            true\n          );\n          const hasCommon = diffs.some(\n            diff => diff[0] === _jestDiff.DIFF_EQUAL\n          );\n          aQuoted =\n            '\"' + joinDiffs(diffs, _jestDiff.DIFF_DELETE, hasCommon) + '\"';\n          bQuoted =\n            '\"' + joinDiffs(diffs, _jestDiff.DIFF_INSERT, hasCommon) + '\"';\n        }\n\n        const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(\n          aAnnotation,\n          bAnnotation\n        );\n        return (\n          printLabel(aAnnotation) +\n          aColor(aQuoted) +\n          '\\n' +\n          printLabel(bAnnotation) +\n          bColor(bQuoted)\n        );\n      } // Else either string is multiline, so display as unquoted strings.\n\n      a = (0, _utils2.deserializeString)(a); //  hypothetical expected string\n\n      b = received; // not serialized\n    } // Else expected had custom serialization or was not a string\n    // or received has custom serialization.\n\n    return a.length <= MAX_DIFF_STRING_LENGTH &&\n      b.length <= MAX_DIFF_STRING_LENGTH\n      ? (0, _jestDiff.diffStringsUnified)(a, b, options)\n      : (0, _jestDiff.diffLinesUnified)(a.split('\\n'), b.split('\\n'), options);\n  }\n\n  if (isLineDiffable(received)) {\n    const aLines2 = a.split('\\n');\n    const bLines2 = b.split('\\n'); // Fall through to fix a regression for custom serializers\n    // like jest-snapshot-serializer-raw that ignore the indent option.\n\n    const b0 = (0, _utils2.serialize)(received, 0);\n\n    if (b0 !== b) {\n      const aLines0 = (0, _dedentLines.dedentLines)(aLines2);\n\n      if (aLines0 !== null) {\n        // Compare lines without indentation.\n        const bLines0 = b0.split('\\n');\n        return (0, _jestDiff.diffLinesUnified2)(\n          aLines2,\n          bLines2,\n          aLines0,\n          bLines0,\n          options\n        );\n      }\n    } // Fall back because:\n    // * props include a multiline string\n    // * text has more than one adjacent line\n    // * markup does not close\n\n    return (0, _jestDiff.diffLinesUnified)(aLines2, bLines2, options);\n  }\n\n  const printLabel = (0, _jestMatcherUtils.getLabelPrinter)(\n    aAnnotation,\n    bAnnotation\n  );\n  return (\n    printLabel(aAnnotation) +\n    aColor(a) +\n    '\\n' +\n    printLabel(bAnnotation) +\n    bColor(b)\n  );\n};\n\nexports.printSnapshotAndReceived = printSnapshotAndReceived;\n"]},"metadata":{},"sourceType":"script"}