{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _testResult = require('@jest/test-result');\n\nvar _jestMessageUtil = require('jest-message-util');\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar jestNow = global[Symbol.for('jest-native-now')] || global.Date.now;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Jasmine2Reporter {\n  constructor(globalConfig, config, testPath) {\n    _defineProperty(this, '_testResults', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_currentSuites', void 0);\n\n    _defineProperty(this, '_resolve', void 0);\n\n    _defineProperty(this, '_resultsPromise', void 0);\n\n    _defineProperty(this, '_startTimes', void 0);\n\n    _defineProperty(this, '_testPath', void 0);\n\n    this._globalConfig = globalConfig;\n    this._config = config;\n    this._testPath = testPath;\n    this._testResults = [];\n    this._currentSuites = [];\n    this._resolve = null;\n    this._resultsPromise = new Promise(resolve => this._resolve = resolve);\n    this._startTimes = new Map();\n  }\n\n  jasmineStarted(_runDetails) {}\n\n  specStarted(spec) {\n    this._startTimes.set(spec.id, jestNow());\n  }\n\n  specDone(result) {\n    this._testResults.push(this._extractSpecResults(result, this._currentSuites.slice(0)));\n  }\n\n  suiteStarted(suite) {\n    this._currentSuites.push(suite.description);\n  }\n\n  suiteDone(_result) {\n    this._currentSuites.pop();\n  }\n\n  jasmineDone(_runDetails) {\n    let numFailingTests = 0;\n    let numPassingTests = 0;\n    let numPendingTests = 0;\n    let numTodoTests = 0;\n    const testResults = this._testResults;\n    testResults.forEach(testResult => {\n      if (testResult.status === 'failed') {\n        numFailingTests++;\n      } else if (testResult.status === 'pending') {\n        numPendingTests++;\n      } else if (testResult.status === 'todo') {\n        numTodoTests++;\n      } else {\n        numPassingTests++;\n      }\n    });\n    const testResult = { ...(0, _testResult.createEmptyTestResult)(),\n      console: null,\n      failureMessage: (0, _jestMessageUtil.formatResultsErrors)(testResults, this._config, this._globalConfig, this._testPath),\n      numFailingTests,\n      numPassingTests,\n      numPendingTests,\n      numTodoTests,\n      snapshot: {\n        added: 0,\n        fileDeleted: false,\n        matched: 0,\n        unchecked: 0,\n        unmatched: 0,\n        updated: 0\n      },\n      testFilePath: this._testPath,\n      testResults\n    };\n\n    this._resolve(testResult);\n  }\n\n  getResults() {\n    return this._resultsPromise;\n  }\n\n  _addMissingMessageToStack(stack, message) {\n    // Some errors (e.g. Angular injection error) don't prepend error.message\n    // to stack, instead the first line of the stack is just plain 'Error'\n    const ERROR_REGEX = /^Error:?\\s*\\n/;\n\n    if (stack && message && !stack.includes(message)) {\n      return message + stack.replace(ERROR_REGEX, '\\n');\n    }\n\n    return stack;\n  }\n\n  _extractSpecResults(specResult, ancestorTitles) {\n    const start = this._startTimes.get(specResult.id);\n\n    const duration = start ? jestNow() - start : undefined;\n    const status = specResult.status === 'disabled' ? 'pending' : specResult.status;\n    const location = specResult.__callsite ? {\n      column: specResult.__callsite.getColumnNumber(),\n      line: specResult.__callsite.getLineNumber()\n    } : null;\n    const results = {\n      ancestorTitles,\n      duration,\n      failureDetails: [],\n      failureMessages: [],\n      fullName: specResult.fullName,\n      location,\n      numPassingAsserts: 0,\n      // Jasmine2 only returns an array of failed asserts.\n      status,\n      title: specResult.description\n    };\n    specResult.failedExpectations.forEach(failed => {\n      const message = !failed.matcherName && typeof failed.stack === 'string' ? this._addMissingMessageToStack(failed.stack, failed.message) : failed.message || '';\n      results.failureMessages.push(message);\n      results.failureDetails.push(failed);\n    });\n    return results;\n  }\n\n}\n\nexports.default = Jasmine2Reporter;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-jasmine2/build/reporter.js"],"names":["Object","defineProperty","exports","value","default","_testResult","require","_jestMessageUtil","Symbol","global","jestNow","for","Date","now","Promise","_defineProperty","obj","key","enumerable","configurable","writable","Jasmine2Reporter","constructor","globalConfig","config","testPath","_globalConfig","_config","_testPath","_testResults","_currentSuites","_resolve","_resultsPromise","resolve","_startTimes","Map","jasmineStarted","_runDetails","specStarted","spec","set","id","specDone","result","push","_extractSpecResults","slice","suiteStarted","suite","description","suiteDone","_result","pop","jasmineDone","numFailingTests","numPassingTests","numPendingTests","numTodoTests","testResults","forEach","testResult","status","createEmptyTestResult","console","failureMessage","formatResultsErrors","snapshot","added","fileDeleted","matched","unchecked","unmatched","updated","testFilePath","getResults","_addMissingMessageToStack","stack","message","ERROR_REGEX","includes","replace","specResult","ancestorTitles","start","get","duration","undefined","location","__callsite","column","getColumnNumber","line","getLineNumber","results","failureDetails","failureMessages","fullName","numPassingAsserts","title","failedExpectations","failed","matcherName"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _testResult = require('@jest/test-result');\n\nvar _jestMessageUtil = require('jest-message-util');\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar jestNow = global[Symbol.for('jest-native-now')] || global.Date.now;\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nvar Promise = global[Symbol.for('jest-native-promise')] || global.Promise;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass Jasmine2Reporter {\n  constructor(globalConfig, config, testPath) {\n    _defineProperty(this, '_testResults', void 0);\n\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_currentSuites', void 0);\n\n    _defineProperty(this, '_resolve', void 0);\n\n    _defineProperty(this, '_resultsPromise', void 0);\n\n    _defineProperty(this, '_startTimes', void 0);\n\n    _defineProperty(this, '_testPath', void 0);\n\n    this._globalConfig = globalConfig;\n    this._config = config;\n    this._testPath = testPath;\n    this._testResults = [];\n    this._currentSuites = [];\n    this._resolve = null;\n    this._resultsPromise = new Promise(resolve => (this._resolve = resolve));\n    this._startTimes = new Map();\n  }\n\n  jasmineStarted(_runDetails) {}\n\n  specStarted(spec) {\n    this._startTimes.set(spec.id, jestNow());\n  }\n\n  specDone(result) {\n    this._testResults.push(\n      this._extractSpecResults(result, this._currentSuites.slice(0))\n    );\n  }\n\n  suiteStarted(suite) {\n    this._currentSuites.push(suite.description);\n  }\n\n  suiteDone(_result) {\n    this._currentSuites.pop();\n  }\n\n  jasmineDone(_runDetails) {\n    let numFailingTests = 0;\n    let numPassingTests = 0;\n    let numPendingTests = 0;\n    let numTodoTests = 0;\n    const testResults = this._testResults;\n    testResults.forEach(testResult => {\n      if (testResult.status === 'failed') {\n        numFailingTests++;\n      } else if (testResult.status === 'pending') {\n        numPendingTests++;\n      } else if (testResult.status === 'todo') {\n        numTodoTests++;\n      } else {\n        numPassingTests++;\n      }\n    });\n    const testResult = {\n      ...(0, _testResult.createEmptyTestResult)(),\n      console: null,\n      failureMessage: (0, _jestMessageUtil.formatResultsErrors)(\n        testResults,\n        this._config,\n        this._globalConfig,\n        this._testPath\n      ),\n      numFailingTests,\n      numPassingTests,\n      numPendingTests,\n      numTodoTests,\n      snapshot: {\n        added: 0,\n        fileDeleted: false,\n        matched: 0,\n        unchecked: 0,\n        unmatched: 0,\n        updated: 0\n      },\n      testFilePath: this._testPath,\n      testResults\n    };\n\n    this._resolve(testResult);\n  }\n\n  getResults() {\n    return this._resultsPromise;\n  }\n\n  _addMissingMessageToStack(stack, message) {\n    // Some errors (e.g. Angular injection error) don't prepend error.message\n    // to stack, instead the first line of the stack is just plain 'Error'\n    const ERROR_REGEX = /^Error:?\\s*\\n/;\n\n    if (stack && message && !stack.includes(message)) {\n      return message + stack.replace(ERROR_REGEX, '\\n');\n    }\n\n    return stack;\n  }\n\n  _extractSpecResults(specResult, ancestorTitles) {\n    const start = this._startTimes.get(specResult.id);\n\n    const duration = start ? jestNow() - start : undefined;\n    const status =\n      specResult.status === 'disabled' ? 'pending' : specResult.status;\n    const location = specResult.__callsite\n      ? {\n          column: specResult.__callsite.getColumnNumber(),\n          line: specResult.__callsite.getLineNumber()\n        }\n      : null;\n    const results = {\n      ancestorTitles,\n      duration,\n      failureDetails: [],\n      failureMessages: [],\n      fullName: specResult.fullName,\n      location,\n      numPassingAsserts: 0,\n      // Jasmine2 only returns an array of failed asserts.\n      status,\n      title: specResult.description\n    };\n    specResult.failedExpectations.forEach(failed => {\n      const message =\n        !failed.matcherName && typeof failed.stack === 'string'\n          ? this._addMissingMessageToStack(failed.stack, failed.message)\n          : failed.message || '';\n      results.failureMessages.push(message);\n      results.failureDetails.push(failed);\n    });\n    return results;\n  }\n}\n\nexports.default = Jasmine2Reporter;\n"]},"metadata":{},"sourceType":"script"}