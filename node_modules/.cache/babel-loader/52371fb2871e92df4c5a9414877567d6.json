{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;\n\nvar t = require(\"@babel/types\");\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(\"}\")) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!t.isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix, key = \"label\") {\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (let i = 0; i < 4; i++) this.space(true);\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (let i = 0; i < 6; i++) this.space(true);\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!t.isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (t.isFor(parent)) {\n    if (t.isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@babel/generator/lib/generators/statements.js"],"names":["Object","defineProperty","exports","value","WithStatement","IfStatement","ForStatement","WhileStatement","DoWhileStatement","LabeledStatement","TryStatement","CatchClause","SwitchStatement","SwitchCase","DebuggerStatement","VariableDeclaration","VariableDeclarator","ThrowStatement","BreakStatement","ReturnStatement","ContinueStatement","ForOfStatement","ForInStatement","t","require","node","word","space","token","print","object","printBlock","test","needsBlock","alternate","isIfStatement","getLastStatement","consequent","newline","indent","printAndIndentOnComments","dedent","endsWith","statement","isStatement","body","inForStatementInitCounter","init","update","buildForXStatement","op","await","left","right","semicolon","buildLabelStatement","prefix","key","label","isLabel","terminatorState","startTerminatorless","endTerminatorless","block","handlers","handler","finalizer","param","typeAnnotation","discriminant","printSequence","cases","addNewlines","leading","cas","length","variableDeclarationIndent","i","constDeclarationIndent","parent","declare","kind","hasInits","isFor","declar","declarations","separator","printList","isForStatement","id","definite"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;\n\nvar t = require(\"@babel/types\");\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(\"}\")) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!t.isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix, key = \"label\") {\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (let i = 0; i < 4; i++) this.space(true);\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (let i = 0; i < 6; i++) this.space(true);\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!t.isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (t.isFor(parent)) {\n    if (t.isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}"]},"metadata":{},"sourceType":"script"}