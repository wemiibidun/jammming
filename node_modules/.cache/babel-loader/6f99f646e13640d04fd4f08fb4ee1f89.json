{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = exports.test = exports.serialize = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  // Serialize a non-default name, even if config.printFunctionName is false.\n  const name = val.getMockName();\n  const nameString = name === 'jest.fn()' ? '' : ' ' + name;\n  let callsString = '';\n\n  if (val.mock.calls.length !== 0) {\n    const indentationNext = indentation + config.indent;\n    callsString = ' {' + config.spacingOuter + indentationNext + '\"calls\": ' + printer(val.mock.calls, config, indentationNext, depth, refs) + (config.min ? ', ' : ',') + config.spacingOuter + indentationNext + '\"results\": ' + printer(val.mock.results, config, indentationNext, depth, refs) + (config.min ? '' : ',') + config.spacingOuter + indentation + '}';\n  }\n\n  return '[MockFunction' + nameString + ']' + callsString;\n};\n\nexports.serialize = serialize;\n\nconst test = val => val && !!val._isMockFunction;\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-snapshot/build/mockSerializer.js"],"names":["Object","defineProperty","exports","value","default","test","serialize","val","config","indentation","depth","refs","printer","name","getMockName","nameString","callsString","mock","calls","length","indentationNext","indent","spacingOuter","min","results","_isMockFunction","plugin","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,SAAR,GAAoB,KAAK,CAA1D;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,SAAS,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,WAAd,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwCC,OAAxC,KAAoD;AACpE;AACA,QAAMC,IAAI,GAAGN,GAAG,CAACO,WAAJ,EAAb;AACA,QAAMC,UAAU,GAAGF,IAAI,KAAK,WAAT,GAAuB,EAAvB,GAA4B,MAAMA,IAArD;AACA,MAAIG,WAAW,GAAG,EAAlB;;AAEA,MAAIT,GAAG,CAACU,IAAJ,CAASC,KAAT,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,UAAMC,eAAe,GAAGX,WAAW,GAAGD,MAAM,CAACa,MAA7C;AACAL,IAAAA,WAAW,GACT,OACAR,MAAM,CAACc,YADP,GAEAF,eAFA,GAGA,WAHA,GAIAR,OAAO,CAACL,GAAG,CAACU,IAAJ,CAASC,KAAV,EAAiBV,MAAjB,EAAyBY,eAAzB,EAA0CV,KAA1C,EAAiDC,IAAjD,CAJP,IAKCH,MAAM,CAACe,GAAP,GAAa,IAAb,GAAoB,GALrB,IAMAf,MAAM,CAACc,YANP,GAOAF,eAPA,GAQA,aARA,GASAR,OAAO,CAACL,GAAG,CAACU,IAAJ,CAASO,OAAV,EAAmBhB,MAAnB,EAA2BY,eAA3B,EAA4CV,KAA5C,EAAmDC,IAAnD,CATP,IAUCH,MAAM,CAACe,GAAP,GAAa,EAAb,GAAkB,GAVnB,IAWAf,MAAM,CAACc,YAXP,GAYAb,WAZA,GAaA,GAdF;AAeD;;AAED,SAAO,kBAAkBM,UAAlB,GAA+B,GAA/B,GAAqCC,WAA5C;AACD,CA1BD;;AA4BAd,OAAO,CAACI,SAAR,GAAoBA,SAApB;;AAEA,MAAMD,IAAI,GAAGE,GAAG,IAAIA,GAAG,IAAI,CAAC,CAACA,GAAG,CAACkB,eAAjC;;AAEAvB,OAAO,CAACG,IAAR,GAAeA,IAAf;AACA,MAAMqB,MAAM,GAAG;AACbpB,EAAAA,SADa;AAEbD,EAAAA;AAFa,CAAf;AAIA,IAAIsB,QAAQ,GAAGD,MAAf;AACAxB,OAAO,CAACE,OAAR,GAAkBuB,QAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = exports.test = exports.serialize = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  // Serialize a non-default name, even if config.printFunctionName is false.\n  const name = val.getMockName();\n  const nameString = name === 'jest.fn()' ? '' : ' ' + name;\n  let callsString = '';\n\n  if (val.mock.calls.length !== 0) {\n    const indentationNext = indentation + config.indent;\n    callsString =\n      ' {' +\n      config.spacingOuter +\n      indentationNext +\n      '\"calls\": ' +\n      printer(val.mock.calls, config, indentationNext, depth, refs) +\n      (config.min ? ', ' : ',') +\n      config.spacingOuter +\n      indentationNext +\n      '\"results\": ' +\n      printer(val.mock.results, config, indentationNext, depth, refs) +\n      (config.min ? '' : ',') +\n      config.spacingOuter +\n      indentation +\n      '}';\n  }\n\n  return '[MockFunction' + nameString + ']' + callsString;\n};\n\nexports.serialize = serialize;\n\nconst test = val => val && !!val._isMockFunction;\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}