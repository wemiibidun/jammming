{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.clearCachedLookups = clearCachedLookups;\nexports.default = cachedShouldLoadAsEsm;\n\nfunction _path() {\n  const data = require('path');\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _vm() {\n  const data = require('vm');\n\n  _vm = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _readPkgUp() {\n  const data = _interopRequireDefault(require('read-pkg-up'));\n\n  _readPkgUp = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-expect-error: experimental, not added to the types\n\n\nconst runtimeSupportsVmModules = typeof _vm().SyntheticModule === 'function';\nconst cachedFileLookups = new Map();\nconst cachedDirLookups = new Map();\n\nfunction clearCachedLookups() {\n  cachedFileLookups.clear();\n  cachedDirLookups.clear();\n}\n\nfunction cachedShouldLoadAsEsm(path) {\n  let cachedLookup = cachedFileLookups.get(path);\n\n  if (cachedLookup === undefined) {\n    cachedLookup = shouldLoadAsEsm(path);\n    cachedFileLookups.set(path, cachedLookup);\n  }\n\n  return cachedLookup;\n} // this is a bad version of what https://github.com/nodejs/modules/issues/393 would provide\n\n\nfunction shouldLoadAsEsm(path) {\n  if (!runtimeSupportsVmModules) {\n    return false;\n  }\n\n  const extension = (0, _path().extname)(path);\n\n  if (extension === '.mjs') {\n    return true;\n  }\n\n  if (extension === '.cjs') {\n    return false;\n  } // this isn't correct - we might wanna load any file as a module (using synthetic module)\n  // do we need an option to Jest so people can opt in to ESM for non-js?\n\n\n  if (extension !== '.js') {\n    return false;\n  }\n\n  const cwd = (0, _path().dirname)(path);\n  let cachedLookup = cachedDirLookups.get(cwd);\n\n  if (cachedLookup === undefined) {\n    cachedLookup = cachedPkgCheck(cwd);\n    cachedFileLookups.set(cwd, cachedLookup);\n  }\n\n  return cachedLookup;\n}\n\nfunction cachedPkgCheck(cwd) {\n  // TODO: can we cache lookups somehow?\n  const pkg = _readPkgUp().default.sync({\n    cwd,\n    normalize: false\n  });\n\n  if (!pkg) {\n    return false;\n  }\n\n  return pkg.packageJson.type === 'module';\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-config/node_modules/jest-resolve/build/shouldLoadAsEsm.js"],"names":["Object","defineProperty","exports","value","clearCachedLookups","default","cachedShouldLoadAsEsm","_path","data","require","_vm","_readPkgUp","_interopRequireDefault","obj","__esModule","runtimeSupportsVmModules","SyntheticModule","cachedFileLookups","Map","cachedDirLookups","clear","path","cachedLookup","get","undefined","shouldLoadAsEsm","set","extension","extname","cwd","dirname","cachedPkgCheck","pkg","sync","normalize","packageJson","type"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.clearCachedLookups = clearCachedLookups;\nexports.default = cachedShouldLoadAsEsm;\n\nfunction _path() {\n  const data = require('path');\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _vm() {\n  const data = require('vm');\n\n  _vm = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _readPkgUp() {\n  const data = _interopRequireDefault(require('read-pkg-up'));\n\n  _readPkgUp = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-expect-error: experimental, not added to the types\nconst runtimeSupportsVmModules = typeof _vm().SyntheticModule === 'function';\nconst cachedFileLookups = new Map();\nconst cachedDirLookups = new Map();\n\nfunction clearCachedLookups() {\n  cachedFileLookups.clear();\n  cachedDirLookups.clear();\n}\n\nfunction cachedShouldLoadAsEsm(path) {\n  let cachedLookup = cachedFileLookups.get(path);\n\n  if (cachedLookup === undefined) {\n    cachedLookup = shouldLoadAsEsm(path);\n    cachedFileLookups.set(path, cachedLookup);\n  }\n\n  return cachedLookup;\n} // this is a bad version of what https://github.com/nodejs/modules/issues/393 would provide\n\nfunction shouldLoadAsEsm(path) {\n  if (!runtimeSupportsVmModules) {\n    return false;\n  }\n\n  const extension = (0, _path().extname)(path);\n\n  if (extension === '.mjs') {\n    return true;\n  }\n\n  if (extension === '.cjs') {\n    return false;\n  } // this isn't correct - we might wanna load any file as a module (using synthetic module)\n  // do we need an option to Jest so people can opt in to ESM for non-js?\n\n  if (extension !== '.js') {\n    return false;\n  }\n\n  const cwd = (0, _path().dirname)(path);\n  let cachedLookup = cachedDirLookups.get(cwd);\n\n  if (cachedLookup === undefined) {\n    cachedLookup = cachedPkgCheck(cwd);\n    cachedFileLookups.set(cwd, cachedLookup);\n  }\n\n  return cachedLookup;\n}\n\nfunction cachedPkgCheck(cwd) {\n  // TODO: can we cache lookups somehow?\n  const pkg = _readPkgUp().default.sync({\n    cwd,\n    normalize: false\n  });\n\n  if (!pkg) {\n    return false;\n  }\n\n  return pkg.packageJson.type === 'module';\n}\n"]},"metadata":{},"sourceType":"script"}