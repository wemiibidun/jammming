{"ast":null,"code":"'use strict';\n\nconst defaultExclude = require('./default-exclude.js');\n\nconst defaultExtension = require('./default-extension.js');\n\nconst nycCommands = {\n  all: [null, 'check-coverage', 'instrument', 'merge', 'report'],\n  testExclude: [null, 'instrument', 'report', 'check-coverage'],\n  instrument: [null, 'instrument'],\n  checkCoverage: [null, 'report', 'check-coverage'],\n  report: [null, 'report'],\n  main: [null],\n  instrumentOnly: ['instrument']\n};\nconst cwd = {\n  description: 'working directory used when resolving paths',\n  type: 'string',\n\n  get default() {\n    return process.cwd();\n  },\n\n  nycCommands: nycCommands.all\n};\nconst nycrcPath = {\n  description: 'specify an explicit path to find nyc configuration',\n  nycCommands: nycCommands.all\n};\nconst tempDir = {\n  description: 'directory to output raw coverage information to',\n  type: 'string',\n  default: './.nyc_output',\n  nycAlias: 't',\n  nycHiddenAlias: 'temp-directory',\n  nycCommands: [null, 'check-coverage', 'merge', 'report']\n};\nconst testExclude = {\n  exclude: {\n    description: 'a list of specific files and directories that should be excluded from coverage, glob patterns are supported',\n    type: 'array',\n    items: {\n      type: 'string'\n    },\n    default: defaultExclude,\n    nycCommands: nycCommands.testExclude,\n    nycAlias: 'x'\n  },\n  excludeNodeModules: {\n    description: 'whether or not to exclude all node_module folders (i.e. **/node_modules/**) by default',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.testExclude\n  },\n  include: {\n    description: 'a list of specific files that should be covered, glob patterns are supported',\n    type: 'array',\n    items: {\n      type: 'string'\n    },\n    default: [],\n    nycCommands: nycCommands.testExclude,\n    nycAlias: 'n'\n  },\n  extension: {\n    description: 'a list of extensions that nyc should handle in addition to .js',\n    type: 'array',\n    items: {\n      type: 'string'\n    },\n    default: defaultExtension,\n    nycCommands: nycCommands.testExclude,\n    nycAlias: 'e'\n  }\n};\nconst instrumentVisitor = {\n  coverageVariable: {\n    description: 'variable to store coverage',\n    type: 'string',\n    default: '__coverage__',\n    nycCommands: nycCommands.instrument\n  },\n  coverageGlobalScope: {\n    description: 'scope to store the coverage variable',\n    type: 'string',\n    default: 'this',\n    nycCommands: nycCommands.instrument\n  },\n  coverageGlobalScopeFunc: {\n    description: 'avoid potentially replaced `Function` when finding global scope',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.instrument\n  },\n  ignoreClassMethods: {\n    description: 'class method names to ignore for coverage',\n    type: 'array',\n    items: {\n      type: 'string'\n    },\n    default: [],\n    nycCommands: nycCommands.instrument\n  }\n};\nconst instrumentParseGen = {\n  autoWrap: {\n    description: 'allow `return` statements outside of functions',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.instrument\n  },\n  esModules: {\n    description: 'should files be treated as ES Modules',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.instrument\n  },\n  parserPlugins: {\n    description: 'babel parser plugins to use when parsing the source',\n    type: 'array',\n    items: {\n      type: 'string'\n    },\n\n    /* Babel parser plugins are to be enabled when the feature is stage 3 and\n     * implemented in a released version of node.js. */\n    default: ['asyncGenerators', 'bigInt', 'classProperties', 'classPrivateProperties', 'classPrivateMethods', 'dynamicImport', 'importMeta', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'topLevelAwait'],\n    nycCommands: nycCommands.instrument\n  },\n  compact: {\n    description: 'should the output be compacted?',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.instrument\n  },\n  preserveComments: {\n    description: 'should comments be preserved in the output?',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.instrument\n  },\n  produceSourceMap: {\n    description: 'should source maps be produced?',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.instrument\n  }\n};\nconst checkCoverage = {\n  excludeAfterRemap: {\n    description: 'should exclude logic be performed after the source-map remaps filenames?',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.checkCoverage\n  },\n  branches: {\n    description: 'what % of branches must be covered?',\n    type: 'number',\n    default: 0,\n    minimum: 0,\n    maximum: 100,\n    nycCommands: nycCommands.checkCoverage\n  },\n  functions: {\n    description: 'what % of functions must be covered?',\n    type: 'number',\n    default: 0,\n    minimum: 0,\n    maximum: 100,\n    nycCommands: nycCommands.checkCoverage\n  },\n  lines: {\n    description: 'what % of lines must be covered?',\n    type: 'number',\n    default: 90,\n    minimum: 0,\n    maximum: 100,\n    nycCommands: nycCommands.checkCoverage\n  },\n  statements: {\n    description: 'what % of statements must be covered?',\n    type: 'number',\n    default: 0,\n    minimum: 0,\n    maximum: 100,\n    nycCommands: nycCommands.checkCoverage\n  },\n  perFile: {\n    description: 'check thresholds per file',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.checkCoverage\n  }\n};\nconst report = {\n  checkCoverage: {\n    description: 'check whether coverage is within thresholds provided',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.report\n  },\n  reporter: {\n    description: 'coverage reporter(s) to use',\n    type: 'array',\n    items: {\n      type: 'string'\n    },\n    default: ['text'],\n    nycCommands: nycCommands.report,\n    nycAlias: 'r'\n  },\n  reportDir: {\n    description: 'directory to output coverage reports in',\n    type: 'string',\n    default: 'coverage',\n    nycCommands: nycCommands.report\n  },\n  showProcessTree: {\n    description: 'display the tree of spawned processes',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.report\n  },\n  skipEmpty: {\n    description: 'don\\'t show empty files (no lines of code) in report',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.report\n  },\n  skipFull: {\n    description: 'don\\'t show files with 100% statement, branch, and function coverage',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.report\n  }\n};\nconst nycMain = {\n  silent: {\n    description: 'don\\'t output a report after tests finish running',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main,\n    nycAlias: 's'\n  },\n  all: {\n    description: 'whether or not to instrument all files of the project (not just the ones touched by your test suite)',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main,\n    nycAlias: 'a'\n  },\n  eager: {\n    description: 'instantiate the instrumenter at startup (see https://git.io/vMKZ9)',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main\n  },\n  cache: {\n    description: 'cache instrumentation results for improved performance',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.main,\n    nycAlias: 'c'\n  },\n  cacheDir: {\n    description: 'explicitly set location for instrumentation cache',\n    type: 'string',\n    nycCommands: nycCommands.main\n  },\n  babelCache: {\n    description: 'cache babel transpilation results for improved performance',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main\n  },\n  useSpawnWrap: {\n    description: 'use spawn-wrap instead of setting process.env.NODE_OPTIONS',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main\n  },\n  hookRequire: {\n    description: 'should nyc wrap require?',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.main\n  },\n  hookRunInContext: {\n    description: 'should nyc wrap vm.runInContext?',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main\n  },\n  hookRunInThisContext: {\n    description: 'should nyc wrap vm.runInThisContext?',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.main\n  },\n  clean: {\n    description: 'should the .nyc_output folder be cleaned before executing tests',\n    type: 'boolean',\n    default: true,\n    nycCommands: nycCommands.main\n  }\n};\nconst instrumentOnly = {\n  inPlace: {\n    description: 'should nyc run the instrumentation in place?',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.instrumentOnly\n  },\n  exitOnError: {\n    description: 'should nyc exit when an instrumentation failure occurs?',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.instrumentOnly\n  },\n  delete: {\n    description: 'should the output folder be deleted before instrumenting files?',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.instrumentOnly\n  },\n  completeCopy: {\n    description: 'should nyc copy all files from input to output as well as instrumented files?',\n    type: 'boolean',\n    default: false,\n    nycCommands: nycCommands.instrumentOnly\n  }\n};\nconst nyc = {\n  description: 'nyc configuration options',\n  type: 'object',\n  properties: {\n    cwd,\n    nycrcPath,\n    tempDir,\n\n    /* Test Exclude */\n    ...testExclude,\n\n    /* Instrumentation settings */\n    ...instrumentVisitor,\n\n    /* Instrumentation parser/generator settings */\n    ...instrumentParseGen,\n    sourceMap: {\n      description: 'should nyc detect and handle source maps?',\n      type: 'boolean',\n      default: true,\n      nycCommands: nycCommands.instrument\n    },\n    require: {\n      description: 'a list of additional modules that nyc should attempt to require in its subprocess, e.g., @babel/register, @babel/polyfill',\n      type: 'array',\n      items: {\n        type: 'string'\n      },\n      default: [],\n      nycCommands: nycCommands.instrument,\n      nycAlias: 'i'\n    },\n    instrument: {\n      description: 'should nyc handle instrumentation?',\n      type: 'boolean',\n      default: true,\n      nycCommands: nycCommands.instrument\n    },\n\n    /* Check coverage */\n    ...checkCoverage,\n\n    /* Report options */\n    ...report,\n\n    /* Main command options */\n    ...nycMain,\n\n    /* Instrument command options */\n    ...instrumentOnly\n  }\n};\nconst configs = {\n  nyc,\n  testExclude: {\n    description: 'test-exclude options',\n    type: 'object',\n    properties: {\n      cwd,\n      ...testExclude\n    }\n  },\n  babelPluginIstanbul: {\n    description: 'babel-plugin-istanbul options',\n    type: 'object',\n    properties: {\n      cwd,\n      ...testExclude,\n      ...instrumentVisitor\n    }\n  },\n  instrumentVisitor: {\n    description: 'instrument visitor options',\n    type: 'object',\n    properties: instrumentVisitor\n  },\n  instrumenter: {\n    description: 'stand-alone instrumenter options',\n    type: 'object',\n    properties: { ...instrumentVisitor,\n      ...instrumentParseGen\n    }\n  }\n};\n\nfunction defaultsReducer(defaults, [name, {\n  default: value\n}]) {\n  /* Modifying arrays in defaults is safe, does not change schema. */\n  if (Array.isArray(value)) {\n    value = [...value];\n  }\n\n  return Object.assign(defaults, {\n    [name]: value\n  });\n}\n\nmodule.exports = { ...configs,\n  defaults: Object.keys(configs).reduce((defaults, id) => {\n    Object.defineProperty(defaults, id, {\n      enumerable: true,\n\n      get() {\n        /* This defers `process.cwd()` until defaults are requested. */\n        return Object.entries(configs[id].properties).filter(([, info]) => 'default' in info).reduce(defaultsReducer, {});\n      }\n\n    });\n    return defaults;\n  }, {})\n};","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@istanbuljs/schema/index.js"],"names":["defaultExclude","require","defaultExtension","nycCommands","all","testExclude","instrument","checkCoverage","report","main","instrumentOnly","cwd","description","type","default","process","nycrcPath","tempDir","nycAlias","nycHiddenAlias","exclude","items","excludeNodeModules","include","extension","instrumentVisitor","coverageVariable","coverageGlobalScope","coverageGlobalScopeFunc","ignoreClassMethods","instrumentParseGen","autoWrap","esModules","parserPlugins","compact","preserveComments","produceSourceMap","excludeAfterRemap","branches","minimum","maximum","functions","lines","statements","perFile","reporter","reportDir","showProcessTree","skipEmpty","skipFull","nycMain","silent","eager","cache","cacheDir","babelCache","useSpawnWrap","hookRequire","hookRunInContext","hookRunInThisContext","clean","inPlace","exitOnError","delete","completeCopy","nyc","properties","sourceMap","configs","babelPluginIstanbul","instrumenter","defaultsReducer","defaults","name","value","Array","isArray","Object","assign","module","exports","keys","reduce","id","defineProperty","enumerable","get","entries","filter","info"],"mappings":"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","sourcesContent":["'use strict';\n\nconst defaultExclude = require('./default-exclude.js');\nconst defaultExtension = require('./default-extension.js');\n\nconst nycCommands = {\n\tall: [null, 'check-coverage', 'instrument', 'merge', 'report'],\n\ttestExclude: [null, 'instrument', 'report', 'check-coverage'],\n\tinstrument: [null, 'instrument'],\n\tcheckCoverage: [null, 'report', 'check-coverage'],\n\treport: [null, 'report'],\n\tmain: [null],\n\tinstrumentOnly: ['instrument']\n};\n\nconst cwd = {\n\tdescription: 'working directory used when resolving paths',\n\ttype: 'string',\n\tget default() {\n\t\treturn process.cwd();\n\t},\n\tnycCommands: nycCommands.all\n};\n\nconst nycrcPath = {\n\tdescription: 'specify an explicit path to find nyc configuration',\n\tnycCommands: nycCommands.all\n};\n\nconst tempDir = {\n\tdescription: 'directory to output raw coverage information to',\n\ttype: 'string',\n\tdefault: './.nyc_output',\n\tnycAlias: 't',\n\tnycHiddenAlias: 'temp-directory',\n\tnycCommands: [null, 'check-coverage', 'merge', 'report']\n};\n\nconst testExclude = {\n\texclude: {\n\t\tdescription: 'a list of specific files and directories that should be excluded from coverage, glob patterns are supported',\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t},\n\t\tdefault: defaultExclude,\n\t\tnycCommands: nycCommands.testExclude,\n\t\tnycAlias: 'x'\n\t},\n\texcludeNodeModules: {\n\t\tdescription: 'whether or not to exclude all node_module folders (i.e. **/node_modules/**) by default',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.testExclude\n\t},\n\tinclude: {\n\t\tdescription: 'a list of specific files that should be covered, glob patterns are supported',\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t},\n\t\tdefault: [],\n\t\tnycCommands: nycCommands.testExclude,\n\t\tnycAlias: 'n'\n\t},\n\textension: {\n\t\tdescription: 'a list of extensions that nyc should handle in addition to .js',\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t},\n\t\tdefault: defaultExtension,\n\t\tnycCommands: nycCommands.testExclude,\n\t\tnycAlias: 'e'\n\t}\n};\n\nconst instrumentVisitor = {\n\tcoverageVariable: {\n\t\tdescription: 'variable to store coverage',\n\t\ttype: 'string',\n\t\tdefault: '__coverage__',\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tcoverageGlobalScope: {\n\t\tdescription: 'scope to store the coverage variable',\n\t\ttype: 'string',\n\t\tdefault: 'this',\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tcoverageGlobalScopeFunc: {\n\t\tdescription: 'avoid potentially replaced `Function` when finding global scope',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tignoreClassMethods: {\n\t\tdescription: 'class method names to ignore for coverage',\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t},\n\t\tdefault: [],\n\t\tnycCommands: nycCommands.instrument\n\t}\n};\n\nconst instrumentParseGen = {\n\tautoWrap: {\n\t\tdescription: 'allow `return` statements outside of functions',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tesModules: {\n\t\tdescription: 'should files be treated as ES Modules',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tparserPlugins: {\n\t\tdescription: 'babel parser plugins to use when parsing the source',\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t},\n\t\t/* Babel parser plugins are to be enabled when the feature is stage 3 and\n\t\t * implemented in a released version of node.js. */\n\t\tdefault: [\n\t\t\t'asyncGenerators',\n\t\t\t'bigInt',\n\t\t\t'classProperties',\n\t\t\t'classPrivateProperties',\n\t\t\t'classPrivateMethods',\n\t\t\t'dynamicImport',\n\t\t\t'importMeta',\n\t\t\t'numericSeparator',\n\t\t\t'objectRestSpread',\n\t\t\t'optionalCatchBinding',\n\t\t\t'topLevelAwait'\n\t\t],\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tcompact: {\n\t\tdescription: 'should the output be compacted?',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tpreserveComments: {\n\t\tdescription: 'should comments be preserved in the output?',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.instrument\n\t},\n\tproduceSourceMap: {\n\t\tdescription: 'should source maps be produced?',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.instrument\n\t}\n};\n\nconst checkCoverage = {\n\texcludeAfterRemap: {\n\t\tdescription: 'should exclude logic be performed after the source-map remaps filenames?',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.checkCoverage\n\t},\n\tbranches: {\n\t\tdescription: 'what % of branches must be covered?',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tminimum: 0,\n\t\tmaximum: 100,\n\t\tnycCommands: nycCommands.checkCoverage\n\t},\n\tfunctions: {\n\t\tdescription: 'what % of functions must be covered?',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tminimum: 0,\n\t\tmaximum: 100,\n\t\tnycCommands: nycCommands.checkCoverage\n\t},\n\tlines: {\n\t\tdescription: 'what % of lines must be covered?',\n\t\ttype: 'number',\n\t\tdefault: 90,\n\t\tminimum: 0,\n\t\tmaximum: 100,\n\t\tnycCommands: nycCommands.checkCoverage\n\t},\n\tstatements: {\n\t\tdescription: 'what % of statements must be covered?',\n\t\ttype: 'number',\n\t\tdefault: 0,\n\t\tminimum: 0,\n\t\tmaximum: 100,\n\t\tnycCommands: nycCommands.checkCoverage\n\t},\n\tperFile: {\n\t\tdescription: 'check thresholds per file',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.checkCoverage\n\t}\n};\n\nconst report = {\n\tcheckCoverage: {\n\t\tdescription: 'check whether coverage is within thresholds provided',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.report\n\t},\n\treporter: {\n\t\tdescription: 'coverage reporter(s) to use',\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t},\n\t\tdefault: ['text'],\n\t\tnycCommands: nycCommands.report,\n\t\tnycAlias: 'r'\n\t},\n\treportDir: {\n\t\tdescription: 'directory to output coverage reports in',\n\t\ttype: 'string',\n\t\tdefault: 'coverage',\n\t\tnycCommands: nycCommands.report\n\t},\n\tshowProcessTree: {\n\t\tdescription: 'display the tree of spawned processes',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.report\n\t},\n\tskipEmpty: {\n\t\tdescription: 'don\\'t show empty files (no lines of code) in report',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.report\n\t},\n\tskipFull: {\n\t\tdescription: 'don\\'t show files with 100% statement, branch, and function coverage',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.report\n\t}\n};\n\nconst nycMain = {\n\tsilent: {\n\t\tdescription: 'don\\'t output a report after tests finish running',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main,\n\t\tnycAlias: 's'\n\t},\n\tall: {\n\t\tdescription: 'whether or not to instrument all files of the project (not just the ones touched by your test suite)',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main,\n\t\tnycAlias: 'a'\n\t},\n\teager: {\n\t\tdescription: 'instantiate the instrumenter at startup (see https://git.io/vMKZ9)',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main\n\t},\n\tcache: {\n\t\tdescription: 'cache instrumentation results for improved performance',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.main,\n\t\tnycAlias: 'c'\n\t},\n\tcacheDir: {\n\t\tdescription: 'explicitly set location for instrumentation cache',\n\t\ttype: 'string',\n\t\tnycCommands: nycCommands.main\n\t},\n\tbabelCache: {\n\t\tdescription: 'cache babel transpilation results for improved performance',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main\n\t},\n\tuseSpawnWrap: {\n\t\tdescription: 'use spawn-wrap instead of setting process.env.NODE_OPTIONS',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main\n\t},\n\thookRequire: {\n\t\tdescription: 'should nyc wrap require?',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.main\n\t},\n\thookRunInContext: {\n\t\tdescription: 'should nyc wrap vm.runInContext?',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main\n\t},\n\thookRunInThisContext: {\n\t\tdescription: 'should nyc wrap vm.runInThisContext?',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.main\n\t},\n\tclean: {\n\t\tdescription: 'should the .nyc_output folder be cleaned before executing tests',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tnycCommands: nycCommands.main\n\t}\n};\n\nconst instrumentOnly = {\n\tinPlace: {\n\t\tdescription: 'should nyc run the instrumentation in place?',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.instrumentOnly\n\t},\n\texitOnError: {\n\t\tdescription: 'should nyc exit when an instrumentation failure occurs?',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.instrumentOnly\n\t},\n\tdelete: {\n\t\tdescription: 'should the output folder be deleted before instrumenting files?',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.instrumentOnly\n\t},\n\tcompleteCopy: {\n\t\tdescription: 'should nyc copy all files from input to output as well as instrumented files?',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tnycCommands: nycCommands.instrumentOnly\n\t}\n};\n\nconst nyc = {\n\tdescription: 'nyc configuration options',\n\ttype: 'object',\n\tproperties: {\n\t\tcwd,\n\t\tnycrcPath,\n\t\ttempDir,\n\n\t\t/* Test Exclude */\n\t\t...testExclude,\n\n\t\t/* Instrumentation settings */\n\t\t...instrumentVisitor,\n\n\t\t/* Instrumentation parser/generator settings */\n\t\t...instrumentParseGen,\n\t\tsourceMap: {\n\t\t\tdescription: 'should nyc detect and handle source maps?',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tnycCommands: nycCommands.instrument\n\t\t},\n\t\trequire: {\n\t\t\tdescription: 'a list of additional modules that nyc should attempt to require in its subprocess, e.g., @babel/register, @babel/polyfill',\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\tdefault: [],\n\t\t\tnycCommands: nycCommands.instrument,\n\t\t\tnycAlias: 'i'\n\t\t},\n\t\tinstrument: {\n\t\t\tdescription: 'should nyc handle instrumentation?',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tnycCommands: nycCommands.instrument\n\t\t},\n\n\t\t/* Check coverage */\n\t\t...checkCoverage,\n\n\t\t/* Report options */\n\t\t...report,\n\n\t\t/* Main command options */\n\t\t...nycMain,\n\n\t\t/* Instrument command options */\n\t\t...instrumentOnly\n\t}\n};\n\nconst configs = {\n\tnyc,\n\ttestExclude: {\n\t\tdescription: 'test-exclude options',\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tcwd,\n\t\t\t...testExclude\n\t\t}\n\t},\n\tbabelPluginIstanbul: {\n\t\tdescription: 'babel-plugin-istanbul options',\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\tcwd,\n\t\t\t...testExclude,\n\t\t\t...instrumentVisitor\n\t\t}\n\t},\n\tinstrumentVisitor: {\n\t\tdescription: 'instrument visitor options',\n\t\ttype: 'object',\n\t\tproperties: instrumentVisitor\n\t},\n\tinstrumenter: {\n\t\tdescription: 'stand-alone instrumenter options',\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t...instrumentVisitor,\n\t\t\t...instrumentParseGen\n\t\t}\n\t}\n};\n\nfunction defaultsReducer(defaults, [name, {default: value}]) {\n\t/* Modifying arrays in defaults is safe, does not change schema. */\n\tif (Array.isArray(value)) {\n\t\tvalue = [...value];\n\t}\n\n\treturn Object.assign(defaults, {[name]: value});\n}\n\nmodule.exports = {\n\t...configs,\n\tdefaults: Object.keys(configs).reduce(\n\t\t(defaults, id) => {\n\t\t\tObject.defineProperty(defaults, id, {\n\t\t\t\tenumerable: true,\n\t\t\t\tget() {\n\t\t\t\t\t/* This defers `process.cwd()` until defaults are requested. */\n\t\t\t\t\treturn Object.entries(configs[id].properties)\n\t\t\t\t\t\t.filter(([, info]) => 'default' in info)\n\t\t\t\t\t\t.reduce(defaultsReducer, {});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn defaults;\n\t\t},\n\t\t{}\n\t)\n};\n"]},"metadata":{},"sourceType":"script"}