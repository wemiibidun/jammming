{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst parseJson = require('parse-json');\n\nconst readFileAsync = promisify(fs.readFile);\n\nmodule.exports = async options => {\n  options = {\n    cwd: process.cwd(),\n    normalize: true,\n    ...options\n  };\n  const filePath = path.resolve(options.cwd, 'package.json');\n  const json = parseJson(await readFileAsync(filePath, 'utf8'));\n\n  if (options.normalize) {\n    require('normalize-package-data')(json);\n  }\n\n  return json;\n};\n\nmodule.exports.sync = options => {\n  options = {\n    cwd: process.cwd(),\n    normalize: true,\n    ...options\n  };\n  const filePath = path.resolve(options.cwd, 'package.json');\n  const json = parseJson(fs.readFileSync(filePath, 'utf8'));\n\n  if (options.normalize) {\n    require('normalize-package-data')(json);\n  }\n\n  return json;\n};","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/jest-config/node_modules/read-pkg/index.js"],"names":["promisify","require","fs","path","parseJson","readFileAsync","readFile","module","exports","options","cwd","process","normalize","filePath","resolve","json","sync","readFileSync"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA;AAAD,IAAcC,OAAO,CAAC,MAAD,CAA3B;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAzB;;AAEA,MAAMI,aAAa,GAAGL,SAAS,CAACE,EAAE,CAACI,QAAJ,CAA/B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,OAAN,IAAiB;AACjCA,EAAAA,OAAO,GAAG;AACTC,IAAAA,GAAG,EAAEC,OAAO,CAACD,GAAR,EADI;AAETE,IAAAA,SAAS,EAAE,IAFF;AAGT,OAAGH;AAHM,GAAV;AAMA,QAAMI,QAAQ,GAAGV,IAAI,CAACW,OAAL,CAAaL,OAAO,CAACC,GAArB,EAA0B,cAA1B,CAAjB;AACA,QAAMK,IAAI,GAAGX,SAAS,CAAC,MAAMC,aAAa,CAACQ,QAAD,EAAW,MAAX,CAApB,CAAtB;;AAEA,MAAIJ,OAAO,CAACG,SAAZ,EAAuB;AACtBX,IAAAA,OAAO,CAAC,wBAAD,CAAP,CAAkCc,IAAlC;AACA;;AAED,SAAOA,IAAP;AACA,CAfD;;AAiBAR,MAAM,CAACC,OAAP,CAAeQ,IAAf,GAAsBP,OAAO,IAAI;AAChCA,EAAAA,OAAO,GAAG;AACTC,IAAAA,GAAG,EAAEC,OAAO,CAACD,GAAR,EADI;AAETE,IAAAA,SAAS,EAAE,IAFF;AAGT,OAAGH;AAHM,GAAV;AAMA,QAAMI,QAAQ,GAAGV,IAAI,CAACW,OAAL,CAAaL,OAAO,CAACC,GAArB,EAA0B,cAA1B,CAAjB;AACA,QAAMK,IAAI,GAAGX,SAAS,CAACF,EAAE,CAACe,YAAH,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAD,CAAtB;;AAEA,MAAIJ,OAAO,CAACG,SAAZ,EAAuB;AACtBX,IAAAA,OAAO,CAAC,wBAAD,CAAP,CAAkCc,IAAlC;AACA;;AAED,SAAOA,IAAP;AACA,CAfD","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst parseJson = require('parse-json');\n\nconst readFileAsync = promisify(fs.readFile);\n\nmodule.exports = async options => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tnormalize: true,\n\t\t...options\n\t};\n\n\tconst filePath = path.resolve(options.cwd, 'package.json');\n\tconst json = parseJson(await readFileAsync(filePath, 'utf8'));\n\n\tif (options.normalize) {\n\t\trequire('normalize-package-data')(json);\n\t}\n\n\treturn json;\n};\n\nmodule.exports.sync = options => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tnormalize: true,\n\t\t...options\n\t};\n\n\tconst filePath = path.resolve(options.cwd, 'package.json');\n\tconst json = parseJson(fs.readFileSync(filePath, 'utf8'));\n\n\tif (options.normalize) {\n\t\trequire('normalize-package-data')(json);\n\t}\n\n\treturn json;\n};\n"]},"metadata":{},"sourceType":"script"}