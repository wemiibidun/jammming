{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = formatTestResults;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst formatTestResult = (testResult, codeCoverageFormatter, reporter) => {\n  const assertionResults = testResult.testResults.map(formatTestAssertion);\n\n  if (testResult.testExecError) {\n    const now = Date.now();\n    return {\n      assertionResults,\n      coverage: {},\n      endTime: now,\n      message: testResult.failureMessage ? testResult.failureMessage : testResult.testExecError.message,\n      name: testResult.testFilePath,\n      startTime: now,\n      status: 'failed',\n      summary: ''\n    };\n  } else {\n    const allTestsPassed = testResult.numFailingTests === 0;\n    return {\n      assertionResults,\n      coverage: codeCoverageFormatter ? codeCoverageFormatter(testResult.coverage, reporter) : testResult.coverage,\n      endTime: testResult.perfStats.end,\n      message: testResult.failureMessage || '',\n      name: testResult.testFilePath,\n      startTime: testResult.perfStats.start,\n      status: allTestsPassed ? 'passed' : 'failed',\n      summary: ''\n    };\n  }\n};\n\nfunction formatTestAssertion(assertion) {\n  const result = {\n    ancestorTitles: assertion.ancestorTitles,\n    failureMessages: null,\n    fullName: assertion.fullName,\n    location: assertion.location,\n    status: assertion.status,\n    title: assertion.title\n  };\n\n  if (assertion.failureMessages) {\n    result.failureMessages = assertion.failureMessages;\n  }\n\n  return result;\n}\n\nfunction formatTestResults(results, codeCoverageFormatter, reporter) {\n  const testResults = results.testResults.map(testResult => formatTestResult(testResult, codeCoverageFormatter, reporter));\n  return { ...results,\n    testResults\n  };\n}","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/@jest/test-result/build/formatTestResults.js"],"names":["Object","defineProperty","exports","value","default","formatTestResults","formatTestResult","testResult","codeCoverageFormatter","reporter","assertionResults","testResults","map","formatTestAssertion","testExecError","now","Date","coverage","endTime","message","failureMessage","name","testFilePath","startTime","status","summary","allTestsPassed","numFailingTests","perfStats","end","start","assertion","result","ancestorTitles","failureMessages","fullName","location","title","results"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAACC,UAAD,EAAaC,qBAAb,EAAoCC,QAApC,KAAiD;AACxE,QAAMC,gBAAgB,GAAGH,UAAU,CAACI,WAAX,CAAuBC,GAAvB,CAA2BC,mBAA3B,CAAzB;;AAEA,MAAIN,UAAU,CAACO,aAAf,EAA8B;AAC5B,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,WAAO;AACLL,MAAAA,gBADK;AAELO,MAAAA,QAAQ,EAAE,EAFL;AAGLC,MAAAA,OAAO,EAAEH,GAHJ;AAILI,MAAAA,OAAO,EAAEZ,UAAU,CAACa,cAAX,GACLb,UAAU,CAACa,cADN,GAELb,UAAU,CAACO,aAAX,CAAyBK,OANxB;AAOLE,MAAAA,IAAI,EAAEd,UAAU,CAACe,YAPZ;AAQLC,MAAAA,SAAS,EAAER,GARN;AASLS,MAAAA,MAAM,EAAE,QATH;AAULC,MAAAA,OAAO,EAAE;AAVJ,KAAP;AAYD,GAdD,MAcO;AACL,UAAMC,cAAc,GAAGnB,UAAU,CAACoB,eAAX,KAA+B,CAAtD;AACA,WAAO;AACLjB,MAAAA,gBADK;AAELO,MAAAA,QAAQ,EAAET,qBAAqB,GAC3BA,qBAAqB,CAACD,UAAU,CAACU,QAAZ,EAAsBR,QAAtB,CADM,GAE3BF,UAAU,CAACU,QAJV;AAKLC,MAAAA,OAAO,EAAEX,UAAU,CAACqB,SAAX,CAAqBC,GALzB;AAMLV,MAAAA,OAAO,EAAEZ,UAAU,CAACa,cAAX,IAA6B,EANjC;AAOLC,MAAAA,IAAI,EAAEd,UAAU,CAACe,YAPZ;AAQLC,MAAAA,SAAS,EAAEhB,UAAU,CAACqB,SAAX,CAAqBE,KAR3B;AASLN,MAAAA,MAAM,EAAEE,cAAc,GAAG,QAAH,GAAc,QAT/B;AAULD,MAAAA,OAAO,EAAE;AAVJ,KAAP;AAYD;AACF,CAhCD;;AAkCA,SAASZ,mBAAT,CAA6BkB,SAA7B,EAAwC;AACtC,QAAMC,MAAM,GAAG;AACbC,IAAAA,cAAc,EAAEF,SAAS,CAACE,cADb;AAEbC,IAAAA,eAAe,EAAE,IAFJ;AAGbC,IAAAA,QAAQ,EAAEJ,SAAS,CAACI,QAHP;AAIbC,IAAAA,QAAQ,EAAEL,SAAS,CAACK,QAJP;AAKbZ,IAAAA,MAAM,EAAEO,SAAS,CAACP,MALL;AAMba,IAAAA,KAAK,EAAEN,SAAS,CAACM;AANJ,GAAf;;AASA,MAAIN,SAAS,CAACG,eAAd,EAA+B;AAC7BF,IAAAA,MAAM,CAACE,eAAP,GAAyBH,SAAS,CAACG,eAAnC;AACD;;AAED,SAAOF,MAAP;AACD;;AAED,SAAS3B,iBAAT,CAA2BiC,OAA3B,EAAoC9B,qBAApC,EAA2DC,QAA3D,EAAqE;AACnE,QAAME,WAAW,GAAG2B,OAAO,CAAC3B,WAAR,CAAoBC,GAApB,CAAwBL,UAAU,IACpDD,gBAAgB,CAACC,UAAD,EAAaC,qBAAb,EAAoCC,QAApC,CADE,CAApB;AAGA,SAAO,EAAC,GAAG6B,OAAJ;AAAa3B,IAAAA;AAAb,GAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = formatTestResults;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst formatTestResult = (testResult, codeCoverageFormatter, reporter) => {\n  const assertionResults = testResult.testResults.map(formatTestAssertion);\n\n  if (testResult.testExecError) {\n    const now = Date.now();\n    return {\n      assertionResults,\n      coverage: {},\n      endTime: now,\n      message: testResult.failureMessage\n        ? testResult.failureMessage\n        : testResult.testExecError.message,\n      name: testResult.testFilePath,\n      startTime: now,\n      status: 'failed',\n      summary: ''\n    };\n  } else {\n    const allTestsPassed = testResult.numFailingTests === 0;\n    return {\n      assertionResults,\n      coverage: codeCoverageFormatter\n        ? codeCoverageFormatter(testResult.coverage, reporter)\n        : testResult.coverage,\n      endTime: testResult.perfStats.end,\n      message: testResult.failureMessage || '',\n      name: testResult.testFilePath,\n      startTime: testResult.perfStats.start,\n      status: allTestsPassed ? 'passed' : 'failed',\n      summary: ''\n    };\n  }\n};\n\nfunction formatTestAssertion(assertion) {\n  const result = {\n    ancestorTitles: assertion.ancestorTitles,\n    failureMessages: null,\n    fullName: assertion.fullName,\n    location: assertion.location,\n    status: assertion.status,\n    title: assertion.title\n  };\n\n  if (assertion.failureMessages) {\n    result.failureMessages = assertion.failureMessages;\n  }\n\n  return result;\n}\n\nfunction formatTestResults(results, codeCoverageFormatter, reporter) {\n  const testResults = results.testResults.map(testResult =>\n    formatTestResult(testResult, codeCoverageFormatter, reporter)\n  );\n  return {...results, testResults};\n}\n"]},"metadata":{},"sourceType":"script"}