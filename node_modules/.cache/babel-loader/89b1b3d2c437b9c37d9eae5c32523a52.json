{"ast":null,"code":"const tests = {\n  // ECMAScript 2018\n  \"object-rest-spread\": [\"({ ...{} })\", \"({ ...x } = {})\"],\n  // Babel 7.2.0\n  \"async-generators\": [\"async function* f() {}\"],\n  //  Babel 7.2.0\n  // ECMAScript 2019\n  \"optional-catch-binding\": [\"try {} catch {}\"],\n  // Babel 7.2.0\n  \"json-strings\": [\"'\\\\u2028'\"],\n  // Babel 7.2.0\n  // ECMAScript 2020\n  \"bigint\": [\"1n\"],\n  // Babel 7.8.0\n  \"optional-chaining\": [\"a?.b\"],\n  // Babel 7.9.0\n  \"nullish-coalescing-operator\": [\"a ?? b\"],\n  // Babel 7.9.0\n  // import.meta is handled manually\n  // Stage 3\n  \"numeric-separator\": [\"1_2\"],\n  \"class-properties\": [\"(class { x = 1 })\", \"(class { #x = 1 })\", \"(class { #x() {} })\"],\n  \"logical-assignment-operators\": [\"a ||= b\", \"a &&= b\", \"a ??= c\"]\n};\nconst plugins = [];\n\nconst works = test => {\n  try {\n    // Wrap the test in a function to only test the syntax, without executing it\n    (0, eval)(`(() => { ${test} })`);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n};\n\nfor (const [name, cases] of Object.entries(tests)) {\n  if (cases.some(works)) {\n    plugins.push(require.resolve(`@babel/plugin-syntax-${name}`));\n  }\n} // import.meta is only allowed in modules, and modules can only be evaluated\n// synchronously. For this reason, we cannot detect import.meta support at\n// runtime. It is supported starting from 10.4, so we can check the version.\n\n\nconst major = parseInt(process.versions.node, 10);\nconst minor = parseInt(process.versions.node.match(/^\\d+\\.(\\d+)/)[1], 10);\n\nif (major > 10 || major === 10 && minor >= 4) {\n  plugins.push(require.resolve(\"@babel/plugin-syntax-import-meta\"));\n} // Same for top level await - it is only supported in modules. It is supported\n// from 14.3.0\n\n\nif (major > 14 || major === 14 && minor >= 3) {\n  plugins.push(require.resolve(\"@babel/plugin-syntax-top-level-await\"));\n}\n\nmodule.exports = () => ({\n  plugins\n});","map":{"version":3,"sources":["/Users/wemi/jammming/node_modules/babel-preset-current-node-syntax/src/index.js"],"names":["tests","plugins","works","test","eval","_error","name","cases","Object","entries","some","push","require","resolve","major","parseInt","process","versions","node","minor","match","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAG;AACZ;AACA,wBAAsB,CAAC,aAAD,EAAgB,iBAAhB,CAFV;AAE8C;AAC1D,sBAAoB,CAAC,wBAAD,CAHR;AAGoC;AAEhD;AACA,4BAA0B,CAAC,iBAAD,CANd;AAMmC;AAC/C,kBAAgB,CAAC,WAAD,CAPJ;AAOmB;AAE/B;AACA,YAAU,CAAC,IAAD,CAVE;AAUM;AAClB,uBAAqB,CAAC,MAAD,CAXT;AAWmB;AAC/B,iCAA+B,CAAC,QAAD,CAZnB;AAY+B;AAC3C;AAEA;AACA,uBAAqB,CAAC,KAAD,CAhBT;AAiBZ,sBAAoB,CAClB,mBADkB,EAElB,oBAFkB,EAGlB,qBAHkB,CAjBR;AAsBZ,kCAAgC,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB;AAtBpB,CAAd;AAyBA,MAAMC,OAAO,GAAG,EAAhB;;AACA,MAAMC,KAAK,GAAIC,IAAD,IAAU;AACtB,MAAI;AACF;AACA,KAAC,GAAGC,IAAJ,EAAW,YAAWD,IAAK,KAA3B;AACA,WAAO,IAAP;AACD,GAJD,CAIE,OAAOE,MAAP,EAAe;AACf,WAAO,KAAP;AACD;AACF,CARD;;AAUA,KAAK,MAAM,CAACC,IAAD,EAAOC,KAAP,CAAX,IAA4BC,MAAM,CAACC,OAAP,CAAeT,KAAf,CAA5B,EAAmD;AACjD,MAAIO,KAAK,CAACG,IAAN,CAAWR,KAAX,CAAJ,EAAuB;AACrBD,IAAAA,OAAO,CAACU,IAAR,CAAaC,OAAO,CAACC,OAAR,CAAiB,wBAAuBP,IAAK,EAA7C,CAAb;AACD;AACF,C,CAED;AACA;AACA;;;AACA,MAAMQ,KAAK,GAAGC,QAAQ,CAACC,OAAO,CAACC,QAAR,CAAiBC,IAAlB,EAAwB,EAAxB,CAAtB;AACA,MAAMC,KAAK,GAAGJ,QAAQ,CAACC,OAAO,CAACC,QAAR,CAAiBC,IAAjB,CAAsBE,KAAtB,CAA4B,aAA5B,EAA2C,CAA3C,CAAD,EAAgD,EAAhD,CAAtB;;AACA,IAAIN,KAAK,GAAG,EAAR,IAAeA,KAAK,KAAK,EAAV,IAAgBK,KAAK,IAAI,CAA5C,EAAgD;AAC9ClB,EAAAA,OAAO,CAACU,IAAR,CAAaC,OAAO,CAACC,OAAR,CAAgB,kCAAhB,CAAb;AACD,C,CACD;AACA;;;AACA,IAAIC,KAAK,GAAG,EAAR,IAAeA,KAAK,KAAK,EAAV,IAAgBK,KAAK,IAAI,CAA5C,EAAgD;AAC9ClB,EAAAA,OAAO,CAACU,IAAR,CAAaC,OAAO,CAACC,OAAR,CAAgB,sCAAhB,CAAb;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB,OAAO;AAAErB,EAAAA;AAAF,CAAP,CAAjB","sourcesContent":["const tests = {\n  // ECMAScript 2018\n  \"object-rest-spread\": [\"({ ...{} })\", \"({ ...x } = {})\"], // Babel 7.2.0\n  \"async-generators\": [\"async function* f() {}\"], //  Babel 7.2.0\n\n  // ECMAScript 2019\n  \"optional-catch-binding\": [\"try {} catch {}\"], // Babel 7.2.0\n  \"json-strings\": [\"'\\\\u2028'\"], // Babel 7.2.0\n\n  // ECMAScript 2020\n  \"bigint\": [\"1n\"], // Babel 7.8.0\n  \"optional-chaining\": [\"a?.b\"], // Babel 7.9.0\n  \"nullish-coalescing-operator\": [\"a ?? b\"], // Babel 7.9.0\n  // import.meta is handled manually\n\n  // Stage 3\n  \"numeric-separator\": [\"1_2\"],\n  \"class-properties\": [\n    \"(class { x = 1 })\",\n    \"(class { #x = 1 })\",\n    \"(class { #x() {} })\",\n  ],\n  \"logical-assignment-operators\": [\"a ||= b\", \"a &&= b\", \"a ??= c\"],\n};\n\nconst plugins = [];\nconst works = (test) => {\n  try {\n    // Wrap the test in a function to only test the syntax, without executing it\n    (0, eval)(`(() => { ${test} })`);\n    return true;\n  } catch (_error) {\n    return false;\n  }\n};\n\nfor (const [name, cases] of Object.entries(tests)) {\n  if (cases.some(works)) {\n    plugins.push(require.resolve(`@babel/plugin-syntax-${name}`));\n  }\n}\n\n// import.meta is only allowed in modules, and modules can only be evaluated\n// synchronously. For this reason, we cannot detect import.meta support at\n// runtime. It is supported starting from 10.4, so we can check the version.\nconst major = parseInt(process.versions.node, 10);\nconst minor = parseInt(process.versions.node.match(/^\\d+\\.(\\d+)/)[1], 10);\nif (major > 10 || (major === 10 && minor >= 4)) {\n  plugins.push(require.resolve(\"@babel/plugin-syntax-import-meta\"));\n}\n// Same for top level await - it is only supported in modules. It is supported\n// from 14.3.0\nif (major > 14 || (major === 14 && minor >= 3)) {\n  plugins.push(require.resolve(\"@babel/plugin-syntax-top-level-await\"));\n}\n\nmodule.exports = () => ({ plugins });\n"]},"metadata":{},"sourceType":"script"}