{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d3390e2.chunk.js","sourcesContent":["const clientID = '6d7f450a2d294423a212e3874d46ad4f';\nconst redirectUri = 'http://tangible-attraction.surge.sh'; //link to share with people to see your app\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken (){\n        if (accessToken){\n            return accessToken;\n        }\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/); //let's us capture all the characters assigned to the token\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            //this clears the parameter, allowing us to grab access token when it expires\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        }else{\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \n        {headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks){\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track =>({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist (name, trackUris){\n        if (!name || !trackUris.length){ \n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}` };\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json() \n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body : JSON.stringify({uris: trackUris})\n                })\n            })\n\n        })\n        \n      }\n\n    }\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      term: ''\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n}\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange (event) {\n    this.setState({term : event.target.value});\n  }\n\n\n\n    render() {\n      return (\n        <div className=\"SearchBar\">\n            <input onChange = {this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\"/>\n            <button className=\"SearchButton\" onClick = {this.search}>SEARCH</button>\n        </div>\n      )\n    }\n  }\n  export default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component{\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction () {\n        if (this.props.isRemoval){\n            return <button className = 'Track-action' onClick = {this.removeTrack}>-</button>\n        }else{\n            return <button className = 'Track-action'onClick = {this.addTrack}>+</button>\n        }\n\n    }\n\n    addTrack () {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack () {\n        this.props.onRemove(this.props.track);\n    }\n\n\n    render() {\n      return (\n      <div className=\"Track\">\n          <div className=\"Track-information\">\n              <h3>{this.props.track.name}</h3>\n              <p>{this.props.track.artist} | {this.props.track.album} </p>\n          </div>\n           {this.renderAction()} {/* make button dynamic to person an action based on isRemoval */}\n         </div>\n      )\n    }\n  }\n  export default Track;\n","import React from 'react';\n\nimport './TrackList.css'; \nimport Track from '../Track/Track';\n\n\nclass TrackList extends React.Component{\n    render() {\n      return (\n        <div className=\"TrackList\">\n          {\n            this.props.tracks.map(track => { \n              return <Track track = {track}\n                key = {track.id}\n                onAdd = {this.props.onAdd}\n                onRemove = {this.props.onRemove} \n                isRemoval = {this.props.isRemoval} />\n            })\n          } \n        </div>\n      )\n    }\n  }\n  export default TrackList;\n","import React from 'react';\n\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\n\n\nclass SearchResults extends React.Component{\n    render() {\n      return (\n      <div className=\"SearchResults\">\n          <h2>Results</h2>\n          <TrackList tracks = {this.props.searchResults}\n          onAdd = {this.props.onAdd} \n          isRemoval = {false}/>\n    </div>\n    )\n   }\n  }\n  export default SearchResults;","import React from 'react';\n\nimport './Playlist.css'; \nimport TrackList from '../TrackList/TrackList';\n\n\nclass Playlist extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n\n  handleNameChange (event) {\n    this.props.onNameChange (event.target.value)\n        \n  }\n\n\n    render() {\n      return (\n        <div className=\"Playlist\">\n            <input defaultValue= {\"New Playlist\"} onChange = {this.handleNameChange}/>\n            <TrackList tracks = {this.props.playlistTracks} \n            onRemove = {this.props.onRemove}\n            isRemoval = {true} />\n            <button className=\"Playlist-save\" onClick = {this.props.onSave}>SAVE TO SPOTIFY</button>\n\n        </div>\n      )\n    }\n  }\n  export default Playlist;\n\n  ","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    \n\n    this.state = {\n      searchResults:[],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n\n    \n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n    addTrack (track) {\n\n      let tracks = this.state.playlistTracks;\n      if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n        return;\n      }\n      tracks.push(track);\n      this.setState({playlistTracks:tracks})\n    }\n\n\n    removeTrack (track) {\n      let tracks = this.state.playlistTracks;\n      tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n\n      this.setState({playlistTracks : tracks});\n\n    }\n\n    updatePlaylistName (name) {\n      this.setState({playlistTracks: name});\n\n    }\n\n    savePlaylist () {\n     const trackUris = this.state.playlistTracks.map(track => track.uri);\n     Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n       this.setState({\n         playlistName: 'New Playlist',\n         playlistTracks: []\n       })\n     })\n    }\n\n    search (term) {\n       Spotify.search(term).then(searchResults =>  {\n         this.setState({searchResults: searchResults})\n\n       })\n     }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n\n        <div className=\"App\">\n          <SearchBar onSearch = {this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults = {this.state.searchResults} onAdd = {this.addTrack}/>\n          <Playlist playlistName = {this.state.playlistName}\n          playlistTracks = {this.state.playlistTracks}\n          onRemove = {this.removeTrack}\n          onNameChange = {this.updatePlaylistName}\n          onSave = {this.savePlaylist} />\n        </div>\n      </div>\n    </div>\n  )\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}